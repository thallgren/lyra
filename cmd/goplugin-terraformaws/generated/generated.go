// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-Provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package aws

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/lyraproj/lyra/pkg/bridge"
	"github.com/lyraproj/pcore/px"
	"github.com/lyraproj/servicesdk/service"
	"time"
)

type (
	Acm_certificate struct {
		Acm_certificateID         *string `lyra:"ignore"`
		Arn                       *string
		Certificate_body          *string
		Certificate_chain         *string
		Domain_name               *string
		Domain_validation_options *[]Acm_certificate__domain_validation_options
		Private_key               *string
		Subject_alternative_names *[]string
		Tags                      *map[string]string
		Validation_emails         *[]string
		Validation_method         *string
	}

	Acm_certificate_validation struct {
		Acm_certificate_validationID *string `lyra:"ignore"`
		Certificate_arn              string
		Validation_record_fqdns      *[]string
	}

	Acmpca_certificate_authority struct {
		Acmpca_certificate_authorityID      *string `lyra:"ignore"`
		Arn                                 *string
		Certificate                         *string
		Certificate_authority_configuration []Acmpca_certificate_authority__certificate_authority_configuration
		Certificate_chain                   *string
		Certificate_signing_request         *string
		Enabled                             *bool
		Not_after                           *string
		Not_before                          *string
		Revocation_configuration            *[]Acmpca_certificate_authority__revocation_configuration
		Serial                              *string
		Status                              *string
		Tags                                *map[string]string
		Type                                *string
	}

	Alb struct {
		AlbID                            *string `lyra:"ignore"`
		Access_logs                      *[]Alb__access_logs
		Arn                              *string
		Arn_suffix                       *string
		Dns_name                         *string
		Enable_cross_zone_load_balancing *bool
		Enable_deletion_protection       *bool
		Enable_http2                     *bool
		Idle_timeout                     *int64
		Internal                         *bool
		Ip_address_type                  *string
		Load_balancer_type               *string
		Name                             *string
		Name_prefix                      *string
		Security_groups                  *[]string
		Subnet_mapping                   *[]Alb__subnet_mapping
		Subnets                          *[]string
		Tags                             *map[string]string
		Vpc_id                           *string
		Zone_id                          *string
	}

	Alb_listener struct {
		Alb_listenerID    *string `lyra:"ignore"`
		Arn               *string
		Certificate_arn   *string
		Default_action    []Alb_listener__default_action
		Load_balancer_arn string
		Port              int64
		Protocol          *string
		Ssl_policy        *string
	}

	Alb_listener_certificate struct {
		Alb_listener_certificateID *string `lyra:"ignore"`
		Certificate_arn            string
		Listener_arn               string
	}

	Alb_listener_rule struct {
		Alb_listener_ruleID *string `lyra:"ignore"`
		Action              []Alb_listener_rule__action
		Arn                 *string
		Condition           []Alb_listener_rule__condition
		Listener_arn        string
		Priority            *int64
	}

	Alb_target_group struct {
		Alb_target_groupID   *string `lyra:"ignore"`
		Arn                  *string
		Arn_suffix           *string
		Deregistration_delay *int64
		Health_check         *[]Alb_target_group__health_check
		Name                 *string
		Name_prefix          *string
		Port                 *int64
		Protocol             *string
		Proxy_protocol_v2    *bool
		Slow_start           *int64
		Stickiness           *[]Alb_target_group__stickiness
		Tags                 *map[string]string
		Target_type          *string
		Vpc_id               *string
	}

	Alb_target_group_attachment struct {
		Alb_target_group_attachmentID *string `lyra:"ignore"`
		Availability_zone             *string
		Port                          *int64
		Target_group_arn              string
		Target_id                     string
	}

	Ami struct {
		AmiID                  *string `lyra:"ignore"`
		Architecture           *string
		Description            *string
		Ebs_block_device       *[]Ami__ebs_block_device
		Ena_support            *bool
		Ephemeral_block_device *[]Ami__ephemeral_block_device
		Image_location         *string
		Kernel_id              *string
		Manage_ebs_snapshots   *bool
		Name                   string
		Ramdisk_id             *string
		Root_device_name       *string
		Root_snapshot_id       *string
		Sriov_net_support      *string
		Tags                   *map[string]string
		Virtualization_type    *string
	}

	Ami_copy struct {
		Ami_copyID             *string `lyra:"ignore"`
		Architecture           *string
		Description            *string
		Ebs_block_device       *[]Ami_copy__ebs_block_device
		Ena_support            *bool
		Encrypted              *bool
		Ephemeral_block_device *[]Ami_copy__ephemeral_block_device
		Image_location         *string
		Kernel_id              *string
		Kms_key_id             *string
		Manage_ebs_snapshots   *bool
		Name                   string
		Ramdisk_id             *string
		Root_device_name       *string
		Root_snapshot_id       *string
		Source_ami_id          string
		Source_ami_region      string
		Sriov_net_support      *string
		Tags                   *map[string]string
		Virtualization_type    *string
	}

	Ami_from_instance struct {
		Ami_from_instanceID     *string `lyra:"ignore"`
		Architecture            *string
		Description             *string
		Ebs_block_device        *[]Ami_from_instance__ebs_block_device
		Ena_support             *bool
		Ephemeral_block_device  *[]Ami_from_instance__ephemeral_block_device
		Image_location          *string
		Kernel_id               *string
		Manage_ebs_snapshots    *bool
		Name                    string
		Ramdisk_id              *string
		Root_device_name        *string
		Root_snapshot_id        *string
		Snapshot_without_reboot *bool
		Source_instance_id      string
		Sriov_net_support       *string
		Tags                    *map[string]string
		Virtualization_type     *string
	}

	Ami_launch_permission struct {
		Ami_launch_permissionID *string `lyra:"ignore"`
		Account_id              string
		Image_id                string
	}

	Api_gateway_account struct {
		Api_gateway_accountID *string `lyra:"ignore"`
		Cloudwatch_role_arn   *string
		Throttle_settings     *[]Api_gateway_account__throttle_settings
	}

	Api_gateway_api_key struct {
		Api_gateway_api_keyID *string `lyra:"ignore"`
		Created_date          *string
		Description           *string
		Enabled               *bool
		Last_updated_date     *string
		Name                  string
		Stage_key             *[]Api_gateway_api_key__stage_key
		Value                 *string
	}

	Api_gateway_authorizer struct {
		Api_gateway_authorizerID         *string `lyra:"ignore"`
		Authorizer_credentials           *string
		Authorizer_result_ttl_in_seconds *int64
		Authorizer_uri                   *string
		Identity_source                  *string
		Identity_validation_expression   *string
		Name                             string
		Provider_arns                    *[]string
		Rest_api_id                      string
		Type                             *string
	}

	Api_gateway_base_path_mapping struct {
		Api_gateway_base_path_mappingID *string `lyra:"ignore"`
		Api_id                          string
		Base_path                       *string
		Domain_name                     string
		Stage_name                      *string
	}

	Api_gateway_client_certificate struct {
		Api_gateway_client_certificateID *string `lyra:"ignore"`
		Created_date                     *string
		Description                      *string
		Expiration_date                  *string
		Pem_encoded_certificate          *string
	}

	Api_gateway_deployment struct {
		Api_gateway_deploymentID *string `lyra:"ignore"`
		Created_date             *string
		Description              *string
		Execution_arn            *string
		Invoke_url               *string
		Rest_api_id              string
		Stage_description        *string
		Stage_name               string
		Variables                *map[string]string
	}

	Api_gateway_documentation_part struct {
		Api_gateway_documentation_partID *string `lyra:"ignore"`
		Location                         []Api_gateway_documentation_part__location
		Properties                       string
		Rest_api_id                      string
	}

	Api_gateway_documentation_version struct {
		Api_gateway_documentation_versionID *string `lyra:"ignore"`
		Description                         *string
		Rest_api_id                         string
		Version                             string
	}

	Api_gateway_domain_name struct {
		Api_gateway_domain_nameID *string `lyra:"ignore"`
		Certificate_arn           *string
		Certificate_body          *string
		Certificate_chain         *string
		Certificate_name          *string
		Certificate_private_key   *string
		Certificate_upload_date   *string
		Cloudfront_domain_name    *string
		Cloudfront_zone_id        *string
		Domain_name               string
		Endpoint_configuration    *[]Api_gateway_domain_name__endpoint_configuration
		Regional_certificate_arn  *string
		Regional_certificate_name *string
		Regional_domain_name      *string
		Regional_zone_id          *string
	}

	Api_gateway_gateway_response struct {
		Api_gateway_gateway_responseID *string `lyra:"ignore"`
		Response_parameters            *map[string]string
		Response_templates             *map[string]string
		Response_type                  string
		Rest_api_id                    string
		Status_code                    *string
	}

	Api_gateway_integration struct {
		Api_gateway_integrationID  *string `lyra:"ignore"`
		Cache_key_parameters       *[]string
		Cache_namespace            *string
		Connection_id              *string
		Connection_type            *string
		Content_handling           *string
		Credentials                *string
		Http_method                string
		Integration_http_method    *string
		Passthrough_behavior       *string
		Request_parameters         *map[string]string
		Request_parameters_in_json *string
		Request_templates          *map[string]string
		Resource_id                string
		Rest_api_id                string
		Timeout_milliseconds       *int64
		Type                       string
		Uri                        *string
	}

	Api_gateway_integration_response struct {
		Api_gateway_integration_responseID *string `lyra:"ignore"`
		Content_handling                   *string
		Http_method                        string
		Resource_id                        string
		Response_parameters                *map[string]string
		Response_parameters_in_json        *string
		Response_templates                 *map[string]string
		Rest_api_id                        string
		Selection_pattern                  *string
		Status_code                        string
	}

	Api_gateway_method struct {
		Api_gateway_methodID       *string `lyra:"ignore"`
		Api_key_required           *bool
		Authorization              string
		Authorization_scopes       *[]string
		Authorizer_id              *string
		Http_method                string
		Request_models             *map[string]string
		Request_parameters         *map[string]bool
		Request_parameters_in_json *string
		Request_validator_id       *string
		Resource_id                string
		Rest_api_id                string
	}

	Api_gateway_method_response struct {
		Api_gateway_method_responseID *string `lyra:"ignore"`
		Http_method                   string
		Resource_id                   string
		Response_models               *map[string]string
		Response_parameters           *map[string]bool
		Response_parameters_in_json   *string
		Rest_api_id                   string
		Status_code                   string
	}

	Api_gateway_method_settings struct {
		Api_gateway_method_settingsID *string `lyra:"ignore"`
		Method_path                   string
		Rest_api_id                   string
		Settings                      []Api_gateway_method_settings__settings
		Stage_name                    string
	}

	Api_gateway_model struct {
		Api_gateway_modelID *string `lyra:"ignore"`
		Content_type        string
		Description         *string
		Name                string
		Rest_api_id         string
		Schema              *string
	}

	Api_gateway_request_validator struct {
		Api_gateway_request_validatorID *string `lyra:"ignore"`
		Name                            string
		Rest_api_id                     string
		Validate_request_body           *bool
		Validate_request_parameters     *bool
	}

	Api_gateway_resource struct {
		Api_gateway_resourceID *string `lyra:"ignore"`
		Parent_id              string
		Path                   *string
		Path_part              string
		Rest_api_id            string
	}

	Api_gateway_rest_api struct {
		Api_gateway_rest_apiID   *string `lyra:"ignore"`
		Api_key_source           *string
		Binary_media_types       *[]string
		Body                     *string
		Created_date             *string
		Description              *string
		Endpoint_configuration   *[]Api_gateway_rest_api__endpoint_configuration
		Execution_arn            *string
		Minimum_compression_size *int64
		Name                     string
		Policy                   *string
		Root_resource_id         *string
	}

	Api_gateway_stage struct {
		Api_gateway_stageID   *string `lyra:"ignore"`
		Access_log_settings   *[]Api_gateway_stage__access_log_settings
		Cache_cluster_enabled *bool
		Cache_cluster_size    *string
		Client_certificate_id *string
		Deployment_id         string
		Description           *string
		Documentation_version *string
		Execution_arn         *string
		Invoke_url            *string
		Rest_api_id           string
		Stage_name            string
		Tags                  *map[string]string
		Variables             *map[string]string
		Xray_tracing_enabled  *bool
	}

	Api_gateway_usage_plan struct {
		Api_gateway_usage_planID *string `lyra:"ignore"`
		Api_stages               *[]Api_gateway_usage_plan__api_stages
		Description              *string
		Name                     string
		Product_code             *string
		Quota_settings           *[]Api_gateway_usage_plan__quota_settings
		Throttle_settings        *[]Api_gateway_usage_plan__throttle_settings
	}

	Api_gateway_usage_plan_key struct {
		Api_gateway_usage_plan_keyID *string `lyra:"ignore"`
		Key_id                       string
		Key_type                     string
		Name                         *string
		Usage_plan_id                string
		Value                        *string
	}

	Api_gateway_vpc_link struct {
		Api_gateway_vpc_linkID *string `lyra:"ignore"`
		Description            *string
		Name                   string
		Target_arns            []string
	}

	App_cookie_stickiness_policy struct {
		App_cookie_stickiness_policyID *string `lyra:"ignore"`
		Cookie_name                    string
		Lb_port                        int64
		Load_balancer                  string
		Name                           string
	}

	Appautoscaling_policy struct {
		Appautoscaling_policyID                      *string `lyra:"ignore"`
		Adjustment_type                              *string
		Alarms                                       *[]string
		Arn                                          *string
		Cooldown                                     *int64
		Metric_aggregation_type                      *string
		Min_adjustment_magnitude                     *int64
		Name                                         string
		Policy_type                                  *string
		Resource_id                                  string
		Scalable_dimension                           string
		Service_namespace                            string
		Step_adjustment                              *[]Appautoscaling_policy__step_adjustment
		Step_scaling_policy_configuration            *[]Appautoscaling_policy__step_scaling_policy_configuration
		Target_tracking_scaling_policy_configuration *[]Appautoscaling_policy__target_tracking_scaling_policy_configuration
	}

	Appautoscaling_scheduled_action struct {
		Appautoscaling_scheduled_actionID *string `lyra:"ignore"`
		Arn                               *string
		End_time                          *string
		Name                              string
		Resource_id                       string
		Scalable_dimension                *string
		Scalable_target_action            *[]Appautoscaling_scheduled_action__scalable_target_action
		Schedule                          *string
		Service_namespace                 string
		Start_time                        *string
	}

	Appautoscaling_target struct {
		Appautoscaling_targetID *string `lyra:"ignore"`
		Max_capacity            int64
		Min_capacity            int64
		Resource_id             string
		Role_arn                *string
		Scalable_dimension      string
		Service_namespace       string
	}

	Appmesh_mesh struct {
		Appmesh_meshID    *string `lyra:"ignore"`
		Arn               *string
		Created_date      *string
		Last_updated_date *string
		Name              string
	}

	Appmesh_route struct {
		Appmesh_routeID     *string `lyra:"ignore"`
		Arn                 *string
		Created_date        *string
		Last_updated_date   *string
		Mesh_name           string
		Name                string
		Spec                []Appmesh_route__spec
		Virtual_router_name string
	}

	Appmesh_virtual_node struct {
		Appmesh_virtual_nodeID *string `lyra:"ignore"`
		Arn                    *string
		Created_date           *string
		Last_updated_date      *string
		Mesh_name              string
		Name                   string
		Spec                   []Appmesh_virtual_node__spec
	}

	Appmesh_virtual_router struct {
		Appmesh_virtual_routerID *string `lyra:"ignore"`
		Arn                      *string
		Created_date             *string
		Last_updated_date        *string
		Mesh_name                string
		Name                     string
		Spec                     []Appmesh_virtual_router__spec
	}

	Appsync_api_key struct {
		Appsync_api_keyID *string `lyra:"ignore"`
		Api_id            string
		Description       *string
		Expires           *time.Time
		Key               *string
	}

	Appsync_datasource struct {
		Appsync_datasourceID *string `lyra:"ignore"`
		Api_id               string
		Arn                  *string
		Description          *string
		Dynamodb_config      *[]Appsync_datasource__dynamodb_config
		Elasticsearch_config *[]Appsync_datasource__elasticsearch_config
		Http_config          *[]Appsync_datasource__http_config
		Lambda_config        *[]Appsync_datasource__lambda_config
		Name                 string
		Service_role_arn     *string
		Type                 string
	}

	Appsync_graphql_api struct {
		Appsync_graphql_apiID *string `lyra:"ignore"`
		Arn                   *string
		Authentication_type   string
		Log_config            *[]Appsync_graphql_api__log_config
		Name                  string
		Openid_connect_config *[]Appsync_graphql_api__openid_connect_config
		Uris                  *map[string]string
		User_pool_config      *[]Appsync_graphql_api__user_pool_config
	}

	Athena_database struct {
		Athena_databaseID        *string `lyra:"ignore"`
		Bucket                   string
		Encryption_configuration *[]Athena_database__encryption_configuration
		Force_destroy            *bool
		Name                     string
	}

	Athena_named_query struct {
		Athena_named_queryID *string `lyra:"ignore"`
		Database             string
		Description          *string
		Name                 string
		Query                string
	}

	Autoscaling_attachment struct {
		Autoscaling_attachmentID *string `lyra:"ignore"`
		Alb_target_group_arn     *string
		Autoscaling_group_name   string
		Elb                      *string
	}

	Autoscaling_group struct {
		Autoscaling_groupID       *string `lyra:"ignore"`
		Arn                       *string
		Availability_zones        *[]string
		Default_cooldown          *int64
		Desired_capacity          *int64
		Enabled_metrics           *[]string
		Force_delete              *bool
		Health_check_grace_period *int64
		Health_check_type         *string
		Initial_lifecycle_hook    *[]Autoscaling_group__initial_lifecycle_hook
		Launch_configuration      *string
		Launch_template           *[]Autoscaling_group__launch_template
		Load_balancers            *[]string
		Max_size                  int64
		Metrics_granularity       *string
		Min_elb_capacity          *int64
		Min_size                  int64
		Mixed_instances_policy    *[]Autoscaling_group__mixed_instances_policy
		Name                      *string
		Name_prefix               *string
		Placement_group           *string
		Protect_from_scale_in     *bool
		Service_linked_role_arn   *string
		Suspended_processes       *[]string
		Tag                       *[]Autoscaling_group__tag
		Tags                      *[]map[string]string
		Target_group_arns         *[]string
		Termination_policies      *[]string
		Vpc_zone_identifier       *[]string
		Wait_for_capacity_timeout *string
		Wait_for_elb_capacity     *int64
	}

	Autoscaling_lifecycle_hook struct {
		Autoscaling_lifecycle_hookID *string `lyra:"ignore"`
		Autoscaling_group_name       string
		Default_result               *string
		Heartbeat_timeout            *int64
		Lifecycle_transition         string
		Name                         string
		Notification_metadata        *string
		Notification_target_arn      *string
		Role_arn                     *string
	}

	Autoscaling_notification struct {
		Autoscaling_notificationID *string `lyra:"ignore"`
		Group_names                []string
		Notifications              []string
		Topic_arn                  string
	}

	Autoscaling_policy struct {
		Autoscaling_policyID          *string `lyra:"ignore"`
		Adjustment_type               *string
		Arn                           *string
		Autoscaling_group_name        string
		Cooldown                      *int64
		Estimated_instance_warmup     *int64
		Metric_aggregation_type       *string
		Min_adjustment_magnitude      *int64
		Min_adjustment_step           *int64
		Name                          string
		Policy_type                   *string
		Scaling_adjustment            *int64
		Step_adjustment               *[]Autoscaling_policy__step_adjustment
		Target_tracking_configuration *[]Autoscaling_policy__target_tracking_configuration
	}

	Autoscaling_schedule struct {
		Autoscaling_scheduleID *string `lyra:"ignore"`
		Arn                    *string
		Autoscaling_group_name string
		Desired_capacity       *int64
		End_time               *string
		Max_size               *int64
		Min_size               *int64
		Recurrence             *string
		Scheduled_action_name  string
		Start_time             *string
	}

	Batch_compute_environment struct {
		Batch_compute_environmentID *string `lyra:"ignore"`
		Arn                         *string
		Compute_environment_name    string
		Compute_resources           *[]Batch_compute_environment__compute_resources
		Ecc_cluster_arn             *string
		Ecs_cluster_arn             *string
		Service_role                string
		State                       *string
		Status                      *string
		Status_reason               *string
		Type                        string
	}

	Batch_job_definition struct {
		Batch_job_definitionID *string `lyra:"ignore"`
		Arn                    *string
		Container_properties   *string
		Name                   string
		Parameters             *map[string]string
		Retry_strategy         *[]Batch_job_definition__retry_strategy
		Revision               *int64
		Timeout                *[]Batch_job_definition__timeout
		Type                   string
	}

	Batch_job_queue struct {
		Batch_job_queueID    *string `lyra:"ignore"`
		Arn                  *string
		Compute_environments []string
		Name                 string
		Priority             int64
		State                string
	}

	Budgets_budget struct {
		Budgets_budgetID  *string `lyra:"ignore"`
		Account_id        *string
		Budget_type       string
		Cost_filters      *map[string]string
		Cost_types        *[]Budgets_budget__cost_types
		Limit_amount      string
		Limit_unit        string
		Name              *string
		Name_prefix       *string
		Time_period_end   *string
		Time_period_start string
		Time_unit         string
	}

	Cloud9_environment_ec2 struct {
		Cloud9_environment_ec2ID    *string `lyra:"ignore"`
		Arn                         *string
		Automatic_stop_time_minutes *int64
		Description                 *string
		Instance_type               string
		Name                        string
		Owner_arn                   *string
		Subnet_id                   *string
		Type                        *string
	}

	Cloudformation_stack struct {
		Cloudformation_stackID *string `lyra:"ignore"`
		Capabilities           *[]string
		Disable_rollback       *bool
		Iam_role_arn           *string
		Name                   string
		Notification_arns      *[]string
		On_failure             *string
		Outputs                *map[string]string
		Parameters             *map[string]string
		Policy_body            *string
		Policy_url             *string
		Tags                   *map[string]string
		Template_body          *string
		Template_url           *string
		Timeout_in_minutes     *int64
	}

	Cloudfront_distribution struct {
		Cloudfront_distributionID      *string `lyra:"ignore"`
		Active_trusted_signers         *map[string]string
		Aliases                        *[]string
		Arn                            *string
		Cache_behavior                 *[]Cloudfront_distribution__cache_behavior
		Caller_reference               *string
		Comment                        *string
		Custom_error_response          *[]Cloudfront_distribution__custom_error_response
		Default_cache_behavior         []Cloudfront_distribution__default_cache_behavior
		Default_root_object            *string
		Domain_name                    *string
		Enabled                        bool
		Etag                           *string
		Hosted_zone_id                 *string
		Http_version                   *string
		In_progress_validation_batches *int64
		Is_ipv6_enabled                *bool
		Last_modified_time             *string
		Logging_config                 *[]Cloudfront_distribution__logging_config
		Ordered_cache_behavior         *[]Cloudfront_distribution__ordered_cache_behavior
		Origin                         []Cloudfront_distribution__origin
		Price_class                    *string
		Restrictions                   []Cloudfront_distribution__restrictions
		Retain_on_delete               *bool
		Status                         *string
		Tags                           *map[string]string
		Viewer_certificate             []Cloudfront_distribution__viewer_certificate
		Web_acl_id                     *string
	}

	Cloudfront_origin_access_identity struct {
		Cloudfront_origin_access_identityID *string `lyra:"ignore"`
		Caller_reference                    *string
		Cloudfront_access_identity_path     *string
		Comment                             *string
		Etag                                *string
		Iam_arn                             *string
		S3_canonical_user_id                *string
	}

	Cloudfront_public_key struct {
		Cloudfront_public_keyID *string `lyra:"ignore"`
		Caller_reference        *string
		Comment                 *string
		Encoded_key             string
		Etag                    *string
		Name                    *string
		Name_prefix             *string
	}

	Cloudhsm_v2_cluster struct {
		Cloudhsm_v2_clusterID    *string `lyra:"ignore"`
		Cluster_certificates     *[]Cloudhsm_v2_cluster__cluster_certificates
		Cluster_id               *string
		Cluster_state            *string
		Hsm_type                 string
		Security_group_id        *string
		Source_backup_identifier *string
		Subnet_ids               []string
		Tags                     *map[string]string
		Vpc_id                   *string
	}

	Cloudhsm_v2_hsm struct {
		Cloudhsm_v2_hsmID *string `lyra:"ignore"`
		Availability_zone *string
		Cluster_id        string
		Hsm_eni_id        *string
		Hsm_id            *string
		Hsm_state         *string
		Ip_address        *string
		Subnet_id         *string
	}

	Cloudtrail struct {
		CloudtrailID                  *string `lyra:"ignore"`
		Arn                           *string
		Cloud_watch_logs_group_arn    *string
		Cloud_watch_logs_role_arn     *string
		Enable_log_file_validation    *bool
		Enable_logging                *bool
		Event_selector                *[]Cloudtrail__event_selector
		Home_region                   *string
		Include_global_service_events *bool
		Is_multi_region_trail         *bool
		Is_organization_trail         *bool
		Kms_key_id                    *string
		Name                          string
		S3_bucket_name                string
		S3_key_prefix                 *string
		Sns_topic_name                *string
		Tags                          *map[string]string
	}

	Cloudwatch_dashboard struct {
		Cloudwatch_dashboardID *string `lyra:"ignore"`
		Dashboard_arn          *string
		Dashboard_body         string
		Dashboard_name         string
	}

	Cloudwatch_event_permission struct {
		Cloudwatch_event_permissionID *string `lyra:"ignore"`
		Action                        *string
		Condition                     *[]Cloudwatch_event_permission__condition
		Principal                     string
		Statement_id                  string
	}

	Cloudwatch_event_rule struct {
		Cloudwatch_event_ruleID *string `lyra:"ignore"`
		Arn                     *string
		Description             *string
		Event_pattern           *string
		Is_enabled              *bool
		Name                    *string
		Name_prefix             *string
		Role_arn                *string
		Schedule_expression     *string
	}

	Cloudwatch_event_target struct {
		Cloudwatch_event_targetID *string `lyra:"ignore"`
		Arn                       string
		Batch_target              *[]Cloudwatch_event_target__batch_target
		Ecs_target                *[]Cloudwatch_event_target__ecs_target
		Input                     *string
		Input_path                *string
		Input_transformer         *[]Cloudwatch_event_target__input_transformer
		Kinesis_target            *[]Cloudwatch_event_target__kinesis_target
		Role_arn                  *string
		Rule                      string
		Run_command_targets       *[]Cloudwatch_event_target__run_command_targets
		Sqs_target                *[]Cloudwatch_event_target__sqs_target
		Target_id                 *string
	}

	Cloudwatch_log_destination struct {
		Cloudwatch_log_destinationID *string `lyra:"ignore"`
		Arn                          *string
		Name                         string
		Role_arn                     string
		Target_arn                   string
	}

	Cloudwatch_log_destination_policy struct {
		Cloudwatch_log_destination_policyID *string `lyra:"ignore"`
		Access_policy                       string
		Destination_name                    string
	}

	Cloudwatch_log_group struct {
		Cloudwatch_log_groupID *string `lyra:"ignore"`
		Arn                    *string
		Kms_key_id             *string
		Name                   *string
		Name_prefix            *string
		Retention_in_days      *int64
		Tags                   *map[string]string
	}

	Cloudwatch_log_metric_filter struct {
		Cloudwatch_log_metric_filterID *string `lyra:"ignore"`
		Log_group_name                 string
		Metric_transformation          []Cloudwatch_log_metric_filter__metric_transformation
		Name                           string
		Pattern                        string
	}

	Cloudwatch_log_resource_policy struct {
		Cloudwatch_log_resource_policyID *string `lyra:"ignore"`
		Policy_document                  string
		Policy_name                      string
	}

	Cloudwatch_log_stream struct {
		Cloudwatch_log_streamID *string `lyra:"ignore"`
		Arn                     *string
		Log_group_name          string
		Name                    string
	}

	Cloudwatch_log_subscription_filter struct {
		Cloudwatch_log_subscription_filterID *string `lyra:"ignore"`
		Destination_arn                      string
		Distribution                         *string
		Filter_pattern                       string
		Log_group_name                       string
		Name                                 string
		Role_arn                             *string
	}

	Cloudwatch_metric_alarm struct {
		Cloudwatch_metric_alarmID             *string `lyra:"ignore"`
		Actions_enabled                       *bool
		Alarm_actions                         *[]string
		Alarm_description                     *string
		Alarm_name                            string
		Arn                                   *string
		Comparison_operator                   string
		Datapoints_to_alarm                   *int64
		Dimensions                            *map[string]string
		Evaluate_low_sample_count_percentiles *string
		Evaluation_periods                    int64
		Extended_statistic                    *string
		Insufficient_data_actions             *[]string
		Metric_name                           string
		Namespace                             string
		Ok_actions                            *[]string
		Period                                int64
		Statistic                             *string
		Threshold                             float64
		Treat_missing_data                    *string
		Unit                                  *string
	}

	Codebuild_project struct {
		Codebuild_projectID *string `lyra:"ignore"`
		Arn                 *string
		Artifacts           []Codebuild_project__artifacts
		Badge_enabled       *bool
		Badge_url           *string
		Build_timeout       *int64
		Cache               *[]Codebuild_project__cache
		Description         *string
		Encryption_key      *string
		Environment         []Codebuild_project__environment
		Name                string
		Secondary_artifacts *[]Codebuild_project__secondary_artifacts
		Secondary_sources   *[]Codebuild_project__secondary_sources
		Service_role        string
		Source              []Codebuild_project__source
		Tags                *map[string]string
		Timeout             *int64
		Vpc_config          *[]Codebuild_project__vpc_config
	}

	Codebuild_webhook struct {
		Codebuild_webhookID *string `lyra:"ignore"`
		Branch_filter       *string
		Payload_url         *string
		Project_name        string
		Secret              *string
		Url                 *string
	}

	Codecommit_repository struct {
		Codecommit_repositoryID *string `lyra:"ignore"`
		Arn                     *string
		Clone_url_http          *string
		Clone_url_ssh           *string
		Default_branch          *string
		Description             *string
		Repository_id           *string
		Repository_name         string
	}

	Codecommit_trigger struct {
		Codecommit_triggerID *string `lyra:"ignore"`
		Configuration_id     *string
		Repository_name      string
		Trigger              []Codecommit_trigger__trigger
	}

	Codedeploy_app struct {
		Codedeploy_appID *string `lyra:"ignore"`
		Compute_platform *string
		Name             string
		Unique_id        *string
	}

	Codedeploy_deployment_config struct {
		Codedeploy_deployment_configID *string `lyra:"ignore"`
		Compute_platform               *string
		Deployment_config_id           *string
		Deployment_config_name         string
		Minimum_healthy_hosts          *[]Codedeploy_deployment_config__minimum_healthy_hosts
		Traffic_routing_config         *[]Codedeploy_deployment_config__traffic_routing_config
	}

	Codedeploy_deployment_group struct {
		Codedeploy_deployment_groupID   *string `lyra:"ignore"`
		Alarm_configuration             *[]Codedeploy_deployment_group__alarm_configuration
		App_name                        string
		Auto_rollback_configuration     *[]Codedeploy_deployment_group__auto_rollback_configuration
		Autoscaling_groups              *[]string
		Blue_green_deployment_config    *[]Codedeploy_deployment_group__blue_green_deployment_config
		Deployment_config_name          *string
		Deployment_group_name           string
		Deployment_style                *[]Codedeploy_deployment_group__deployment_style
		Ec2_tag_filter                  *[]Codedeploy_deployment_group__ec2_tag_filter
		Ec2_tag_set                     *[]Codedeploy_deployment_group__ec2_tag_set
		Ecs_service                     *[]Codedeploy_deployment_group__ecs_service
		Load_balancer_info              *[]Codedeploy_deployment_group__load_balancer_info
		On_premises_instance_tag_filter *[]Codedeploy_deployment_group__on_premises_instance_tag_filter
		Service_role_arn                string
		Trigger_configuration           *[]Codedeploy_deployment_group__trigger_configuration
	}

	Codepipeline struct {
		CodepipelineID *string `lyra:"ignore"`
		Arn            *string
		Artifact_store []Codepipeline__artifact_store
		Name           string
		Role_arn       string
		Stage          []Codepipeline__stage
	}

	Codepipeline_webhook struct {
		Codepipeline_webhookID       *string `lyra:"ignore"`
		Authentication               string
		Authentication_configuration *[]Codepipeline_webhook__authentication_configuration
		Filter                       []Codepipeline_webhook__filter
		Name                         string
		Target_action                string
		Target_pipeline              string
		Url                          *string
	}

	Cognito_identity_pool struct {
		Cognito_identity_poolID          *string `lyra:"ignore"`
		Allow_unauthenticated_identities *bool
		Arn                              *string
		Cognito_identity_providers       *[]Cognito_identity_pool__cognito_identity_providers
		Developer_provider_name          *string
		Identity_pool_name               string
		Openid_connect_provider_arns     *[]string
		Saml_provider_arns               *[]string
		Supported_login_providers        *map[string]string
	}

	Cognito_identity_pool_roles_attachment struct {
		Cognito_identity_pool_roles_attachmentID *string `lyra:"ignore"`
		Identity_pool_id                         string
		Role_mapping                             *[]Cognito_identity_pool_roles_attachment__role_mapping
		Roles                                    map[string]Cognito_identity_pool_roles_attachment__roles
	}

	Cognito_identity_provider struct {
		Cognito_identity_providerID *string `lyra:"ignore"`
		Attribute_mapping           *map[string]string
		Idp_identifiers             *[]string
		Provider_details            map[string]string
		Provider_name               string
		Provider_type               string
		User_pool_id                string
	}

	Cognito_resource_server struct {
		Cognito_resource_serverID *string `lyra:"ignore"`
		Identifier                string
		Name                      string
		Scope                     *[]Cognito_resource_server__scope
		Scope_identifiers         *[]string
		User_pool_id              string
	}

	Cognito_user_group struct {
		Cognito_user_groupID *string `lyra:"ignore"`
		Description          *string
		Name                 string
		Precedence           *int64
		Role_arn             *string
		User_pool_id         string
	}

	Cognito_user_pool struct {
		Cognito_user_poolID           *string `lyra:"ignore"`
		Admin_create_user_config      *[]Cognito_user_pool__admin_create_user_config
		Alias_attributes              *[]string
		Arn                           *string
		Auto_verified_attributes      *[]string
		Creation_date                 *string
		Device_configuration          *[]Cognito_user_pool__device_configuration
		Email_configuration           *[]Cognito_user_pool__email_configuration
		Email_verification_message    *string
		Email_verification_subject    *string
		Endpoint                      *string
		Lambda_config                 *[]Cognito_user_pool__lambda_config
		Last_modified_date            *string
		Mfa_configuration             *string
		Name                          string
		Password_policy               *[]Cognito_user_pool__password_policy
		Schema                        *[]Cognito_user_pool__schema
		Sms_authentication_message    *string
		Sms_configuration             *[]Cognito_user_pool__sms_configuration
		Sms_verification_message      *string
		Tags                          *map[string]string
		Username_attributes           *[]string
		Verification_message_template *[]Cognito_user_pool__verification_message_template
	}

	Cognito_user_pool_client struct {
		Cognito_user_pool_clientID           *string `lyra:"ignore"`
		Allowed_oauth_flows                  *[]string
		Allowed_oauth_flows_user_pool_client *bool
		Allowed_oauth_scopes                 *[]string
		Callback_urls                        *[]string
		Client_secret                        *string
		Default_redirect_uri                 *string
		Explicit_auth_flows                  *[]string
		Generate_secret                      *bool
		Logout_urls                          *[]string
		Name                                 string
		Read_attributes                      *[]string
		Refresh_token_validity               *int64
		Supported_identity_providers         *[]string
		User_pool_id                         string
		Write_attributes                     *[]string
	}

	Cognito_user_pool_domain struct {
		Cognito_user_pool_domainID  *string `lyra:"ignore"`
		Aws_account_id              *string
		Certificate_arn             *string
		Cloudfront_distribution_arn *string
		Domain                      string
		S3_bucket                   *string
		User_pool_id                string
		Version                     *string
	}

	Config_aggregate_authorization struct {
		Config_aggregate_authorizationID *string `lyra:"ignore"`
		Account_id                       string
		Arn                              *string
		Region                           string
	}

	Config_config_rule struct {
		Config_config_ruleID        *string `lyra:"ignore"`
		Arn                         *string
		Description                 *string
		Input_parameters            *string
		Maximum_execution_frequency *string
		Name                        string
		Rule_id                     *string
		Scope                       *[]Config_config_rule__scope
		Source                      []Config_config_rule__source
	}

	Config_configuration_aggregator struct {
		Config_configuration_aggregatorID *string `lyra:"ignore"`
		Account_aggregation_source        *[]Config_configuration_aggregator__account_aggregation_source
		Arn                               *string
		Name                              string
		Organization_aggregation_source   *[]Config_configuration_aggregator__organization_aggregation_source
	}

	Config_configuration_recorder struct {
		Config_configuration_recorderID *string `lyra:"ignore"`
		Name                            *string
		Recording_group                 *[]Config_configuration_recorder__recording_group
		Role_arn                        string
	}

	Config_configuration_recorder_status struct {
		Config_configuration_recorder_statusID *string `lyra:"ignore"`
		Is_enabled                             bool
		Name                                   string
	}

	Config_delivery_channel struct {
		Config_delivery_channelID    *string `lyra:"ignore"`
		Name                         *string
		S3_bucket_name               string
		S3_key_prefix                *string
		Snapshot_delivery_properties *[]Config_delivery_channel__snapshot_delivery_properties
		Sns_topic_arn                *string
	}

	Customer_gateway struct {
		Customer_gatewayID *string `lyra:"ignore"`
		Bgp_asn            int64
		Ip_address         string
		Tags               *map[string]string
		Type               string
	}

	Datasync_agent struct {
		Datasync_agentID *string `lyra:"ignore"`
		Activation_key   *string
		Arn              *string
		Ip_address       *string
		Name             *string
		Tags             *map[string]string
	}

	Datasync_location_efs struct {
		Datasync_location_efsID *string `lyra:"ignore"`
		Arn                     *string
		Ec2_config              []Datasync_location_efs__ec2_config
		Efs_file_system_arn     string
		Subdirectory            *string
		Tags                    *map[string]string
		Uri                     *string
	}

	Datasync_location_nfs struct {
		Datasync_location_nfsID *string `lyra:"ignore"`
		Arn                     *string
		On_prem_config          []Datasync_location_nfs__on_prem_config
		Server_hostname         string
		Subdirectory            string
		Tags                    *map[string]string
		Uri                     *string
	}

	Datasync_location_s3 struct {
		Datasync_location_s3ID *string `lyra:"ignore"`
		Arn                    *string
		S3_bucket_arn          string
		S3_config              []Datasync_location_s3__s3_config
		Subdirectory           string
		Tags                   *map[string]string
		Uri                    *string
	}

	Datasync_task struct {
		Datasync_taskID          *string `lyra:"ignore"`
		Arn                      *string
		Cloudwatch_log_group_arn *string
		Destination_location_arn string
		Name                     *string
		Options                  *[]Datasync_task__options
		Source_location_arn      string
		Tags                     *map[string]string
	}

	Dax_cluster struct {
		Dax_clusterID          *string `lyra:"ignore"`
		Arn                    *string
		Availability_zones     *[]string
		Cluster_address        *string
		Cluster_name           string
		Configuration_endpoint *string
		Description            *string
		Iam_role_arn           string
		Maintenance_window     *string
		Node_type              string
		Nodes                  *[]Dax_cluster__nodes
		Notification_topic_arn *string
		Parameter_group_name   *string
		Port                   *int64
		Replication_factor     int64
		Security_group_ids     *[]string
		Server_side_encryption *[]Dax_cluster__server_side_encryption
		Subnet_group_name      *string
		Tags                   *map[string]string
	}

	Dax_parameter_group struct {
		Dax_parameter_groupID *string `lyra:"ignore"`
		Description           *string
		Name                  string
		Parameters            *[]Dax_parameter_group__parameters
	}

	Dax_subnet_group struct {
		Dax_subnet_groupID *string `lyra:"ignore"`
		Description        *string
		Name               string
		Subnet_ids         []string
		Vpc_id             *string
	}

	Db_cluster_snapshot struct {
		Db_cluster_snapshotID          *string `lyra:"ignore"`
		Allocated_storage              *int64
		Availability_zones             *[]string
		Db_cluster_identifier          string
		Db_cluster_snapshot_arn        *string
		Db_cluster_snapshot_identifier string
		Engine                         *string
		Engine_version                 *string
		Kms_key_id                     *string
		License_model                  *string
		Port                           *int64
		Snapshot_type                  *string
		Source_db_cluster_snapshot_arn *string
		Status                         *string
		Storage_encrypted              *bool
		Vpc_id                         *string
	}

	Db_event_subscription struct {
		Db_event_subscriptionID *string `lyra:"ignore"`
		Arn                     *string
		Customer_aws_id         *string
		Enabled                 *bool
		Event_categories        *[]string
		Name                    *string
		Name_prefix             *string
		Sns_topic               string
		Source_ids              *[]string
		Source_type             *string
		Tags                    *map[string]string
	}

	Db_instance struct {
		Db_instanceID                       *string `lyra:"ignore"`
		Address                             *string
		Allocated_storage                   *int64
		Allow_major_version_upgrade         *bool
		Apply_immediately                   *bool
		Arn                                 *string
		Auto_minor_version_upgrade          *bool
		Availability_zone                   *string
		Backup_retention_period             *int64
		Backup_window                       *string
		Ca_cert_identifier                  *string
		Character_set_name                  *string
		Copy_tags_to_snapshot               *bool
		Db_subnet_group_name                *string
		Deletion_protection                 *bool
		Domain                              *string
		Domain_iam_role_name                *string
		Enabled_cloudwatch_logs_exports     *[]string
		Endpoint                            *string
		Engine                              *string
		Engine_version                      *string
		Final_snapshot_identifier           *string
		Hosted_zone_id                      *string
		Iam_database_authentication_enabled *bool
		Identifier                          *string
		Identifier_prefix                   *string
		Instance_class                      string
		Iops                                *int64
		Kms_key_id                          *string
		License_model                       *string
		Maintenance_window                  *string
		Monitoring_interval                 *int64
		Monitoring_role_arn                 *string
		Multi_az                            *bool
		Name                                *string
		Option_group_name                   *string
		Parameter_group_name                *string
		Password                            *string
		Port                                *int64
		Publicly_accessible                 *bool
		Replicas                            *[]string
		Replicate_source_db                 *string
		Resource_id                         *string
		S3_import                           *[]Db_instance__s3_import
		Security_group_names                *[]string
		Skip_final_snapshot                 *bool
		Snapshot_identifier                 *string
		Status                              *string
		Storage_encrypted                   *bool
		Storage_type                        *string
		Tags                                *map[string]string
		Timezone                            *string
		Username                            *string
		Vpc_security_group_ids              *[]string
	}

	Db_option_group struct {
		Db_option_groupID        *string `lyra:"ignore"`
		Arn                      *string
		Engine_name              string
		Major_engine_version     string
		Name                     *string
		Name_prefix              *string
		Option                   *[]Db_option_group__option
		Option_group_description *string
		Tags                     *map[string]string
	}

	Db_parameter_group struct {
		Db_parameter_groupID *string `lyra:"ignore"`
		Arn                  *string
		Description          *string
		Family               string
		Name                 *string
		Name_prefix          *string
		Parameter            *[]Db_parameter_group__parameter
		Tags                 *map[string]string
	}

	Db_security_group struct {
		Db_security_groupID *string `lyra:"ignore"`
		Arn                 *string
		Description         *string
		Ingress             []Db_security_group__ingress
		Name                string
		Tags                *map[string]string
	}

	Db_snapshot struct {
		Db_snapshotID                 *string `lyra:"ignore"`
		Allocated_storage             *int64
		Availability_zone             *string
		Db_instance_identifier        string
		Db_snapshot_arn               *string
		Db_snapshot_identifier        string
		Encrypted                     *bool
		Engine                        *string
		Engine_version                *string
		Iops                          *int64
		Kms_key_id                    *string
		License_model                 *string
		Option_group_name             *string
		Port                          *int64
		Snapshot_type                 *string
		Source_db_snapshot_identifier *string
		Source_region                 *string
		Status                        *string
		Storage_type                  *string
		Tags                          *map[string]string
		Vpc_id                        *string
	}

	Db_subnet_group struct {
		Db_subnet_groupID *string `lyra:"ignore"`
		Arn               *string
		Description       *string
		Name              *string
		Name_prefix       *string
		Subnet_ids        []string
		Tags              *map[string]string
	}

	Default_network_acl struct {
		Default_network_aclID  *string `lyra:"ignore"`
		Default_network_acl_id string
		Egress                 *[]Default_network_acl__egress
		Ingress                *[]Default_network_acl__ingress
		Owner_id               *string
		Subnet_ids             *[]string
		Tags                   *map[string]string
		Vpc_id                 *string
	}

	Default_route_table struct {
		Default_route_tableID  *string `lyra:"ignore"`
		Default_route_table_id string
		Owner_id               *string
		Propagating_vgws       *[]string
		Route                  *[]Default_route_table__route
		Tags                   *map[string]string
		Vpc_id                 *string
	}

	Default_security_group struct {
		Default_security_groupID *string `lyra:"ignore"`
		Arn                      *string
		Egress                   *[]Default_security_group__egress
		Ingress                  *[]Default_security_group__ingress
		Name                     *string
		Owner_id                 *string
		Revoke_rules_on_delete   *bool
		Tags                     *map[string]string
		Vpc_id                   *string
	}

	Default_subnet struct {
		Default_subnetID                *string `lyra:"ignore"`
		Arn                             *string
		Assign_ipv6_address_on_creation *bool
		Availability_zone               string
		Availability_zone_id            *string
		Cidr_block                      *string
		Ipv6_cidr_block                 *string
		Ipv6_cidr_block_association_id  *string
		Map_public_ip_on_launch         *bool
		Owner_id                        *string
		Tags                            *map[string]string
		Vpc_id                          *string
	}

	Default_vpc struct {
		Default_vpcID                    *string `lyra:"ignore"`
		Arn                              *string
		Assign_generated_ipv6_cidr_block *bool
		Cidr_block                       *string
		Default_network_acl_id           *string
		Default_route_table_id           *string
		Default_security_group_id        *string
		Dhcp_options_id                  *string
		Enable_classiclink               *bool
		Enable_classiclink_dns_support   *bool
		Enable_dns_hostnames             *bool
		Enable_dns_support               *bool
		Instance_tenancy                 *string
		Ipv6_association_id              *string
		Ipv6_cidr_block                  *string
		Main_route_table_id              *string
		Owner_id                         *string
		Tags                             *map[string]string
	}

	Default_vpc_dhcp_options struct {
		Default_vpc_dhcp_optionsID *string `lyra:"ignore"`
		Domain_name                *string
		Domain_name_servers        *string
		Netbios_name_servers       *[]string
		Netbios_node_type          *string
		Ntp_servers                *string
		Owner_id                   *string
		Tags                       *map[string]string
	}

	Devicefarm_project struct {
		Devicefarm_projectID *string `lyra:"ignore"`
		Arn                  *string
		Name                 string
	}

	Directory_service_conditional_forwarder struct {
		Directory_service_conditional_forwarderID *string `lyra:"ignore"`
		Directory_id                              string
		Dns_ips                                   []string
		Remote_domain_name                        string
	}

	Directory_service_directory struct {
		Directory_service_directoryID *string `lyra:"ignore"`
		Access_url                    *string
		Alias                         *string
		Connect_settings              *[]Directory_service_directory__connect_settings
		Description                   *string
		Dns_ip_addresses              *[]string
		Edition                       *string
		Enable_sso                    *bool
		Name                          string
		Password                      string
		Security_group_id             *string
		Short_name                    *string
		Size                          *string
		Tags                          *map[string]string
		Type                          *string
		Vpc_settings                  *[]Directory_service_directory__vpc_settings
	}

	Dlm_lifecycle_policy struct {
		Dlm_lifecycle_policyID *string `lyra:"ignore"`
		Description            string
		Execution_role_arn     string
		Policy_details         []Dlm_lifecycle_policy__policy_details
		State                  *string
	}

	Dms_certificate struct {
		Dms_certificateID  *string `lyra:"ignore"`
		Certificate_arn    *string
		Certificate_id     string
		Certificate_pem    *string
		Certificate_wallet *string
	}

	Dms_endpoint struct {
		Dms_endpointID              *string `lyra:"ignore"`
		Certificate_arn             *string
		Database_name               *string
		Endpoint_arn                *string
		Endpoint_id                 string
		Endpoint_type               string
		Engine_name                 string
		Extra_connection_attributes *string
		Kms_key_arn                 *string
		Mongodb_settings            *[]Dms_endpoint__mongodb_settings
		Password                    *string
		Port                        *int64
		S3_settings                 *[]Dms_endpoint__s3_settings
		Server_name                 *string
		Service_access_role         *string
		Ssl_mode                    *string
		Tags                        *map[string]string
		Username                    *string
	}

	Dms_replication_instance struct {
		Dms_replication_instanceID       *string `lyra:"ignore"`
		Allocated_storage                *int64
		Apply_immediately                *bool
		Auto_minor_version_upgrade       *bool
		Availability_zone                *string
		Engine_version                   *string
		Kms_key_arn                      *string
		Multi_az                         *bool
		Preferred_maintenance_window     *string
		Publicly_accessible              *bool
		Replication_instance_arn         *string
		Replication_instance_class       string
		Replication_instance_id          string
		Replication_instance_private_ips *[]string
		Replication_instance_public_ips  *[]string
		Replication_subnet_group_id      *string
		Tags                             *map[string]string
		Vpc_security_group_ids           *[]string
	}

	Dms_replication_subnet_group struct {
		Dms_replication_subnet_groupID       *string `lyra:"ignore"`
		Replication_subnet_group_arn         *string
		Replication_subnet_group_description string
		Replication_subnet_group_id          string
		Subnet_ids                           []string
		Tags                                 *map[string]string
		Vpc_id                               *string
	}

	Dms_replication_task struct {
		Dms_replication_taskID    *string `lyra:"ignore"`
		Cdc_start_time            *string
		Migration_type            string
		Replication_instance_arn  string
		Replication_task_arn      *string
		Replication_task_id       string
		Replication_task_settings *string
		Source_endpoint_arn       string
		Table_mappings            string
		Tags                      *map[string]string
		Target_endpoint_arn       string
	}

	Docdb_cluster_parameter_group struct {
		Docdb_cluster_parameter_groupID *string `lyra:"ignore"`
		Arn                             *string
		Description                     *string
		Family                          string
		Name                            *string
		Name_prefix                     *string
		Parameter                       *[]Docdb_cluster_parameter_group__parameter
		Tags                            *map[string]string
	}

	Docdb_subnet_group struct {
		Docdb_subnet_groupID *string `lyra:"ignore"`
		Arn                  *string
		Description          *string
		Name                 *string
		Name_prefix          *string
		Subnet_ids           []string
		Tags                 *map[string]string
	}

	Dx_bgp_peer struct {
		Dx_bgp_peerID        *string `lyra:"ignore"`
		Address_family       string
		Amazon_address       *string
		Bgp_asn              int64
		Bgp_auth_key         *string
		Bgp_status           *string
		Customer_address     *string
		Virtual_interface_id string
	}

	Dx_connection struct {
		Dx_connectionID     *string `lyra:"ignore"`
		Arn                 *string
		Bandwidth           string
		Jumbo_frame_capable *bool
		Location            string
		Name                string
		Tags                *map[string]string
	}

	Dx_connection_association struct {
		Dx_connection_associationID *string `lyra:"ignore"`
		Connection_id               string
		Lag_id                      string
	}

	Dx_gateway struct {
		Dx_gatewayID    *string `lyra:"ignore"`
		Amazon_side_asn string
		Name            string
	}

	Dx_gateway_association struct {
		Dx_gateway_associationID *string `lyra:"ignore"`
		Dx_gateway_id            string
		Vpn_gateway_id           string
	}

	Dx_hosted_private_virtual_interface struct {
		Dx_hosted_private_virtual_interfaceID *string `lyra:"ignore"`
		Address_family                        string
		Amazon_address                        *string
		Arn                                   *string
		Bgp_asn                               int64
		Bgp_auth_key                          *string
		Connection_id                         string
		Customer_address                      *string
		Jumbo_frame_capable                   *bool
		Mtu                                   *int64
		Name                                  string
		Owner_account_id                      string
		Vlan                                  int64
	}

	Dx_hosted_private_virtual_interface_accepter struct {
		Dx_hosted_private_virtual_interface_accepterID *string `lyra:"ignore"`
		Arn                                            *string
		Dx_gateway_id                                  *string
		Tags                                           *map[string]string
		Virtual_interface_id                           string
		Vpn_gateway_id                                 *string
	}

	Dx_hosted_public_virtual_interface struct {
		Dx_hosted_public_virtual_interfaceID *string `lyra:"ignore"`
		Address_family                       string
		Amazon_address                       *string
		Arn                                  *string
		Bgp_asn                              int64
		Bgp_auth_key                         *string
		Connection_id                        string
		Customer_address                     *string
		Name                                 string
		Owner_account_id                     string
		Route_filter_prefixes                []string
		Vlan                                 int64
	}

	Dx_hosted_public_virtual_interface_accepter struct {
		Dx_hosted_public_virtual_interface_accepterID *string `lyra:"ignore"`
		Arn                                           *string
		Tags                                          *map[string]string
		Virtual_interface_id                          string
	}

	Dx_lag struct {
		Dx_lagID              *string `lyra:"ignore"`
		Arn                   *string
		Connections_bandwidth string
		Force_destroy         *bool
		Location              string
		Name                  string
		Number_of_connections *int64
		Tags                  *map[string]string
	}

	Dx_private_virtual_interface struct {
		Dx_private_virtual_interfaceID *string `lyra:"ignore"`
		Address_family                 string
		Amazon_address                 *string
		Arn                            *string
		Bgp_asn                        int64
		Bgp_auth_key                   *string
		Connection_id                  string
		Customer_address               *string
		Dx_gateway_id                  *string
		Jumbo_frame_capable            *bool
		Mtu                            *int64
		Name                           string
		Tags                           *map[string]string
		Vlan                           int64
		Vpn_gateway_id                 *string
	}

	Dx_public_virtual_interface struct {
		Dx_public_virtual_interfaceID *string `lyra:"ignore"`
		Address_family                string
		Amazon_address                *string
		Arn                           *string
		Bgp_asn                       int64
		Bgp_auth_key                  *string
		Connection_id                 string
		Customer_address              *string
		Name                          string
		Route_filter_prefixes         []string
		Tags                          *map[string]string
		Vlan                          int64
	}

	Dynamodb_global_table struct {
		Dynamodb_global_tableID *string `lyra:"ignore"`
		Arn                     *string
		Name                    string
		Replica                 []Dynamodb_global_table__replica
	}

	Dynamodb_table struct {
		Dynamodb_tableID       *string `lyra:"ignore"`
		Arn                    *string
		Attribute              []Dynamodb_table__attribute
		Billing_mode           *string
		Global_secondary_index *[]Dynamodb_table__global_secondary_index
		Hash_key               string
		Local_secondary_index  *[]Dynamodb_table__local_secondary_index
		Name                   string
		Point_in_time_recovery *[]Dynamodb_table__point_in_time_recovery
		Range_key              *string
		Read_capacity          *int64
		Server_side_encryption *[]Dynamodb_table__server_side_encryption
		Stream_arn             *string
		Stream_enabled         *bool
		Stream_label           *string
		Stream_view_type       *string
		Tags                   *map[string]string
		Ttl                    *[]Dynamodb_table__ttl
		Write_capacity         *int64
	}

	Dynamodb_table_item struct {
		Dynamodb_table_itemID *string `lyra:"ignore"`
		Hash_key              string
		Item                  string
		Range_key             *string
		Table_name            string
	}

	Ebs_snapshot struct {
		Ebs_snapshotID         *string `lyra:"ignore"`
		Data_encryption_key_id *string
		Description            *string
		Encrypted              *bool
		Kms_key_id             *string
		Owner_alias            *string
		Owner_id               *string
		Tags                   *map[string]string
		Volume_id              string
		Volume_size            *int64
	}

	Ebs_snapshot_copy struct {
		Ebs_snapshot_copyID    *string `lyra:"ignore"`
		Data_encryption_key_id *string
		Description            *string
		Encrypted              *bool
		Kms_key_id             *string
		Owner_alias            *string
		Owner_id               *string
		Source_region          string
		Source_snapshot_id     string
		Tags                   *map[string]string
		Volume_id              *string
		Volume_size            *int64
	}

	Ebs_volume struct {
		Ebs_volumeID      *string `lyra:"ignore"`
		Arn               *string
		Availability_zone string
		Encrypted         *bool
		Iops              *int64
		Kms_key_id        *string
		Size              *int64
		Snapshot_id       *string
		Tags              *map[string]string
		Type              *string
	}

	Ec2_capacity_reservation struct {
		Ec2_capacity_reservationID *string `lyra:"ignore"`
		Availability_zone          string
		Ebs_optimized              *bool
		End_date                   *time.Time
		End_date_type              *string
		Ephemeral_storage          *bool
		Instance_count             int64
		Instance_match_criteria    *string
		Instance_platform          string
		Instance_type              string
		Tags                       *map[string]string
		Tenancy                    *string
	}

	Ec2_fleet struct {
		Ec2_fleetID                         *string `lyra:"ignore"`
		Excess_capacity_termination_policy  *string
		Launch_template_config              []Ec2_fleet__launch_template_config
		On_demand_options                   *[]Ec2_fleet__on_demand_options
		Replace_unhealthy_instances         *bool
		Spot_options                        *[]Ec2_fleet__spot_options
		Tags                                *map[string]string
		Target_capacity_specification       []Ec2_fleet__target_capacity_specification
		Terminate_instances                 *bool
		Terminate_instances_with_expiration *bool
		Type                                *string
	}

	Ec2_transit_gateway struct {
		Ec2_transit_gatewayID              *string `lyra:"ignore"`
		Amazon_side_asn                    *int64
		Arn                                *string
		Association_default_route_table_id *string
		Auto_accept_shared_attachments     *string
		Default_route_table_association    *string
		Default_route_table_propagation    *string
		Description                        *string
		Dns_support                        *string
		Owner_id                           *string
		Propagation_default_route_table_id *string
		Tags                               *map[string]string
		Vpn_ecmp_support                   *string
	}

	Ec2_transit_gateway_route struct {
		Ec2_transit_gateway_routeID    *string `lyra:"ignore"`
		Destination_cidr_block         string
		Transit_gateway_attachment_id  string
		Transit_gateway_route_table_id string
	}

	Ec2_transit_gateway_route_table struct {
		Ec2_transit_gateway_route_tableID *string `lyra:"ignore"`
		Default_association_route_table   *bool
		Default_propagation_route_table   *bool
		Tags                              *map[string]string
		Transit_gateway_id                string
	}

	Ec2_transit_gateway_route_table_association struct {
		Ec2_transit_gateway_route_table_associationID *string `lyra:"ignore"`
		Resource_id                                   *string
		Resource_type                                 *string
		Transit_gateway_attachment_id                 string
		Transit_gateway_route_table_id                string
	}

	Ec2_transit_gateway_route_table_propagation struct {
		Ec2_transit_gateway_route_table_propagationID *string `lyra:"ignore"`
		Resource_id                                   *string
		Resource_type                                 *string
		Transit_gateway_attachment_id                 string
		Transit_gateway_route_table_id                string
	}

	Ec2_transit_gateway_vpc_attachment struct {
		Ec2_transit_gateway_vpc_attachmentID            *string `lyra:"ignore"`
		Dns_support                                     *string
		Ipv6_support                                    *string
		Subnet_ids                                      []string
		Tags                                            *map[string]string
		Transit_gateway_default_route_table_association *bool
		Transit_gateway_default_route_table_propagation *bool
		Transit_gateway_id                              string
		Vpc_id                                          string
		Vpc_owner_id                                    *string
	}

	Ecr_lifecycle_policy struct {
		Ecr_lifecycle_policyID *string `lyra:"ignore"`
		Policy                 string
		Registry_id            *string
		Repository             string
	}

	Ecr_repository struct {
		Ecr_repositoryID *string `lyra:"ignore"`
		Arn              *string
		Name             string
		Registry_id      *string
		Repository_url   *string
		Tags             *map[string]string
	}

	Ecr_repository_policy struct {
		Ecr_repository_policyID *string `lyra:"ignore"`
		Policy                  string
		Registry_id             *string
		Repository              string
	}

	Ecs_cluster struct {
		Ecs_clusterID *string `lyra:"ignore"`
		Arn           *string
		Name          string
		Tags          *map[string]string
	}

	Ecs_service struct {
		Ecs_serviceID                      *string `lyra:"ignore"`
		Cluster                            *string
		Deployment_controller              *[]Ecs_service__deployment_controller
		Deployment_maximum_percent         *int64
		Deployment_minimum_healthy_percent *int64
		Desired_count                      *int64
		Enable_ecs_managed_tags            *bool
		Health_check_grace_period_seconds  *int64
		Iam_role                           *string
		Launch_type                        *string
		Load_balancer                      *[]Ecs_service__load_balancer
		Name                               string
		Network_configuration              *[]Ecs_service__network_configuration
		Ordered_placement_strategy         *[]Ecs_service__ordered_placement_strategy
		Placement_constraints              *[]Ecs_service__placement_constraints
		Placement_strategy                 *[]Ecs_service__placement_strategy
		Platform_version                   *string
		Propagate_tags                     *string
		Scheduling_strategy                *string
		Service_registries                 *[]Ecs_service__service_registries
		Tags                               *map[string]string
		Task_definition                    string
	}

	Ecs_task_definition struct {
		Ecs_task_definitionID    *string `lyra:"ignore"`
		Arn                      *string
		Container_definitions    string
		Cpu                      *string
		Execution_role_arn       *string
		Family                   string
		Ipc_mode                 *string
		Memory                   *string
		Network_mode             *string
		Pid_mode                 *string
		Placement_constraints    *[]Ecs_task_definition__placement_constraints
		Requires_compatibilities *[]string
		Revision                 *int64
		Tags                     *map[string]string
		Task_role_arn            *string
		Volume                   *[]Ecs_task_definition__volume
	}

	Efs_file_system struct {
		Efs_file_systemID               *string `lyra:"ignore"`
		Arn                             *string
		Creation_token                  *string
		Dns_name                        *string
		Encrypted                       *bool
		Kms_key_id                      *string
		Performance_mode                *string
		Provisioned_throughput_in_mibps *float64
		Reference_name                  *string
		Tags                            *map[string]string
		Throughput_mode                 *string
	}

	Efs_mount_target struct {
		Efs_mount_targetID   *string `lyra:"ignore"`
		Dns_name             *string
		File_system_arn      *string
		File_system_id       string
		Ip_address           *string
		Network_interface_id *string
		Security_groups      *[]string
		Subnet_id            string
	}

	Egress_only_internet_gateway struct {
		Egress_only_internet_gatewayID *string `lyra:"ignore"`
		Vpc_id                         string
	}

	Eip struct {
		EipID                     *string `lyra:"ignore"`
		Allocation_id             *string
		Associate_with_private_ip *string
		Association_id            *string
		Domain                    *string
		Instance                  *string
		Network_interface         *string
		Private_ip                *string
		Public_ip                 *string
		Public_ipv4_pool          *string
		Tags                      *map[string]string
		Vpc                       *bool
	}

	Eip_association struct {
		Eip_associationID    *string `lyra:"ignore"`
		Allocation_id        *string
		Allow_reassociation  *bool
		Instance_id          *string
		Network_interface_id *string
		Private_ip_address   *string
		Public_ip            *string
	}

	Eks_cluster struct {
		Eks_clusterID         *string `lyra:"ignore"`
		Arn                   *string
		Certificate_authority *[]Eks_cluster__certificate_authority
		Created_at            *string
		Endpoint              *string
		Name                  string
		Platform_version      *string
		Role_arn              string
		Version               *string
		Vpc_config            []Eks_cluster__vpc_config
	}

	Elastic_beanstalk_application struct {
		Elastic_beanstalk_applicationID *string `lyra:"ignore"`
		Appversion_lifecycle            *[]Elastic_beanstalk_application__appversion_lifecycle
		Description                     *string
		Name                            string
	}

	Elastic_beanstalk_application_version struct {
		Elastic_beanstalk_application_versionID *string `lyra:"ignore"`
		Application                             string
		Bucket                                  string
		Description                             *string
		Force_delete                            *bool
		Key                                     string
		Name                                    string
	}

	Elastic_beanstalk_configuration_template struct {
		Elastic_beanstalk_configuration_templateID *string `lyra:"ignore"`
		Application                                string
		Description                                *string
		Environment_id                             *string
		Name                                       string
		Setting                                    *[]Elastic_beanstalk_configuration_template__setting
		Solution_stack_name                        *string
	}

	Elastic_beanstalk_environment struct {
		Elastic_beanstalk_environmentID *string `lyra:"ignore"`
		All_settings                    *[]Elastic_beanstalk_environment__all_settings
		Application                     string
		Arn                             *string
		Autoscaling_groups              *[]string
		Cname                           *string
		Cname_prefix                    *string
		Description                     *string
		Instances                       *[]string
		Launch_configurations           *[]string
		Load_balancers                  *[]string
		Name                            string
		Platform_arn                    *string
		Poll_interval                   *string
		Queues                          *[]string
		Setting                         *[]Elastic_beanstalk_environment__setting
		Solution_stack_name             *string
		Tags                            *map[string]string
		Template_name                   *string
		Tier                            *string
		Triggers                        *[]string
		Version_label                   *string
		Wait_for_ready_timeout          *string
	}

	Elasticache_cluster struct {
		Elasticache_clusterID        *string `lyra:"ignore"`
		Apply_immediately            *bool
		Availability_zone            *string
		Availability_zones           *[]string
		Az_mode                      *string
		Cache_nodes                  *[]Elasticache_cluster__cache_nodes
		Cluster_address              *string
		Cluster_id                   string
		Configuration_endpoint       *string
		Engine                       *string
		Engine_version               *string
		Maintenance_window           *string
		Node_type                    *string
		Notification_topic_arn       *string
		Num_cache_nodes              *int64
		Parameter_group_name         *string
		Port                         *int64
		Preferred_availability_zones *[]string
		Replication_group_id         *string
		Security_group_ids           *[]string
		Security_group_names         *[]string
		Snapshot_arns                *[]string
		Snapshot_name                *string
		Snapshot_retention_limit     *int64
		Snapshot_window              *string
		Subnet_group_name            *string
		Tags                         *map[string]string
	}

	Elasticache_parameter_group struct {
		Elasticache_parameter_groupID *string `lyra:"ignore"`
		Description                   *string
		Family                        string
		Name                          string
		Parameter                     *[]Elasticache_parameter_group__parameter
	}

	Elasticache_replication_group struct {
		Elasticache_replication_groupID *string `lyra:"ignore"`
		Apply_immediately               *bool
		At_rest_encryption_enabled      *bool
		Auth_token                      *string
		Auto_minor_version_upgrade      *bool
		Automatic_failover_enabled      *bool
		Availability_zones              *[]string
		Cluster_mode                    *[]Elasticache_replication_group__cluster_mode
		Configuration_endpoint_address  *string
		Engine                          *string
		Engine_version                  *string
		Maintenance_window              *string
		Member_clusters                 *[]string
		Node_type                       *string
		Notification_topic_arn          *string
		Number_cache_clusters           *int64
		Parameter_group_name            *string
		Port                            *int64
		Primary_endpoint_address        *string
		Replication_group_description   string
		Replication_group_id            string
		Security_group_ids              *[]string
		Security_group_names            *[]string
		Snapshot_arns                   *[]string
		Snapshot_name                   *string
		Snapshot_retention_limit        *int64
		Snapshot_window                 *string
		Subnet_group_name               *string
		Tags                            *map[string]string
		Transit_encryption_enabled      *bool
	}

	Elasticache_security_group struct {
		Elasticache_security_groupID *string `lyra:"ignore"`
		Description                  *string
		Name                         string
		Security_group_names         []string
	}

	Elasticache_subnet_group struct {
		Elasticache_subnet_groupID *string `lyra:"ignore"`
		Description                *string
		Name                       string
		Subnet_ids                 []string
	}

	Elasticsearch_domain struct {
		Elasticsearch_domainID  *string `lyra:"ignore"`
		Access_policies         *string
		Advanced_options        *map[string]string
		Arn                     *string
		Cluster_config          *[]Elasticsearch_domain__cluster_config
		Cognito_options         *[]Elasticsearch_domain__cognito_options
		Domain_id               *string
		Domain_name             string
		Ebs_options             *[]Elasticsearch_domain__ebs_options
		Elasticsearch_version   *string
		Encrypt_at_rest         *[]Elasticsearch_domain__encrypt_at_rest
		Endpoint                *string
		Kibana_endpoint         *string
		Log_publishing_options  *[]Elasticsearch_domain__log_publishing_options
		Node_to_node_encryption *[]Elasticsearch_domain__node_to_node_encryption
		Snapshot_options        *[]Elasticsearch_domain__snapshot_options
		Tags                    *map[string]string
		Vpc_options             *[]Elasticsearch_domain__vpc_options
	}

	Elasticsearch_domain_policy struct {
		Elasticsearch_domain_policyID *string `lyra:"ignore"`
		Access_policies               string
		Domain_name                   string
	}

	Elastictranscoder_pipeline struct {
		Elastictranscoder_pipelineID *string `lyra:"ignore"`
		Arn                          *string
		Aws_kms_key_arn              *string
		Content_config               *[]Elastictranscoder_pipeline__content_config
		Content_config_permissions   *[]Elastictranscoder_pipeline__content_config_permissions
		Input_bucket                 string
		Name                         *string
		Notifications                *[]Elastictranscoder_pipeline__notifications
		Output_bucket                *string
		Role                         string
		Thumbnail_config             *[]Elastictranscoder_pipeline__thumbnail_config
		Thumbnail_config_permissions *[]Elastictranscoder_pipeline__thumbnail_config_permissions
	}

	Elastictranscoder_preset struct {
		Elastictranscoder_presetID *string `lyra:"ignore"`
		Arn                        *string
		Audio                      *[]Elastictranscoder_preset__audio
		Audio_codec_options        *[]Elastictranscoder_preset__audio_codec_options
		Container                  string
		Description                *string
		Name                       *string
		Thumbnails                 *[]Elastictranscoder_preset__thumbnails
		Type                       *string
		Video                      *[]Elastictranscoder_preset__video
		Video_codec_options        *map[string]string
		Video_watermarks           *[]Elastictranscoder_preset__video_watermarks
	}

	Elb struct {
		ElbID                       *string `lyra:"ignore"`
		Access_logs                 *[]Elb__access_logs
		Arn                         *string
		Availability_zones          *[]string
		Connection_draining         *bool
		Connection_draining_timeout *int64
		Cross_zone_load_balancing   *bool
		Dns_name                    *string
		Health_check                *[]Elb__health_check
		Idle_timeout                *int64
		Instances                   *[]string
		Internal                    *bool
		Listener                    []Elb__listener
		Name                        *string
		Name_prefix                 *string
		Security_groups             *[]string
		Source_security_group       *string
		Source_security_group_id    *string
		Subnets                     *[]string
		Tags                        *map[string]string
		Zone_id                     *string
	}

	Elb_attachment struct {
		Elb_attachmentID *string `lyra:"ignore"`
		Elb              string
		Instance         string
	}

	Emr_cluster struct {
		Emr_clusterID                     *string `lyra:"ignore"`
		Additional_info                   *string
		Applications                      *[]string
		Autoscaling_role                  *string
		Bootstrap_action                  *[]Emr_cluster__bootstrap_action
		Cluster_state                     *string
		Configurations                    *string
		Configurations_json               *string
		Core_instance_count               *int64
		Core_instance_type                *string
		Custom_ami_id                     *string
		Ebs_root_volume_size              *int64
		Ec2_attributes                    *[]Emr_cluster__ec2_attributes
		Instance_group                    *[]Emr_cluster__instance_group
		Keep_job_flow_alive_when_no_steps *bool
		Kerberos_attributes               *[]Emr_cluster__kerberos_attributes
		Log_uri                           *string
		Master_instance_type              *string
		Master_public_dns                 *string
		Name                              string
		Release_label                     string
		Scale_down_behavior               *string
		Security_configuration            *string
		Service_role                      string
		Step                              *[]Emr_cluster__step
		Tags                              *map[string]string
		Termination_protection            *bool
		Visible_to_all_users              *bool
	}

	Emr_instance_group struct {
		Emr_instance_groupID   *string `lyra:"ignore"`
		Cluster_id             string
		Ebs_config             *[]Emr_instance_group__ebs_config
		Ebs_optimized          *bool
		Instance_count         *int64
		Instance_type          string
		Name                   *string
		Running_instance_count *int64
		Status                 *string
	}

	Emr_security_configuration struct {
		Emr_security_configurationID *string `lyra:"ignore"`
		Configuration                string
		Creation_date                *string
		Name                         *string
		Name_prefix                  *string
	}

	Flow_log struct {
		Flow_logID           *string `lyra:"ignore"`
		Eni_id               *string
		Iam_role_arn         *string
		Log_destination      *string
		Log_destination_type *string
		Log_group_name       *string
		Subnet_id            *string
		Traffic_type         string
		Vpc_id               *string
	}

	Gamelift_alias struct {
		Gamelift_aliasID *string `lyra:"ignore"`
		Arn              *string
		Description      *string
		Name             string
		Routing_strategy []Gamelift_alias__routing_strategy
	}

	Gamelift_build struct {
		Gamelift_buildID *string `lyra:"ignore"`
		Name             string
		Operating_system string
		Storage_location []Gamelift_build__storage_location
		Version          *string
	}

	Gamelift_fleet struct {
		Gamelift_fleetID                   *string `lyra:"ignore"`
		Arn                                *string
		Build_id                           string
		Description                        *string
		Ec2_inbound_permission             *[]Gamelift_fleet__ec2_inbound_permission
		Ec2_instance_type                  string
		Log_paths                          *[]string
		Metric_groups                      *[]string
		Name                               string
		New_game_session_protection_policy *string
		Operating_system                   *string
		Resource_creation_limit_policy     *[]Gamelift_fleet__resource_creation_limit_policy
		Runtime_configuration              *[]Gamelift_fleet__runtime_configuration
	}

	Gamelift_game_session_queue struct {
		Gamelift_game_session_queueID *string `lyra:"ignore"`
		Arn                           *string
		Destinations                  *[]string
		Name                          string
		Player_latency_policy         *[]Gamelift_game_session_queue__player_latency_policy
		Timeout_in_seconds            *int64
	}

	Glacier_vault struct {
		Glacier_vaultID *string `lyra:"ignore"`
		Access_policy   *string
		Arn             *string
		Location        *string
		Name            string
		Notification    *[]Glacier_vault__notification
		Tags            *map[string]string
	}

	Glacier_vault_lock struct {
		Glacier_vault_lockID  *string `lyra:"ignore"`
		Complete_lock         bool
		Ignore_deletion_error *bool
		Policy                string
		Vault_name            string
	}

	Globalaccelerator_accelerator struct {
		Globalaccelerator_acceleratorID *string `lyra:"ignore"`
		Attributes                      *[]Globalaccelerator_accelerator__attributes
		Enabled                         *bool
		Ip_address_type                 *string
		Ip_sets                         *[]Globalaccelerator_accelerator__ip_sets
		Name                            string
	}

	Glue_catalog_database struct {
		Glue_catalog_databaseID *string `lyra:"ignore"`
		Catalog_id              *string
		Description             *string
		Location_uri            *string
		Name                    string
		Parameters              *map[string]string
	}

	Glue_catalog_table struct {
		Glue_catalog_tableID *string `lyra:"ignore"`
		Catalog_id           *string
		Database_name        string
		Description          *string
		Name                 string
		Owner                *string
		Parameters           *map[string]string
		Partition_keys       *[]Glue_catalog_table__partition_keys
		Retention            *int64
		Storage_descriptor   *[]Glue_catalog_table__storage_descriptor
		Table_type           *string
		View_expanded_text   *string
		View_original_text   *string
	}

	Glue_classifier struct {
		Glue_classifierID *string `lyra:"ignore"`
		Grok_classifier   *[]Glue_classifier__grok_classifier
		Json_classifier   *[]Glue_classifier__json_classifier
		Name              string
		Xml_classifier    *[]Glue_classifier__xml_classifier
	}

	Glue_connection struct {
		Glue_connectionID                *string `lyra:"ignore"`
		Catalog_id                       *string
		Connection_properties            map[string]string
		Connection_type                  *string
		Description                      *string
		Match_criteria                   *[]string
		Name                             string
		Physical_connection_requirements *[]Glue_connection__physical_connection_requirements
	}

	Glue_crawler struct {
		Glue_crawlerID         *string `lyra:"ignore"`
		Classifiers            *[]string
		Configuration          *string
		Database_name          string
		Description            *string
		Dynamodb_target        *[]Glue_crawler__dynamodb_target
		Jdbc_target            *[]Glue_crawler__jdbc_target
		Name                   string
		Role                   string
		S3_target              *[]Glue_crawler__s3_target
		Schedule               *string
		Schema_change_policy   *[]Glue_crawler__schema_change_policy
		Security_configuration *string
		Table_prefix           *string
	}

	Glue_job struct {
		Glue_jobID             *string `lyra:"ignore"`
		Allocated_capacity     *int64
		Command                []Glue_job__command
		Connections            *[]string
		Default_arguments      *map[string]string
		Description            *string
		Execution_property     *[]Glue_job__execution_property
		Max_retries            *int64
		Name                   string
		Role_arn               string
		Security_configuration *string
		Timeout                *int64
	}

	Glue_security_configuration struct {
		Glue_security_configurationID *string `lyra:"ignore"`
		Encryption_configuration      []Glue_security_configuration__encryption_configuration
		Name                          string
	}

	Glue_trigger struct {
		Glue_triggerID *string `lyra:"ignore"`
		Actions        []Glue_trigger__actions
		Description    *string
		Enabled        *bool
		Name           string
		Predicate      *[]Glue_trigger__predicate
		Schedule       *string
		Type           string
	}

	Guardduty_detector struct {
		Guardduty_detectorID         *string `lyra:"ignore"`
		Account_id                   *string
		Enable                       *bool
		Finding_publishing_frequency *string
	}

	Guardduty_ipset struct {
		Guardduty_ipsetID *string `lyra:"ignore"`
		Activate          bool
		Detector_id       string
		Format            string
		Location          string
		Name              string
	}

	Guardduty_member struct {
		Guardduty_memberID         *string `lyra:"ignore"`
		Account_id                 string
		Detector_id                string
		Disable_email_notification *bool
		Email                      string
		Invitation_message         *string
		Invite                     *bool
		Relationship_status        *string
	}

	Guardduty_threatintelset struct {
		Guardduty_threatintelsetID *string `lyra:"ignore"`
		Activate                   bool
		Detector_id                string
		Format                     string
		Location                   string
		Name                       string
	}

	Iam_access_key struct {
		Iam_access_keyID  *string `lyra:"ignore"`
		Encrypted_secret  *string
		Key_fingerprint   *string
		Pgp_key           *string
		Secret            *string
		Ses_smtp_password *string
		Status            *string
		User              string
	}

	Iam_account_alias struct {
		Iam_account_aliasID *string `lyra:"ignore"`
		Account_alias       string
	}

	Iam_account_password_policy struct {
		Iam_account_password_policyID  *string `lyra:"ignore"`
		Allow_users_to_change_password *bool
		Expire_passwords               *bool
		Hard_expiry                    *bool
		Max_password_age               *int64
		Minimum_password_length        *int64
		Password_reuse_prevention      *int64
		Require_lowercase_characters   *bool
		Require_numbers                *bool
		Require_symbols                *bool
		Require_uppercase_characters   *bool
	}

	Iam_group struct {
		Iam_groupID *string `lyra:"ignore"`
		Arn         *string
		Name        string
		Path        *string
		Unique_id   *string
	}

	Iam_group_membership struct {
		Iam_group_membershipID *string `lyra:"ignore"`
		Group                  string
		Name                   string
		Users                  []string
	}

	Iam_group_policy struct {
		Iam_group_policyID *string `lyra:"ignore"`
		Group              string
		Name               *string
		Name_prefix        *string
		Policy             string
	}

	Iam_group_policy_attachment struct {
		Iam_group_policy_attachmentID *string `lyra:"ignore"`
		Group                         string
		Policy_arn                    string
	}

	Iam_instance_profile struct {
		Iam_instance_profileID *string `lyra:"ignore"`
		Arn                    *string
		Create_date            *string
		Name                   *string
		Name_prefix            *string
		Path                   *string
		Role                   *string
		Roles                  *[]string
		Unique_id              *string
	}

	Iam_openid_connect_provider struct {
		Iam_openid_connect_providerID *string `lyra:"ignore"`
		Arn                           *string
		Client_id_list                []string
		Thumbprint_list               []string
		Url                           string
	}

	Iam_policy struct {
		Iam_policyID *string `lyra:"ignore"`
		Arn          *string
		Description  *string
		Name         *string
		Name_prefix  *string
		Path         *string
		Policy       string
	}

	Iam_policy_attachment struct {
		Iam_policy_attachmentID *string `lyra:"ignore"`
		Groups                  *[]string
		Name                    string
		Policy_arn              string
		Roles                   *[]string
		Users                   *[]string
	}

	Iam_role struct {
		Iam_roleID            *string `lyra:"ignore"`
		Arn                   *string
		Assume_role_policy    string
		Create_date           *string
		Description           *string
		Force_detach_policies *bool
		Max_session_duration  *int64
		Name                  *string
		Name_prefix           *string
		Path                  *string
		Permissions_boundary  *string
		Tags                  *map[string]string
		Unique_id             *string
	}

	Iam_role_policy struct {
		Iam_role_policyID *string `lyra:"ignore"`
		Name              *string
		Name_prefix       *string
		Policy            string
		Role              string
	}

	Iam_role_policy_attachment struct {
		Iam_role_policy_attachmentID *string `lyra:"ignore"`
		Policy_arn                   string
		Role                         string
	}

	Iam_saml_provider struct {
		Iam_saml_providerID    *string `lyra:"ignore"`
		Arn                    *string
		Name                   string
		Saml_metadata_document string
		Valid_until            *string
	}

	Iam_server_certificate struct {
		Iam_server_certificateID *string `lyra:"ignore"`
		Arn                      *string
		Certificate_body         string
		Certificate_chain        *string
		Name                     *string
		Name_prefix              *string
		Path                     *string
		Private_key              string
	}

	Iam_service_linked_role struct {
		Iam_service_linked_roleID *string `lyra:"ignore"`
		Arn                       *string
		Aws_service_name          string
		Create_date               *string
		Custom_suffix             *string
		Description               *string
		Name                      *string
		Path                      *string
		Unique_id                 *string
	}

	Iam_user struct {
		Iam_userID           *string `lyra:"ignore"`
		Arn                  *string
		Force_destroy        *bool
		Name                 string
		Path                 *string
		Permissions_boundary *string
		Tags                 *map[string]string
		Unique_id            *string
	}

	Iam_user_group_membership struct {
		Iam_user_group_membershipID *string `lyra:"ignore"`
		Groups                      []string
		User                        string
	}

	Iam_user_login_profile struct {
		Iam_user_login_profileID *string `lyra:"ignore"`
		Encrypted_password       *string
		Key_fingerprint          *string
		Password_length          *int64
		Password_reset_required  *bool
		Pgp_key                  string
		User                     string
	}

	Iam_user_policy struct {
		Iam_user_policyID *string `lyra:"ignore"`
		Name              *string
		Name_prefix       *string
		Policy            string
		User              string
	}

	Iam_user_policy_attachment struct {
		Iam_user_policy_attachmentID *string `lyra:"ignore"`
		Policy_arn                   string
		User                         string
	}

	Iam_user_ssh_key struct {
		Iam_user_ssh_keyID *string `lyra:"ignore"`
		Encoding           string
		Fingerprint        *string
		Public_key         string
		Ssh_public_key_id  *string
		Status             *string
		Username           string
	}

	Inspector_assessment_target struct {
		Inspector_assessment_targetID *string `lyra:"ignore"`
		Arn                           *string
		Name                          string
		Resource_group_arn            *string
	}

	Inspector_assessment_template struct {
		Inspector_assessment_templateID *string `lyra:"ignore"`
		Arn                             *string
		Duration                        int64
		Name                            string
		Rules_package_arns              []string
		Target_arn                      string
	}

	Inspector_resource_group struct {
		Inspector_resource_groupID *string `lyra:"ignore"`
		Arn                        *string
		Tags                       map[string]string
	}

	Instance struct {
		InstanceID                           *string `lyra:"ignore"`
		Ami                                  string
		Arn                                  *string
		Associate_public_ip_address          *bool
		Availability_zone                    *string
		Block_device                         *map[string]string
		Cpu_core_count                       *int64
		Cpu_threads_per_core                 *int64
		Credit_specification                 *[]Instance__credit_specification
		Disable_api_termination              *bool
		Ebs_block_device                     *[]Instance__ebs_block_device
		Ebs_optimized                        *bool
		Ephemeral_block_device               *[]Instance__ephemeral_block_device
		Get_password_data                    *bool
		Host_id                              *string
		Iam_instance_profile                 *string
		Instance_initiated_shutdown_behavior *string
		Instance_state                       *string
		Instance_type                        string
		Ipv6_address_count                   *int64
		Ipv6_addresses                       *[]string
		Key_name                             *string
		Monitoring                           *bool
		Network_interface                    *[]Instance__network_interface
		Network_interface_id                 *string
		Password_data                        *string
		Placement_group                      *string
		Primary_network_interface_id         *string
		Private_dns                          *string
		Private_ip                           *string
		Public_dns                           *string
		Public_ip                            *string
		Root_block_device                    *[]Instance__root_block_device
		Security_groups                      *[]string
		Source_dest_check                    *bool
		Subnet_id                            *string
		Tags                                 *map[string]string
		Tenancy                              *string
		User_data                            *string
		User_data_base64                     *string
		Volume_tags                          *map[string]string
		Vpc_security_group_ids               *[]string
	}

	Internet_gateway struct {
		Internet_gatewayID *string `lyra:"ignore"`
		Owner_id           *string
		Tags               *map[string]string
		Vpc_id             *string
	}

	Iot_certificate struct {
		Iot_certificateID *string `lyra:"ignore"`
		Active            bool
		Arn               *string
		Csr               string
	}

	Iot_policy struct {
		Iot_policyID       *string `lyra:"ignore"`
		Arn                *string
		Default_version_id *string
		Name               string
		Policy             string
	}

	Iot_policy_attachment struct {
		Iot_policy_attachmentID *string `lyra:"ignore"`
		Policy                  string
		Target                  string
	}

	Iot_thing struct {
		Iot_thingID       *string `lyra:"ignore"`
		Arn               *string
		Attributes        *map[string]string
		Default_client_id *string
		Name              string
		Thing_type_name   *string
		Version           *int64
	}

	Iot_thing_principal_attachment struct {
		Iot_thing_principal_attachmentID *string `lyra:"ignore"`
		Principal                        string
		Thing                            string
	}

	Iot_thing_type struct {
		Iot_thing_typeID *string `lyra:"ignore"`
		Arn              *string
		Deprecated       *bool
		Name             string
		Properties       *[]Iot_thing_type__properties
	}

	Iot_topic_rule struct {
		Iot_topic_ruleID  *string `lyra:"ignore"`
		Arn               *string
		Cloudwatch_alarm  *[]Iot_topic_rule__cloudwatch_alarm
		Cloudwatch_metric *[]Iot_topic_rule__cloudwatch_metric
		Description       *string
		Dynamodb          *[]Iot_topic_rule__dynamodb
		Elasticsearch     *[]Iot_topic_rule__elasticsearch
		Enabled           bool
		Firehose          *[]Iot_topic_rule__firehose
		Kinesis           *[]Iot_topic_rule__kinesis
		Lambda            *[]Iot_topic_rule__lambda
		Name              string
		Republish         *[]Iot_topic_rule__republish
		S3                *[]Iot_topic_rule__s3
		Sns               *[]Iot_topic_rule__sns
		Sql               string
		Sql_version       string
		Sqs               *[]Iot_topic_rule__sqs
	}

	Key_pair struct {
		Key_pairID      *string `lyra:"ignore"`
		Fingerprint     *string
		Key_name        *string
		Key_name_prefix *string
		Public_key      string
	}

	Kinesis_analytics_application struct {
		Kinesis_analytics_applicationID *string `lyra:"ignore"`
		Arn                             *string
		Cloudwatch_logging_options      *[]Kinesis_analytics_application__cloudwatch_logging_options
		Code                            *string
		Create_timestamp                *string
		Description                     *string
		Inputs                          *[]Kinesis_analytics_application__inputs
		Last_update_timestamp           *string
		Name                            string
		Outputs                         *[]Kinesis_analytics_application__outputs
		Reference_data_sources          *[]Kinesis_analytics_application__reference_data_sources
		Status                          *string
		Version                         *int64
	}

	Kinesis_firehose_delivery_stream struct {
		Kinesis_firehose_delivery_streamID *string `lyra:"ignore"`
		Arn                                *string
		Destination                        string
		Destination_id                     *string
		Elasticsearch_configuration        *[]Kinesis_firehose_delivery_stream__elasticsearch_configuration
		Extended_s3_configuration          *[]Kinesis_firehose_delivery_stream__extended_s3_configuration
		Kinesis_source_configuration       *[]Kinesis_firehose_delivery_stream__kinesis_source_configuration
		Name                               string
		Redshift_configuration             *[]Kinesis_firehose_delivery_stream__redshift_configuration
		S3_configuration                   *[]Kinesis_firehose_delivery_stream__s3_configuration
		Splunk_configuration               *[]Kinesis_firehose_delivery_stream__splunk_configuration
		Tags                               *map[string]string
		Version_id                         *string
	}

	Kinesis_stream struct {
		Kinesis_streamID    *string `lyra:"ignore"`
		Arn                 *string
		Encryption_type     *string
		Kms_key_id          *string
		Name                string
		Retention_period    *int64
		Shard_count         int64
		Shard_level_metrics *[]string
		Tags                *map[string]string
	}

	Kms_alias struct {
		Kms_aliasID    *string `lyra:"ignore"`
		Arn            *string
		Name           *string
		Name_prefix    *string
		Target_key_arn *string
		Target_key_id  string
	}

	Kms_grant struct {
		Kms_grantID           *string `lyra:"ignore"`
		Constraints           *[]Kms_grant__constraints
		Grant_creation_tokens *[]string
		Grant_id              *string
		Grant_token           *string
		Grantee_principal     string
		Key_id                string
		Name                  *string
		Operations            []string
		Retire_on_delete      *bool
		Retiring_principal    *string
	}

	Kms_key struct {
		Kms_keyID               *string `lyra:"ignore"`
		Arn                     *string
		Deletion_window_in_days *int64
		Description             *string
		Enable_key_rotation     *bool
		Is_enabled              *bool
		Key_id                  *string
		Key_usage               *string
		Policy                  *string
		Tags                    *map[string]string
	}

	Lambda_alias struct {
		Lambda_aliasID   *string `lyra:"ignore"`
		Arn              *string
		Description      *string
		Function_name    string
		Function_version string
		Invoke_arn       *string
		Name             string
		Routing_config   *[]Lambda_alias__routing_config
	}

	Lambda_event_source_mapping struct {
		Lambda_event_source_mappingID *string `lyra:"ignore"`
		Batch_size                    *int64
		Enabled                       *bool
		Event_source_arn              string
		Function_arn                  *string
		Function_name                 string
		Last_modified                 *string
		Last_processing_result        *string
		Starting_position             *string
		Starting_position_timestamp   *time.Time
		State                         *string
		State_transition_reason       *string
		Uuid                          *string
	}

	Lambda_function struct {
		Lambda_functionID              *string `lyra:"ignore"`
		Arn                            *string
		Dead_letter_config             *[]Lambda_function__dead_letter_config
		Description                    *string
		Environment                    *[]Lambda_function__environment
		Filename                       *string
		Function_name                  string
		Handler                        string
		Invoke_arn                     *string
		Kms_key_arn                    *string
		Last_modified                  *string
		Layers                         *[]string
		Memory_size                    *int64
		Publish                        *bool
		Qualified_arn                  *string
		Reserved_concurrent_executions *int64
		Role                           string
		Runtime                        string
		S3_bucket                      *string
		S3_key                         *string
		S3_object_version              *string
		Source_code_hash               *string
		Source_code_size               *int64
		Tags                           *map[string]string
		Timeout                        *int64
		Tracing_config                 *[]Lambda_function__tracing_config
		Version                        *string
		Vpc_config                     *[]Lambda_function__vpc_config
	}

	Lambda_layer_version struct {
		Lambda_layer_versionID *string `lyra:"ignore"`
		Arn                    *string
		Compatible_runtimes    *[]string
		Created_date           *string
		Description            *string
		Filename               *string
		Layer_arn              *string
		Layer_name             string
		License_info           *string
		S3_bucket              *string
		S3_key                 *string
		S3_object_version      *string
		Source_code_hash       *string
		Source_code_size       *int64
		Version                *string
	}

	Lambda_permission struct {
		Lambda_permissionID *string `lyra:"ignore"`
		Action              string
		Event_source_token  *string
		Function_name       string
		Principal           string
		Qualifier           *string
		Source_account      *string
		Source_arn          *string
		Statement_id        *string
		Statement_id_prefix *string
	}

	Launch_configuration struct {
		Launch_configurationID           *string `lyra:"ignore"`
		Associate_public_ip_address      *bool
		Ebs_block_device                 *[]Launch_configuration__ebs_block_device
		Ebs_optimized                    *bool
		Enable_monitoring                *bool
		Ephemeral_block_device           *[]Launch_configuration__ephemeral_block_device
		Iam_instance_profile             *string
		Image_id                         string
		Instance_type                    string
		Key_name                         *string
		Name                             *string
		Name_prefix                      *string
		Placement_tenancy                *string
		Root_block_device                *[]Launch_configuration__root_block_device
		Security_groups                  *[]string
		Spot_price                       *string
		User_data                        *string
		User_data_base64                 *string
		Vpc_classic_link_id              *string
		Vpc_classic_link_security_groups *[]string
	}

	Launch_template struct {
		Launch_templateID                    *string `lyra:"ignore"`
		Arn                                  *string
		Block_device_mappings                *[]Launch_template__block_device_mappings
		Capacity_reservation_specification   *[]Launch_template__capacity_reservation_specification
		Credit_specification                 *[]Launch_template__credit_specification
		Default_version                      *int64
		Description                          *string
		Disable_api_termination              *bool
		Ebs_optimized                        *string
		Elastic_gpu_specifications           *[]Launch_template__elastic_gpu_specifications
		Iam_instance_profile                 *[]Launch_template__iam_instance_profile
		Image_id                             *string
		Instance_initiated_shutdown_behavior *string
		Instance_market_options              *[]Launch_template__instance_market_options
		Instance_type                        *string
		Kernel_id                            *string
		Key_name                             *string
		Latest_version                       *int64
		License_specification                *[]Launch_template__license_specification
		Monitoring                           *[]Launch_template__monitoring
		Name                                 *string
		Name_prefix                          *string
		Network_interfaces                   *[]Launch_template__network_interfaces
		Placement                            *[]Launch_template__placement
		Ram_disk_id                          *string
		Security_group_names                 *[]string
		Tag_specifications                   *[]Launch_template__tag_specifications
		Tags                                 *map[string]string
		User_data                            *string
		Vpc_security_group_ids               *[]string
	}

	Lb struct {
		LbID                             *string `lyra:"ignore"`
		Access_logs                      *[]Lb__access_logs
		Arn                              *string
		Arn_suffix                       *string
		Dns_name                         *string
		Enable_cross_zone_load_balancing *bool
		Enable_deletion_protection       *bool
		Enable_http2                     *bool
		Idle_timeout                     *int64
		Internal                         *bool
		Ip_address_type                  *string
		Load_balancer_type               *string
		Name                             *string
		Name_prefix                      *string
		Security_groups                  *[]string
		Subnet_mapping                   *[]Lb__subnet_mapping
		Subnets                          *[]string
		Tags                             *map[string]string
		Vpc_id                           *string
		Zone_id                          *string
	}

	Lb_cookie_stickiness_policy struct {
		Lb_cookie_stickiness_policyID *string `lyra:"ignore"`
		Cookie_expiration_period      *int64
		Lb_port                       int64
		Load_balancer                 string
		Name                          string
	}

	Lb_listener struct {
		Lb_listenerID     *string `lyra:"ignore"`
		Arn               *string
		Certificate_arn   *string
		Default_action    []Lb_listener__default_action
		Load_balancer_arn string
		Port              int64
		Protocol          *string
		Ssl_policy        *string
	}

	Lb_listener_certificate struct {
		Lb_listener_certificateID *string `lyra:"ignore"`
		Certificate_arn           string
		Listener_arn              string
	}

	Lb_listener_rule struct {
		Lb_listener_ruleID *string `lyra:"ignore"`
		Action             []Lb_listener_rule__action
		Arn                *string
		Condition          []Lb_listener_rule__condition
		Listener_arn       string
		Priority           *int64
	}

	Lb_ssl_negotiation_policy struct {
		Lb_ssl_negotiation_policyID *string `lyra:"ignore"`
		Attribute                   *[]Lb_ssl_negotiation_policy__attribute
		Lb_port                     int64
		Load_balancer               string
		Name                        string
	}

	Lb_target_group struct {
		Lb_target_groupID    *string `lyra:"ignore"`
		Arn                  *string
		Arn_suffix           *string
		Deregistration_delay *int64
		Health_check         *[]Lb_target_group__health_check
		Name                 *string
		Name_prefix          *string
		Port                 *int64
		Protocol             *string
		Proxy_protocol_v2    *bool
		Slow_start           *int64
		Stickiness           *[]Lb_target_group__stickiness
		Tags                 *map[string]string
		Target_type          *string
		Vpc_id               *string
	}

	Lb_target_group_attachment struct {
		Lb_target_group_attachmentID *string `lyra:"ignore"`
		Availability_zone            *string
		Port                         *int64
		Target_group_arn             string
		Target_id                    string
	}

	Licensemanager_association struct {
		Licensemanager_associationID *string `lyra:"ignore"`
		License_configuration_arn    string
		Resource_arn                 string
	}

	Licensemanager_license_configuration struct {
		Licensemanager_license_configurationID *string `lyra:"ignore"`
		Description                            *string
		License_count                          *int64
		License_count_hard_limit               *bool
		License_counting_type                  string
		License_rules                          *[]string
		Name                                   string
		Tags                                   *map[string]string
	}

	Lightsail_domain struct {
		Lightsail_domainID *string `lyra:"ignore"`
		Arn                *string
		Domain_name        string
	}

	Lightsail_instance struct {
		Lightsail_instanceID *string `lyra:"ignore"`
		Arn                  *string
		Availability_zone    string
		Blueprint_id         string
		Bundle_id            string
		Cpu_count            *int64
		Created_at           *string
		Ipv6_address         *string
		Is_static_ip         *bool
		Key_pair_name        *string
		Name                 string
		Private_ip_address   *string
		Public_ip_address    *string
		Ram_size             *int64
		User_data            *string
		Username             *string
	}

	Lightsail_key_pair struct {
		Lightsail_key_pairID  *string `lyra:"ignore"`
		Arn                   *string
		Encrypted_fingerprint *string
		Encrypted_private_key *string
		Fingerprint           *string
		Name                  *string
		Name_prefix           *string
		Pgp_key               *string
		Private_key           *string
		Public_key            *string
	}

	Lightsail_static_ip struct {
		Lightsail_static_ipID *string `lyra:"ignore"`
		Arn                   *string
		Ip_address            *string
		Name                  string
		Support_code          *string
	}

	Lightsail_static_ip_attachment struct {
		Lightsail_static_ip_attachmentID *string `lyra:"ignore"`
		Instance_name                    string
		Static_ip_name                   string
	}

	Load_balancer_backend_server_policy struct {
		Load_balancer_backend_server_policyID *string `lyra:"ignore"`
		Instance_port                         int64
		Load_balancer_name                    string
		Policy_names                          *[]string
	}

	Load_balancer_listener_policy struct {
		Load_balancer_listener_policyID *string `lyra:"ignore"`
		Load_balancer_name              string
		Load_balancer_port              int64
		Policy_names                    *[]string
	}

	Load_balancer_policy struct {
		Load_balancer_policyID *string `lyra:"ignore"`
		Load_balancer_name     string
		Policy_attribute       *[]Load_balancer_policy__policy_attribute
		Policy_name            string
		Policy_type_name       string
	}

	Macie_member_account_association struct {
		Macie_member_account_associationID *string `lyra:"ignore"`
		Member_account_id                  string
	}

	Macie_s3_bucket_association struct {
		Macie_s3_bucket_associationID *string `lyra:"ignore"`
		Bucket_name                   string
		Classification_type           *[]Macie_s3_bucket_association__classification_type
		Member_account_id             *string
		Prefix                        *string
	}

	Main_route_table_association struct {
		Main_route_table_associationID *string `lyra:"ignore"`
		Original_route_table_id        *string
		Route_table_id                 string
		Vpc_id                         string
	}

	Media_package_channel struct {
		Media_package_channelID *string `lyra:"ignore"`
		Arn                     *string
		Channel_id              string
		Description             *string
		Hls_ingest              *[]Media_package_channel__hls_ingest
	}

	Media_store_container struct {
		Media_store_containerID *string `lyra:"ignore"`
		Arn                     *string
		Endpoint                *string
		Name                    string
	}

	Media_store_container_policy struct {
		Media_store_container_policyID *string `lyra:"ignore"`
		Container_name                 string
		Policy                         string
	}

	Mq_broker struct {
		Mq_brokerID                   *string `lyra:"ignore"`
		Apply_immediately             *bool
		Arn                           *string
		Auto_minor_version_upgrade    *bool
		Broker_name                   string
		Configuration                 *[]Mq_broker__configuration
		Deployment_mode               *string
		Engine_type                   string
		Engine_version                string
		Host_instance_type            string
		Instances                     *[]Mq_broker__instances
		Logs                          *[]Mq_broker__logs
		Maintenance_window_start_time *[]Mq_broker__maintenance_window_start_time
		Publicly_accessible           *bool
		Security_groups               []string
		Subnet_ids                    *[]string
		Tags                          *map[string]string
		User                          []Mq_broker__user
	}

	Mq_configuration struct {
		Mq_configurationID *string `lyra:"ignore"`
		Arn                *string
		Data               string
		Description        *string
		Engine_type        string
		Engine_version     string
		Latest_revision    *int64
		Name               string
		Tags               *map[string]string
	}

	Nat_gateway struct {
		Nat_gatewayID        *string `lyra:"ignore"`
		Allocation_id        string
		Network_interface_id *string
		Private_ip           *string
		Public_ip            *string
		Subnet_id            string
		Tags                 *map[string]string
	}

	Neptune_cluster struct {
		Neptune_clusterID                    *string `lyra:"ignore"`
		Apply_immediately                    *bool
		Arn                                  *string
		Availability_zones                   *[]string
		Backup_retention_period              *int64
		Cluster_identifier                   *string
		Cluster_identifier_prefix            *string
		Cluster_members                      *[]string
		Cluster_resource_id                  *string
		Endpoint                             *string
		Engine                               *string
		Engine_version                       *string
		Final_snapshot_identifier            *string
		Hosted_zone_id                       *string
		Iam_database_authentication_enabled  *bool
		Iam_roles                            *[]string
		Kms_key_arn                          *string
		Neptune_cluster_parameter_group_name *string
		Neptune_subnet_group_name            *string
		Port                                 *int64
		Preferred_backup_window              *string
		Preferred_maintenance_window         *string
		Reader_endpoint                      *string
		Replication_source_identifier        *string
		Skip_final_snapshot                  *bool
		Snapshot_identifier                  *string
		Storage_encrypted                    *bool
		Tags                                 *map[string]string
		Vpc_security_group_ids               *[]string
	}

	Neptune_cluster_instance struct {
		Neptune_cluster_instanceID   *string `lyra:"ignore"`
		Address                      *string
		Apply_immediately            *bool
		Arn                          *string
		Auto_minor_version_upgrade   *bool
		Availability_zone            *string
		Cluster_identifier           string
		Dbi_resource_id              *string
		Endpoint                     *string
		Engine                       *string
		Engine_version               *string
		Identifier                   *string
		Identifier_prefix            *string
		Instance_class               string
		Kms_key_arn                  *string
		Neptune_parameter_group_name *string
		Neptune_subnet_group_name    *string
		Port                         *int64
		Preferred_backup_window      *string
		Preferred_maintenance_window *string
		Promotion_tier               *int64
		Publicly_accessible          *bool
		Storage_encrypted            *bool
		Tags                         *map[string]string
		Writer                       *bool
	}

	Neptune_cluster_parameter_group struct {
		Neptune_cluster_parameter_groupID *string `lyra:"ignore"`
		Arn                               *string
		Description                       *string
		Family                            string
		Name                              *string
		Name_prefix                       *string
		Parameter                         *[]Neptune_cluster_parameter_group__parameter
		Tags                              *map[string]string
	}

	Neptune_cluster_snapshot struct {
		Neptune_cluster_snapshotID     *string `lyra:"ignore"`
		Allocated_storage              *int64
		Availability_zones             *[]string
		Db_cluster_identifier          string
		Db_cluster_snapshot_arn        *string
		Db_cluster_snapshot_identifier string
		Engine                         *string
		Engine_version                 *string
		Kms_key_id                     *string
		License_model                  *string
		Port                           *int64
		Snapshot_type                  *string
		Source_db_cluster_snapshot_arn *string
		Status                         *string
		Storage_encrypted              *bool
		Vpc_id                         *string
	}

	Neptune_event_subscription struct {
		Neptune_event_subscriptionID *string `lyra:"ignore"`
		Arn                          *string
		Customer_aws_id              *string
		Enabled                      *bool
		Event_categories             *[]string
		Name                         *string
		Name_prefix                  *string
		Sns_topic_arn                string
		Source_ids                   *[]string
		Source_type                  *string
		Tags                         *map[string]string
	}

	Neptune_parameter_group struct {
		Neptune_parameter_groupID *string `lyra:"ignore"`
		Arn                       *string
		Description               *string
		Family                    string
		Name                      string
		Parameter                 *[]Neptune_parameter_group__parameter
		Tags                      *map[string]string
	}

	Neptune_subnet_group struct {
		Neptune_subnet_groupID *string `lyra:"ignore"`
		Arn                    *string
		Description            *string
		Name                   *string
		Name_prefix            *string
		Subnet_ids             []string
		Tags                   *map[string]string
	}

	Network_acl struct {
		Network_aclID *string `lyra:"ignore"`
		Egress        *[]Network_acl__egress
		Ingress       *[]Network_acl__ingress
		Owner_id      *string
		Subnet_id     *string
		Subnet_ids    *[]string
		Tags          *map[string]string
		Vpc_id        string
	}

	Network_acl_rule struct {
		Network_acl_ruleID *string `lyra:"ignore"`
		Cidr_block         *string
		Egress             *bool
		From_port          *int64
		Icmp_code          *string
		Icmp_type          *string
		Ipv6_cidr_block    *string
		Network_acl_id     string
		Protocol           string
		Rule_action        string
		Rule_number        int64
		To_port            *int64
	}

	Network_interface struct {
		Network_interfaceID *string `lyra:"ignore"`
		Attachment          *[]Network_interface__attachment
		Description         *string
		Private_dns_name    *string
		Private_ip          *string
		Private_ips         *[]string
		Private_ips_count   *int64
		Security_groups     *[]string
		Source_dest_check   *bool
		Subnet_id           string
		Tags                *map[string]string
	}

	Network_interface_attachment struct {
		Network_interface_attachmentID *string `lyra:"ignore"`
		Attachment_id                  *string
		Device_index                   int64
		Instance_id                    string
		Network_interface_id           string
		Status                         *string
	}

	Network_interface_sg_attachment struct {
		Network_interface_sg_attachmentID *string `lyra:"ignore"`
		Network_interface_id              string
		Security_group_id                 string
	}

	Opsworks_application struct {
		Opsworks_applicationID    *string `lyra:"ignore"`
		App_source                *[]Opsworks_application__app_source
		Auto_bundle_on_deploy     *string
		Aws_flow_ruby_settings    *string
		Data_source_arn           *string
		Data_source_database_name *string
		Data_source_type          *string
		Description               *string
		Document_root             *string
		Domains                   *[]string
		Enable_ssl                *bool
		Environment               *[]Opsworks_application__environment
		Name                      string
		Rails_env                 *string
		Short_name                *string
		Ssl_configuration         *[]Opsworks_application__ssl_configuration
		Stack_id                  string
		Type                      string
	}

	Opsworks_custom_layer struct {
		Opsworks_custom_layerID     *string `lyra:"ignore"`
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_custom_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Name                        string
		Short_name                  string
		Stack_id                    string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_ganglia_layer struct {
		Opsworks_ganglia_layerID    *string `lyra:"ignore"`
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_ganglia_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Name                        *string
		Password                    string
		Stack_id                    string
		System_packages             *[]string
		Url                         *string
		Use_ebs_optimized_instances *bool
		Username                    *string
	}

	Opsworks_haproxy_layer struct {
		Opsworks_haproxy_layerID    *string `lyra:"ignore"`
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_haproxy_layer__ebs_volume
		Elastic_load_balancer       *string
		Healthcheck_method          *string
		Healthcheck_url             *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Name                        *string
		Stack_id                    string
		Stats_enabled               *bool
		Stats_password              string
		Stats_url                   *string
		Stats_user                  *string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_instance struct {
		Opsworks_instanceID          *string `lyra:"ignore"`
		Agent_version                *string
		Ami_id                       *string
		Architecture                 *string
		Auto_scaling_type            *string
		Availability_zone            *string
		Created_at                   *string
		Delete_ebs                   *bool
		Delete_eip                   *bool
		Ebs_block_device             *[]Opsworks_instance__ebs_block_device
		Ebs_optimized                *bool
		Ec2_instance_id              *string
		Ecs_cluster_arn              *string
		Elastic_ip                   *string
		Ephemeral_block_device       *[]Opsworks_instance__ephemeral_block_device
		Hostname                     *string
		Infrastructure_class         *string
		Install_updates_on_boot      *bool
		Instance_profile_arn         *string
		Instance_type                *string
		Last_service_error_id        *string
		Layer_ids                    []string
		Os                           *string
		Platform                     *string
		Private_dns                  *string
		Private_ip                   *string
		Public_dns                   *string
		Public_ip                    *string
		Registered_by                *string
		Reported_agent_version       *string
		Reported_os_family           *string
		Reported_os_name             *string
		Reported_os_version          *string
		Root_block_device            *[]Opsworks_instance__root_block_device
		Root_device_type             *string
		Root_device_volume_id        *string
		Security_group_ids           *[]string
		Ssh_host_dsa_key_fingerprint *string
		Ssh_host_rsa_key_fingerprint *string
		Ssh_key_name                 *string
		Stack_id                     string
		State                        *string
		Status                       *string
		Subnet_id                    *string
		Tenancy                      *string
		Virtualization_type          *string
	}

	Opsworks_java_app_layer struct {
		Opsworks_java_app_layerID   *string `lyra:"ignore"`
		App_server                  *string
		App_server_version          *string
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_java_app_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Jvm_options                 *string
		Jvm_type                    *string
		Jvm_version                 *string
		Name                        *string
		Stack_id                    string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_memcached_layer struct {
		Opsworks_memcached_layerID  *string `lyra:"ignore"`
		Allocated_memory            *int64
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_memcached_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Name                        *string
		Stack_id                    string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_mysql_layer struct {
		Opsworks_mysql_layerID         *string `lyra:"ignore"`
		Auto_assign_elastic_ips        *bool
		Auto_assign_public_ips         *bool
		Auto_healing                   *bool
		Custom_configure_recipes       *[]string
		Custom_deploy_recipes          *[]string
		Custom_instance_profile_arn    *string
		Custom_json                    *string
		Custom_security_group_ids      *[]string
		Custom_setup_recipes           *[]string
		Custom_shutdown_recipes        *[]string
		Custom_undeploy_recipes        *[]string
		Drain_elb_on_shutdown          *bool
		Ebs_volume                     *[]Opsworks_mysql_layer__ebs_volume
		Elastic_load_balancer          *string
		Install_updates_on_boot        *bool
		Instance_shutdown_timeout      *int64
		Name                           *string
		Root_password                  *string
		Root_password_on_all_instances *bool
		Stack_id                       string
		System_packages                *[]string
		Use_ebs_optimized_instances    *bool
	}

	Opsworks_nodejs_app_layer struct {
		Opsworks_nodejs_app_layerID *string `lyra:"ignore"`
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_nodejs_app_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Name                        *string
		Nodejs_version              *string
		Stack_id                    string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_permission struct {
		Opsworks_permissionID *string `lyra:"ignore"`
		Allow_ssh             *bool
		Allow_sudo            *bool
		Level                 *string
		Stack_id              *string
		User_arn              string
	}

	Opsworks_php_app_layer struct {
		Opsworks_php_app_layerID    *string `lyra:"ignore"`
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_php_app_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Name                        *string
		Stack_id                    string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_rails_app_layer struct {
		Opsworks_rails_app_layerID  *string `lyra:"ignore"`
		App_server                  *string
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Bundler_version             *string
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_rails_app_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Manage_bundler              *bool
		Name                        *string
		Passenger_version           *string
		Ruby_version                *string
		Rubygems_version            *string
		Stack_id                    string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_rds_db_instance struct {
		Opsworks_rds_db_instanceID *string `lyra:"ignore"`
		Db_password                string
		Db_user                    string
		Rds_db_instance_arn        string
		Stack_id                   string
	}

	Opsworks_stack struct {
		Opsworks_stackID              *string `lyra:"ignore"`
		Agent_version                 *string
		Arn                           *string
		Berkshelf_version             *string
		Color                         *string
		Configuration_manager_name    *string
		Configuration_manager_version *string
		Custom_cookbooks_source       *[]Opsworks_stack__custom_cookbooks_source
		Custom_json                   *string
		Default_availability_zone     *string
		Default_instance_profile_arn  string
		Default_os                    *string
		Default_root_device_type      *string
		Default_ssh_key_name          *string
		Default_subnet_id             *string
		Hostname_theme                *string
		Manage_berkshelf              *bool
		Name                          string
		Region                        string
		Service_role_arn              string
		Stack_endpoint                *string
		Tags                          *map[string]string
		Use_custom_cookbooks          *bool
		Use_opsworks_security_groups  *bool
		Vpc_id                        *string
	}

	Opsworks_static_web_layer struct {
		Opsworks_static_web_layerID *string `lyra:"ignore"`
		Auto_assign_elastic_ips     *bool
		Auto_assign_public_ips      *bool
		Auto_healing                *bool
		Custom_configure_recipes    *[]string
		Custom_deploy_recipes       *[]string
		Custom_instance_profile_arn *string
		Custom_json                 *string
		Custom_security_group_ids   *[]string
		Custom_setup_recipes        *[]string
		Custom_shutdown_recipes     *[]string
		Custom_undeploy_recipes     *[]string
		Drain_elb_on_shutdown       *bool
		Ebs_volume                  *[]Opsworks_static_web_layer__ebs_volume
		Elastic_load_balancer       *string
		Install_updates_on_boot     *bool
		Instance_shutdown_timeout   *int64
		Name                        *string
		Stack_id                    string
		System_packages             *[]string
		Use_ebs_optimized_instances *bool
	}

	Opsworks_user_profile struct {
		Opsworks_user_profileID *string `lyra:"ignore"`
		Allow_self_management   *bool
		Ssh_public_key          *string
		Ssh_username            string
		User_arn                string
	}

	Organizations_account struct {
		Organizations_accountID    *string `lyra:"ignore"`
		Arn                        *string
		Email                      string
		Iam_user_access_to_billing *string
		Joined_method              *string
		Joined_timestamp           *string
		Name                       string
		Role_name                  *string
		Status                     *string
	}

	Organizations_organization struct {
		Organizations_organizationID  *string `lyra:"ignore"`
		Arn                           *string
		Aws_service_access_principals *[]string
		Feature_set                   *string
		Master_account_arn            *string
		Master_account_email          *string
		Master_account_id             *string
	}

	Organizations_policy struct {
		Organizations_policyID *string `lyra:"ignore"`
		Arn                    *string
		Content                string
		Description            *string
		Name                   string
		Type                   *string
	}

	Organizations_policy_attachment struct {
		Organizations_policy_attachmentID *string `lyra:"ignore"`
		Policy_id                         string
		Target_id                         string
	}

	Pinpoint_adm_channel struct {
		Pinpoint_adm_channelID *string `lyra:"ignore"`
		Application_id         string
		Client_id              string
		Client_secret          string
		Enabled                *bool
	}

	Pinpoint_apns_channel struct {
		Pinpoint_apns_channelID       *string `lyra:"ignore"`
		Application_id                string
		Bundle_id                     *string
		Certificate                   *string
		Default_authentication_method *string
		Enabled                       *bool
		Private_key                   *string
		Team_id                       *string
		Token_key                     *string
		Token_key_id                  *string
	}

	Pinpoint_apns_sandbox_channel struct {
		Pinpoint_apns_sandbox_channelID *string `lyra:"ignore"`
		Application_id                  string
		Bundle_id                       *string
		Certificate                     *string
		Default_authentication_method   *string
		Enabled                         *bool
		Private_key                     *string
		Team_id                         *string
		Token_key                       *string
		Token_key_id                    *string
	}

	Pinpoint_apns_voip_channel struct {
		Pinpoint_apns_voip_channelID  *string `lyra:"ignore"`
		Application_id                string
		Bundle_id                     *string
		Certificate                   *string
		Default_authentication_method *string
		Enabled                       *bool
		Private_key                   *string
		Team_id                       *string
		Token_key                     *string
		Token_key_id                  *string
	}

	Pinpoint_apns_voip_sandbox_channel struct {
		Pinpoint_apns_voip_sandbox_channelID *string `lyra:"ignore"`
		Application_id                       string
		Bundle_id                            *string
		Certificate                          *string
		Default_authentication_method        *string
		Enabled                              *bool
		Private_key                          *string
		Team_id                              *string
		Token_key                            *string
		Token_key_id                         *string
	}

	Pinpoint_app struct {
		Pinpoint_appID *string `lyra:"ignore"`
		Application_id *string
		Campaign_hook  *[]Pinpoint_app__campaign_hook
		Limits         *[]Pinpoint_app__limits
		Name           *string
		Name_prefix    *string
		Quiet_time     *[]Pinpoint_app__quiet_time
	}

	Pinpoint_baidu_channel struct {
		Pinpoint_baidu_channelID *string `lyra:"ignore"`
		Api_key                  string
		Application_id           string
		Enabled                  *bool
		Secret_key               string
	}

	Pinpoint_email_channel struct {
		Pinpoint_email_channelID *string `lyra:"ignore"`
		Application_id           string
		Enabled                  *bool
		From_address             string
		Identity                 string
		Messages_per_second      *int64
		Role_arn                 string
	}

	Pinpoint_event_stream struct {
		Pinpoint_event_streamID *string `lyra:"ignore"`
		Application_id          string
		Destination_stream_arn  string
		Role_arn                string
	}

	Pinpoint_gcm_channel struct {
		Pinpoint_gcm_channelID *string `lyra:"ignore"`
		Api_key                string
		Application_id         string
		Enabled                *bool
	}

	Pinpoint_sms_channel struct {
		Pinpoint_sms_channelID            *string `lyra:"ignore"`
		Application_id                    string
		Enabled                           *bool
		Promotional_messages_per_second   *int64
		Sender_id                         *string
		Short_code                        *string
		Transactional_messages_per_second *int64
	}

	Placement_group struct {
		Placement_groupID *string `lyra:"ignore"`
		Name              string
		Strategy          string
	}

	Proxy_protocol_policy struct {
		Proxy_protocol_policyID *string `lyra:"ignore"`
		Instance_ports          []string
		Load_balancer           string
	}

	Ram_resource_share struct {
		Ram_resource_shareID      *string `lyra:"ignore"`
		Allow_external_principals *bool
		Name                      string
		Tags                      *map[string]string
	}

	Rds_cluster struct {
		Rds_clusterID                       *string `lyra:"ignore"`
		Apply_immediately                   *bool
		Arn                                 *string
		Availability_zones                  *[]string
		Backtrack_window                    *int64
		Backup_retention_period             *int64
		Cluster_identifier                  *string
		Cluster_identifier_prefix           *string
		Cluster_members                     *[]string
		Cluster_resource_id                 *string
		Database_name                       *string
		Db_cluster_parameter_group_name     *string
		Db_subnet_group_name                *string
		Deletion_protection                 *bool
		Enabled_cloudwatch_logs_exports     *[]string
		Endpoint                            *string
		Engine                              *string
		Engine_mode                         *string
		Engine_version                      *string
		Final_snapshot_identifier           *string
		Global_cluster_identifier           *string
		Hosted_zone_id                      *string
		Iam_database_authentication_enabled *bool
		Iam_roles                           *[]string
		Kms_key_id                          *string
		Master_password                     *string
		Master_username                     *string
		Port                                *int64
		Preferred_backup_window             *string
		Preferred_maintenance_window        *string
		Reader_endpoint                     *string
		Replication_source_identifier       *string
		S3_import                           *[]Rds_cluster__s3_import
		Scaling_configuration               *[]Rds_cluster__scaling_configuration
		Skip_final_snapshot                 *bool
		Snapshot_identifier                 *string
		Source_region                       *string
		Storage_encrypted                   *bool
		Tags                                *map[string]string
		Vpc_security_group_ids              *[]string
	}

	Rds_cluster_endpoint struct {
		Rds_cluster_endpointID      *string `lyra:"ignore"`
		Arn                         *string
		Cluster_endpoint_identifier string
		Cluster_identifier          string
		Custom_endpoint_type        string
		Endpoint                    *string
		Excluded_members            *[]string
		Static_members              *[]string
	}

	Rds_cluster_instance struct {
		Rds_cluster_instanceID          *string `lyra:"ignore"`
		Apply_immediately               *bool
		Arn                             *string
		Auto_minor_version_upgrade      *bool
		Availability_zone               *string
		Cluster_identifier              string
		Copy_tags_to_snapshot           *bool
		Db_parameter_group_name         *string
		Db_subnet_group_name            *string
		Dbi_resource_id                 *string
		Endpoint                        *string
		Engine                          *string
		Engine_version                  *string
		Identifier                      *string
		Identifier_prefix               *string
		Instance_class                  string
		Kms_key_id                      *string
		Monitoring_interval             *int64
		Monitoring_role_arn             *string
		Performance_insights_enabled    *bool
		Performance_insights_kms_key_id *string
		Port                            *int64
		Preferred_backup_window         *string
		Preferred_maintenance_window    *string
		Promotion_tier                  *int64
		Publicly_accessible             *bool
		Storage_encrypted               *bool
		Tags                            *map[string]string
		Writer                          *bool
	}

	Rds_cluster_parameter_group struct {
		Rds_cluster_parameter_groupID *string `lyra:"ignore"`
		Arn                           *string
		Description                   *string
		Family                        string
		Name                          *string
		Name_prefix                   *string
		Parameter                     *[]Rds_cluster_parameter_group__parameter
		Tags                          *map[string]string
	}

	Rds_global_cluster struct {
		Rds_global_clusterID       *string `lyra:"ignore"`
		Arn                        *string
		Database_name              *string
		Deletion_protection        *bool
		Engine                     *string
		Engine_version             *string
		Global_cluster_identifier  string
		Global_cluster_resource_id *string
		Storage_encrypted          *bool
	}

	Redshift_cluster struct {
		Redshift_clusterID                  *string `lyra:"ignore"`
		Allow_version_upgrade               *bool
		Automated_snapshot_retention_period *int64
		Availability_zone                   *string
		Bucket_name                         *string
		Cluster_identifier                  string
		Cluster_parameter_group_name        *string
		Cluster_public_key                  *string
		Cluster_revision_number             *string
		Cluster_security_groups             *[]string
		Cluster_subnet_group_name           *string
		Cluster_type                        *string
		Cluster_version                     *string
		Database_name                       *string
		Dns_name                            *string
		Elastic_ip                          *string
		Enable_logging                      *bool
		Encrypted                           *bool
		Endpoint                            *string
		Enhanced_vpc_routing                *bool
		Final_snapshot_identifier           *string
		Iam_roles                           *[]string
		Kms_key_id                          *string
		Logging                             *[]Redshift_cluster__logging
		Master_password                     *string
		Master_username                     *string
		Node_type                           string
		Number_of_nodes                     *int64
		Owner_account                       *string
		Port                                *int64
		Preferred_maintenance_window        *string
		Publicly_accessible                 *bool
		S3_key_prefix                       *string
		Skip_final_snapshot                 *bool
		Snapshot_cluster_identifier         *string
		Snapshot_copy                       *[]Redshift_cluster__snapshot_copy
		Snapshot_identifier                 *string
		Tags                                *map[string]string
		Vpc_security_group_ids              *[]string
	}

	Redshift_event_subscription struct {
		Redshift_event_subscriptionID *string `lyra:"ignore"`
		Customer_aws_id               *string
		Enabled                       *bool
		Event_categories              *[]string
		Name                          string
		Severity                      *string
		Sns_topic_arn                 string
		Source_ids                    *[]string
		Source_type                   *string
		Status                        *string
		Tags                          *map[string]string
	}

	Redshift_parameter_group struct {
		Redshift_parameter_groupID *string `lyra:"ignore"`
		Description                *string
		Family                     string
		Name                       string
		Parameter                  *[]Redshift_parameter_group__parameter
	}

	Redshift_security_group struct {
		Redshift_security_groupID *string `lyra:"ignore"`
		Description               *string
		Ingress                   []Redshift_security_group__ingress
		Name                      string
	}

	Redshift_snapshot_copy_grant struct {
		Redshift_snapshot_copy_grantID *string `lyra:"ignore"`
		Kms_key_id                     *string
		Snapshot_copy_grant_name       string
		Tags                           *map[string]string
	}

	Redshift_subnet_group struct {
		Redshift_subnet_groupID *string `lyra:"ignore"`
		Description             *string
		Name                    string
		Subnet_ids              []string
		Tags                    *map[string]string
	}

	Resourcegroups_group struct {
		Resourcegroups_groupID *string `lyra:"ignore"`
		Arn                    *string
		Description            *string
		Name                   string
		Resource_query         []Resourcegroups_group__resource_query
	}

	Route struct {
		RouteID                     *string `lyra:"ignore"`
		Destination_cidr_block      *string
		Destination_ipv6_cidr_block *string
		Destination_prefix_list_id  *string
		Egress_only_gateway_id      *string
		Gateway_id                  *string
		Instance_id                 *string
		Instance_owner_id           *string
		Nat_gateway_id              *string
		Network_interface_id        *string
		Origin                      *string
		Route_table_id              string
		State                       *string
		Transit_gateway_id          *string
		Vpc_peering_connection_id   *string
	}

	Route53_delegation_set struct {
		Route53_delegation_setID *string `lyra:"ignore"`
		Name_servers             *[]string
		Reference_name           *string
	}

	Route53_health_check struct {
		Route53_health_checkID          *string `lyra:"ignore"`
		Child_health_threshold          *int64
		Child_healthchecks              *[]string
		Cloudwatch_alarm_name           *string
		Cloudwatch_alarm_region         *string
		Enable_sni                      *bool
		Failure_threshold               *int64
		Fqdn                            *string
		Insufficient_data_health_status *string
		Invert_healthcheck              *bool
		Ip_address                      *string
		Measure_latency                 *bool
		Port                            *int64
		Reference_name                  *string
		Regions                         *[]string
		Request_interval                *int64
		Resource_path                   *string
		Search_string                   *string
		Tags                            *map[string]string
		Type                            string
	}

	Route53_query_log struct {
		Route53_query_logID      *string `lyra:"ignore"`
		Cloudwatch_log_group_arn string
		Zone_id                  string
	}

	Route53_record struct {
		Route53_recordID                 *string `lyra:"ignore"`
		Alias                            *[]Route53_record__alias
		Allow_overwrite                  *bool
		Failover                         *string
		Failover_routing_policy          *[]Route53_record__failover_routing_policy
		Fqdn                             *string
		Geolocation_routing_policy       *[]Route53_record__geolocation_routing_policy
		Health_check_id                  *string
		Latency_routing_policy           *[]Route53_record__latency_routing_policy
		Multivalue_answer_routing_policy *bool
		Name                             string
		Records                          *[]string
		Set_identifier                   *string
		Ttl                              *int64
		Type                             string
		Weight                           *int64
		Weighted_routing_policy          *[]Route53_record__weighted_routing_policy
		Zone_id                          string
	}

	Route53_zone struct {
		Route53_zoneID    *string `lyra:"ignore"`
		Comment           *string
		Delegation_set_id *string
		Force_destroy     *bool
		Name              string
		Name_servers      *[]string
		Tags              *map[string]string
		Vpc               *[]Route53_zone__vpc
		Vpc_id            *string
		Vpc_region        *string
		Zone_id           *string
	}

	Route53_zone_association struct {
		Route53_zone_associationID *string `lyra:"ignore"`
		Vpc_id                     string
		Vpc_region                 *string
		Zone_id                    string
	}

	Route_table struct {
		Route_tableID    *string `lyra:"ignore"`
		Owner_id         *string
		Propagating_vgws *[]string
		Route            *[]Route_table__route
		Tags             *map[string]string
		Vpc_id           string
	}

	Route_table_association struct {
		Route_table_associationID *string `lyra:"ignore"`
		Route_table_id            string
		Subnet_id                 string
	}

	S3_account_public_access_block struct {
		S3_account_public_access_blockID *string `lyra:"ignore"`
		Account_id                       *string
		Block_public_acls                *bool
		Block_public_policy              *bool
		Ignore_public_acls               *bool
		Restrict_public_buckets          *bool
	}

	S3_bucket struct {
		S3_bucketID                          *string `lyra:"ignore"`
		Acceleration_status                  *string
		Acl                                  *string
		Arn                                  *string
		Bucket                               *string
		Bucket_domain_name                   *string
		Bucket_prefix                        *string
		Bucket_regional_domain_name          *string
		Cors_rule                            *[]S3_bucket__cors_rule
		Force_destroy                        *bool
		Hosted_zone_id                       *string
		Lifecycle_rule                       *[]S3_bucket__lifecycle_rule
		Logging                              *[]S3_bucket__logging
		Object_lock_configuration            *[]S3_bucket__object_lock_configuration
		Policy                               *string
		Region                               *string
		Replication_configuration            *[]S3_bucket__replication_configuration
		Request_payer                        *string
		Server_side_encryption_configuration *[]S3_bucket__server_side_encryption_configuration
		Tags                                 *map[string]string
		Versioning                           *[]S3_bucket__versioning
		Website                              *[]S3_bucket__website
		Website_domain                       *string
		Website_endpoint                     *string
	}

	S3_bucket_inventory struct {
		S3_bucket_inventoryID    *string `lyra:"ignore"`
		Bucket                   string
		Destination              []S3_bucket_inventory__destination
		Enabled                  *bool
		Filter                   *[]S3_bucket_inventory__filter
		Included_object_versions string
		Name                     string
		Optional_fields          *[]string
		Schedule                 []S3_bucket_inventory__schedule
	}

	S3_bucket_metric struct {
		S3_bucket_metricID *string `lyra:"ignore"`
		Bucket             string
		Filter             *[]S3_bucket_metric__filter
		Name               string
	}

	S3_bucket_notification struct {
		S3_bucket_notificationID *string `lyra:"ignore"`
		Bucket                   string
		Lambda_function          *[]S3_bucket_notification__lambda_function
		Queue                    *[]S3_bucket_notification__queue
		Topic                    *[]S3_bucket_notification__topic
	}

	S3_bucket_object struct {
		S3_bucket_objectID     *string `lyra:"ignore"`
		Acl                    *string
		Bucket                 string
		Cache_control          *string
		Content                *string
		Content_base64         *string
		Content_disposition    *string
		Content_encoding       *string
		Content_language       *string
		Content_type           *string
		Etag                   *string
		Key                    string
		Kms_key_id             *string
		Server_side_encryption *string
		Source                 *string
		Storage_class          *string
		Tags                   *map[string]string
		Version_id             *string
		Website_redirect       *string
	}

	S3_bucket_policy struct {
		S3_bucket_policyID *string `lyra:"ignore"`
		Bucket             string
		Policy             string
	}

	S3_bucket_public_access_block struct {
		S3_bucket_public_access_blockID *string `lyra:"ignore"`
		Block_public_acls               *bool
		Block_public_policy             *bool
		Bucket                          string
		Ignore_public_acls              *bool
		Restrict_public_buckets         *bool
	}

	Sagemaker_notebook_instance struct {
		Sagemaker_notebook_instanceID *string `lyra:"ignore"`
		Arn                           *string
		Instance_type                 string
		Kms_key_id                    *string
		Name                          string
		Role_arn                      string
		Security_groups               *[]string
		Subnet_id                     *string
		Tags                          *map[string]string
	}

	Secretsmanager_secret struct {
		Secretsmanager_secretID *string `lyra:"ignore"`
		Arn                     *string
		Description             *string
		Kms_key_id              *string
		Name                    *string
		Name_prefix             *string
		Policy                  *string
		Recovery_window_in_days *int64
		Rotation_enabled        *bool
		Rotation_lambda_arn     *string
		Rotation_rules          *[]Secretsmanager_secret__rotation_rules
		Tags                    *map[string]string
	}

	Secretsmanager_secret_version struct {
		Secretsmanager_secret_versionID *string `lyra:"ignore"`
		Arn                             *string
		Secret_binary                   *string
		Secret_id                       string
		Secret_string                   *string
		Version_id                      *string
		Version_stages                  *[]string
	}

	Security_group struct {
		Security_groupID       *string `lyra:"ignore"`
		Arn                    *string
		Description            *string
		Egress                 *[]Security_group__egress
		Ingress                *[]Security_group__ingress
		Name                   *string
		Name_prefix            *string
		Owner_id               *string
		Revoke_rules_on_delete *bool
		Tags                   *map[string]string
		Vpc_id                 *string
	}

	Security_group_rule struct {
		Security_group_ruleID    *string `lyra:"ignore"`
		Cidr_blocks              *[]string
		Description              *string
		From_port                int64
		Ipv6_cidr_blocks         *[]string
		Prefix_list_ids          *[]string
		Protocol                 string
		Security_group_id        string
		Self                     *bool
		Source_security_group_id *string
		To_port                  int64
		Type                     string
	}

	Securityhub_account struct {
		Securityhub_accountID *string `lyra:"ignore"`
	}

	Securityhub_product_subscription struct {
		Securityhub_product_subscriptionID *string `lyra:"ignore"`
		Arn                                *string
		Product_arn                        string
	}

	Securityhub_standards_subscription struct {
		Securityhub_standards_subscriptionID *string `lyra:"ignore"`
		Standards_arn                        string
	}

	Service_discovery_http_namespace struct {
		Service_discovery_http_namespaceID *string `lyra:"ignore"`
		Arn                                *string
		Description                        *string
		Name                               string
	}

	Service_discovery_private_dns_namespace struct {
		Service_discovery_private_dns_namespaceID *string `lyra:"ignore"`
		Arn                                       *string
		Description                               *string
		Hosted_zone                               *string
		Name                                      string
		Vpc                                       string
	}

	Service_discovery_public_dns_namespace struct {
		Service_discovery_public_dns_namespaceID *string `lyra:"ignore"`
		Arn                                      *string
		Description                              *string
		Hosted_zone                              *string
		Name                                     string
	}

	Service_discovery_service struct {
		Service_discovery_serviceID *string `lyra:"ignore"`
		Arn                         *string
		Description                 *string
		Dns_config                  []Service_discovery_service__dns_config
		Health_check_config         *[]Service_discovery_service__health_check_config
		Health_check_custom_config  *[]Service_discovery_service__health_check_custom_config
		Name                        string
	}

	Servicecatalog_portfolio struct {
		Servicecatalog_portfolioID *string `lyra:"ignore"`
		Arn                        *string
		Created_time               *string
		Description                *string
		Name                       string
		Provider_name              *string
		Tags                       *map[string]string
	}

	Ses_active_receipt_rule_set struct {
		Ses_active_receipt_rule_setID *string `lyra:"ignore"`
		Rule_set_name                 string
	}

	Ses_configuration_set struct {
		Ses_configuration_setID *string `lyra:"ignore"`
		Name                    string
	}

	Ses_domain_dkim struct {
		Ses_domain_dkimID *string `lyra:"ignore"`
		Dkim_tokens       *[]string
		Domain            string
	}

	Ses_domain_identity struct {
		Ses_domain_identityID *string `lyra:"ignore"`
		Arn                   *string
		Domain                string
		Verification_token    *string
	}

	Ses_domain_identity_verification struct {
		Ses_domain_identity_verificationID *string `lyra:"ignore"`
		Arn                                *string
		Domain                             string
	}

	Ses_domain_mail_from struct {
		Ses_domain_mail_fromID *string `lyra:"ignore"`
		Behavior_on_mx_failure *string
		Domain                 string
		Mail_from_domain       string
	}

	Ses_event_destination struct {
		Ses_event_destinationID *string `lyra:"ignore"`
		Cloudwatch_destination  *[]Ses_event_destination__cloudwatch_destination
		Configuration_set_name  string
		Enabled                 *bool
		Kinesis_destination     *[]Ses_event_destination__kinesis_destination
		Matching_types          []string
		Name                    string
		Sns_destination         *[]Ses_event_destination__sns_destination
	}

	Ses_identity_notification_topic struct {
		Ses_identity_notification_topicID *string `lyra:"ignore"`
		Identity                          string
		Notification_type                 string
		Topic_arn                         *string
	}

	Ses_receipt_filter struct {
		Ses_receipt_filterID *string `lyra:"ignore"`
		Cidr                 string
		Name                 string
		Policy               string
	}

	Ses_receipt_rule struct {
		Ses_receipt_ruleID *string `lyra:"ignore"`
		Add_header_action  *[]Ses_receipt_rule__add_header_action
		After              *string
		Bounce_action      *[]Ses_receipt_rule__bounce_action
		Enabled            *bool
		Lambda_action      *[]Ses_receipt_rule__lambda_action
		Name               string
		Recipients         *[]string
		Rule_set_name      string
		S3_action          *[]Ses_receipt_rule__s3_action
		Scan_enabled       *bool
		Sns_action         *[]Ses_receipt_rule__sns_action
		Stop_action        *[]Ses_receipt_rule__stop_action
		Tls_policy         *string
		Workmail_action    *[]Ses_receipt_rule__workmail_action
	}

	Ses_receipt_rule_set struct {
		Ses_receipt_rule_setID *string `lyra:"ignore"`
		Rule_set_name          string
	}

	Ses_template struct {
		Ses_templateID *string `lyra:"ignore"`
		Html           *string
		Name           string
		Subject        *string
		Text           *string
	}

	Sfn_activity struct {
		Sfn_activityID *string `lyra:"ignore"`
		Creation_date  *string
		Name           string
		Tags           *map[string]string
	}

	Sfn_state_machine struct {
		Sfn_state_machineID *string `lyra:"ignore"`
		Creation_date       *string
		Definition          string
		Name                string
		Role_arn            string
		Status              *string
		Tags                *map[string]string
	}

	Simpledb_domain struct {
		Simpledb_domainID *string `lyra:"ignore"`
		Name              string
	}

	Snapshot_create_volume_permission struct {
		Snapshot_create_volume_permissionID *string `lyra:"ignore"`
		Account_id                          string
		Snapshot_id                         string
	}

	Sns_platform_application struct {
		Sns_platform_applicationID       *string `lyra:"ignore"`
		Arn                              *string
		Event_delivery_failure_topic_arn *string
		Event_endpoint_created_topic_arn *string
		Event_endpoint_deleted_topic_arn *string
		Event_endpoint_updated_topic_arn *string
		Failure_feedback_role_arn        *string
		Name                             string
		Platform                         string
		Platform_credential              string
		Platform_principal               *string
		Success_feedback_role_arn        *string
		Success_feedback_sample_rate     *string
	}

	Sns_sms_preferences struct {
		Sns_sms_preferencesID                 *string `lyra:"ignore"`
		Default_sender_id                     *string
		Default_sms_type                      *string
		Delivery_status_iam_role_arn          *string
		Delivery_status_success_sampling_rate *string
		Monthly_spend_limit                   *string
		Usage_report_s3_bucket                *string
	}

	Sns_topic struct {
		Sns_topicID                              *string `lyra:"ignore"`
		Application_failure_feedback_role_arn    *string
		Application_success_feedback_role_arn    *string
		Application_success_feedback_sample_rate *int64
		Arn                                      *string
		Delivery_policy                          *string
		Display_name                             *string
		Http_failure_feedback_role_arn           *string
		Http_success_feedback_role_arn           *string
		Http_success_feedback_sample_rate        *int64
		Kms_master_key_id                        *string
		Lambda_failure_feedback_role_arn         *string
		Lambda_success_feedback_role_arn         *string
		Lambda_success_feedback_sample_rate      *int64
		Name                                     *string
		Name_prefix                              *string
		Policy                                   *string
		Sqs_failure_feedback_role_arn            *string
		Sqs_success_feedback_role_arn            *string
		Sqs_success_feedback_sample_rate         *int64
	}

	Sns_topic_policy struct {
		Sns_topic_policyID *string `lyra:"ignore"`
		Arn                string
		Policy             string
	}

	Sns_topic_subscription struct {
		Sns_topic_subscriptionID        *string `lyra:"ignore"`
		Arn                             *string
		Confirmation_timeout_in_minutes *int64
		Delivery_policy                 *string
		Endpoint                        string
		Endpoint_auto_confirms          *bool
		Filter_policy                   *string
		Protocol                        string
		Raw_message_delivery            *bool
		Topic_arn                       string
	}

	Spot_datafeed_subscription struct {
		Spot_datafeed_subscriptionID *string `lyra:"ignore"`
		Bucket                       string
		Prefix                       *string
	}

	Spot_fleet_request struct {
		Spot_fleet_requestID                *string `lyra:"ignore"`
		Allocation_strategy                 *string
		Client_token                        *string
		Excess_capacity_termination_policy  *string
		Fleet_type                          *string
		Iam_fleet_role                      string
		Instance_interruption_behaviour     *string
		Instance_pools_to_use_count         *int64
		Launch_specification                []Spot_fleet_request__launch_specification
		Load_balancers                      *[]string
		Replace_unhealthy_instances         *bool
		Spot_price                          *string
		Spot_request_state                  *string
		Target_capacity                     int64
		Target_group_arns                   *[]string
		Terminate_instances_with_expiration *bool
		Valid_from                          *time.Time
		Valid_until                         *time.Time
		Wait_for_fulfillment                *bool
	}

	Spot_instance_request struct {
		Spot_instance_requestID              *string `lyra:"ignore"`
		Ami                                  string
		Arn                                  *string
		Associate_public_ip_address          *bool
		Availability_zone                    *string
		Block_device                         *map[string]string
		Block_duration_minutes               *int64
		Cpu_core_count                       *int64
		Cpu_threads_per_core                 *int64
		Credit_specification                 *[]Spot_instance_request__credit_specification
		Disable_api_termination              *bool
		Ebs_block_device                     *[]Spot_instance_request__ebs_block_device
		Ebs_optimized                        *bool
		Ephemeral_block_device               *[]Spot_instance_request__ephemeral_block_device
		Get_password_data                    *bool
		Host_id                              *string
		Iam_instance_profile                 *string
		Instance_initiated_shutdown_behavior *string
		Instance_interruption_behaviour      *string
		Instance_state                       *string
		Instance_type                        string
		Ipv6_address_count                   *int64
		Ipv6_addresses                       *[]string
		Key_name                             *string
		Launch_group                         *string
		Monitoring                           *bool
		Network_interface                    *[]Spot_instance_request__network_interface
		Network_interface_id                 *string
		Password_data                        *string
		Placement_group                      *string
		Primary_network_interface_id         *string
		Private_dns                          *string
		Private_ip                           *string
		Public_dns                           *string
		Public_ip                            *string
		Root_block_device                    *[]Spot_instance_request__root_block_device
		Security_groups                      *[]string
		Source_dest_check                    *bool
		Spot_bid_status                      *string
		Spot_instance_id                     *string
		Spot_price                           *string
		Spot_request_state                   *string
		Spot_type                            *string
		Subnet_id                            *string
		Tags                                 *map[string]string
		Tenancy                              *string
		User_data                            *string
		User_data_base64                     *string
		Valid_from                           *time.Time
		Valid_until                          *time.Time
		Volume_tags                          *map[string]string
		Vpc_security_group_ids               *[]string
		Wait_for_fulfillment                 *bool
	}

	Sqs_queue struct {
		Sqs_queueID                       *string `lyra:"ignore"`
		Arn                               *string
		Content_based_deduplication       *bool
		Delay_seconds                     *int64
		Fifo_queue                        *bool
		Kms_data_key_reuse_period_seconds *int64
		Kms_master_key_id                 *string
		Max_message_size                  *int64
		Message_retention_seconds         *int64
		Name                              *string
		Name_prefix                       *string
		Policy                            *string
		Receive_wait_time_seconds         *int64
		Redrive_policy                    *string
		Tags                              *map[string]string
		Visibility_timeout_seconds        *int64
	}

	Sqs_queue_policy struct {
		Sqs_queue_policyID *string `lyra:"ignore"`
		Policy             string
		Queue_url          string
	}

	Ssm_activation struct {
		Ssm_activationID   *string `lyra:"ignore"`
		Activation_code    *string
		Description        *string
		Expiration_date    *time.Time
		Expired            *string
		Iam_role           string
		Name               *string
		Registration_count *int64
		Registration_limit *int64
	}

	Ssm_association struct {
		Ssm_associationID   *string `lyra:"ignore"`
		Association_id      *string
		Association_name    *string
		Document_version    *string
		Instance_id         *string
		Name                string
		Output_location     *[]Ssm_association__output_location
		Parameters          *map[string]string
		Schedule_expression *string
		Targets             *[]Ssm_association__targets
	}

	Ssm_document struct {
		Ssm_documentID  *string `lyra:"ignore"`
		Arn             *string
		Content         string
		Created_date    *string
		Default_version *string
		Description     *string
		Document_format *string
		Document_type   string
		Hash            *string
		Hash_type       *string
		Latest_version  *string
		Name            string
		Owner           *string
		Parameter       *[]Ssm_document__parameter
		Permissions     *map[string]Ssm_document__permissions
		Platform_types  *[]string
		Schema_version  *string
		Status          *string
		Tags            *map[string]string
	}

	Ssm_maintenance_window struct {
		Ssm_maintenance_windowID   *string `lyra:"ignore"`
		Allow_unassociated_targets *bool
		Cutoff                     int64
		Duration                   int64
		Enabled                    *bool
		End_date                   *string
		Name                       string
		Schedule                   string
		Schedule_timezone          *string
		Start_date                 *string
	}

	Ssm_maintenance_window_target struct {
		Ssm_maintenance_window_targetID *string `lyra:"ignore"`
		Owner_information               *string
		Resource_type                   string
		Targets                         []Ssm_maintenance_window_target__targets
		Window_id                       string
	}

	Ssm_maintenance_window_task struct {
		Ssm_maintenance_window_taskID *string `lyra:"ignore"`
		Description                   *string
		Logging_info                  *[]Ssm_maintenance_window_task__logging_info
		Max_concurrency               string
		Max_errors                    string
		Name                          *string
		Priority                      *int64
		Service_role_arn              string
		Targets                       []Ssm_maintenance_window_task__targets
		Task_arn                      string
		Task_parameters               *[]Ssm_maintenance_window_task__task_parameters
		Task_type                     string
		Window_id                     string
	}

	Ssm_parameter struct {
		Ssm_parameterID *string `lyra:"ignore"`
		Allowed_pattern *string
		Arn             *string
		Description     *string
		Key_id          *string
		Name            string
		Overwrite       *bool
		Tags            *map[string]string
		Type            string
		Value           string
	}

	Ssm_patch_baseline struct {
		Ssm_patch_baselineID              *string `lyra:"ignore"`
		Approval_rule                     *[]Ssm_patch_baseline__approval_rule
		Approved_patches                  *[]string
		Approved_patches_compliance_level *string
		Description                       *string
		Global_filter                     *[]Ssm_patch_baseline__global_filter
		Name                              string
		Operating_system                  *string
		Rejected_patches                  *[]string
	}

	Ssm_patch_group struct {
		Ssm_patch_groupID *string `lyra:"ignore"`
		Baseline_id       string
		Patch_group       string
	}

	Ssm_resource_data_sync struct {
		Ssm_resource_data_syncID *string `lyra:"ignore"`
		Name                     string
		S3_destination           []Ssm_resource_data_sync__s3_destination
	}

	Storagegateway_cache struct {
		Storagegateway_cacheID *string `lyra:"ignore"`
		Disk_id                string
		Gateway_arn            string
	}

	Storagegateway_cached_iscsi_volume struct {
		Storagegateway_cached_iscsi_volumeID *string `lyra:"ignore"`
		Arn                                  *string
		Chap_enabled                         *bool
		Gateway_arn                          string
		Lun_number                           *int64
		Network_interface_id                 string
		Network_interface_port               *int64
		Snapshot_id                          *string
		Source_volume_arn                    *string
		Target_arn                           *string
		Target_name                          string
		Volume_arn                           *string
		Volume_id                            *string
		Volume_size_in_bytes                 int64
	}

	Storagegateway_gateway struct {
		Storagegateway_gatewayID      *string `lyra:"ignore"`
		Activation_key                *string
		Arn                           *string
		Gateway_id                    *string
		Gateway_ip_address            *string
		Gateway_name                  string
		Gateway_timezone              string
		Gateway_type                  *string
		Medium_changer_type           *string
		Smb_active_directory_settings *[]Storagegateway_gateway__smb_active_directory_settings
		Smb_guest_password            *string
		Tape_drive_type               *string
	}

	Storagegateway_nfs_file_share struct {
		Storagegateway_nfs_file_shareID *string `lyra:"ignore"`
		Arn                             *string
		Client_list                     []string
		Default_storage_class           *string
		Fileshare_id                    *string
		Gateway_arn                     string
		Guess_mime_type_enabled         *bool
		Kms_encrypted                   *bool
		Kms_key_arn                     *string
		Location_arn                    string
		Nfs_file_share_defaults         *[]Storagegateway_nfs_file_share__nfs_file_share_defaults
		Object_acl                      *string
		Read_only                       *bool
		Requester_pays                  *bool
		Role_arn                        string
		Squash                          *string
	}

	Storagegateway_smb_file_share struct {
		Storagegateway_smb_file_shareID *string `lyra:"ignore"`
		Arn                             *string
		Authentication                  *string
		Default_storage_class           *string
		Fileshare_id                    *string
		Gateway_arn                     string
		Guess_mime_type_enabled         *bool
		Invalid_user_list               *[]string
		Kms_encrypted                   *bool
		Kms_key_arn                     *string
		Location_arn                    string
		Object_acl                      *string
		Read_only                       *bool
		Requester_pays                  *bool
		Role_arn                        string
		Valid_user_list                 *[]string
	}

	Storagegateway_upload_buffer struct {
		Storagegateway_upload_bufferID *string `lyra:"ignore"`
		Disk_id                        string
		Gateway_arn                    string
	}

	Storagegateway_working_storage struct {
		Storagegateway_working_storageID *string `lyra:"ignore"`
		Disk_id                          string
		Gateway_arn                      string
	}

	Subnet struct {
		SubnetID                        *string `lyra:"ignore"`
		Arn                             *string
		Assign_ipv6_address_on_creation *bool
		Availability_zone               *string
		Availability_zone_id            *string
		Cidr_block                      string
		Ipv6_cidr_block                 *string
		Ipv6_cidr_block_association_id  *string
		Map_public_ip_on_launch         *bool
		Owner_id                        *string
		Tags                            *map[string]string
		Vpc_id                          string
	}

	Swf_domain struct {
		Swf_domainID                                *string `lyra:"ignore"`
		Description                                 *string
		Name                                        *string
		Name_prefix                                 *string
		Workflow_execution_retention_period_in_days string
	}

	Transfer_server struct {
		Transfer_serverID      *string `lyra:"ignore"`
		Arn                    *string
		Endpoint               *string
		Force_destroy          *bool
		Identity_provider_type *string
		Invocation_role        *string
		Logging_role           *string
		Tags                   *map[string]string
		Url                    *string
	}

	Transfer_ssh_key struct {
		Transfer_ssh_keyID *string `lyra:"ignore"`
		Body               string
		Server_id          string
		User_name          string
	}

	Transfer_user struct {
		Transfer_userID *string `lyra:"ignore"`
		Arn             *string
		Home_directory  *string
		Policy          *string
		Role            string
		Server_id       string
		Tags            *map[string]string
		User_name       string
	}

	Volume_attachment struct {
		Volume_attachmentID *string `lyra:"ignore"`
		Device_name         string
		Force_detach        *bool
		Instance_id         string
		Skip_destroy        *bool
		Volume_id           string
	}

	Vpc struct {
		VpcID                            *string `lyra:"ignore"`
		Arn                              *string
		Assign_generated_ipv6_cidr_block *bool
		Cidr_block                       string
		Default_network_acl_id           *string
		Default_route_table_id           *string
		Default_security_group_id        *string
		Dhcp_options_id                  *string
		Enable_classiclink               *bool
		Enable_classiclink_dns_support   *bool
		Enable_dns_hostnames             *bool
		Enable_dns_support               *bool
		Instance_tenancy                 *string
		Ipv6_association_id              *string
		Ipv6_cidr_block                  *string
		Main_route_table_id              *string
		Owner_id                         *string
		Tags                             *map[string]string
	}

	Vpc_dhcp_options struct {
		Vpc_dhcp_optionsID   *string `lyra:"ignore"`
		Domain_name          *string
		Domain_name_servers  *[]string
		Netbios_name_servers *[]string
		Netbios_node_type    *string
		Ntp_servers          *[]string
		Owner_id             *string
		Tags                 *map[string]string
	}

	Vpc_dhcp_options_association struct {
		Vpc_dhcp_options_associationID *string `lyra:"ignore"`
		Dhcp_options_id                string
		Vpc_id                         string
	}

	Vpc_endpoint struct {
		Vpc_endpointID        *string `lyra:"ignore"`
		Auto_accept           *bool
		Cidr_blocks           *[]string
		Dns_entry             *[]Vpc_endpoint__dns_entry
		Network_interface_ids *[]string
		Policy                *string
		Prefix_list_id        *string
		Private_dns_enabled   *bool
		Route_table_ids       *[]string
		Security_group_ids    *[]string
		Service_name          string
		State                 *string
		Subnet_ids            *[]string
		Vpc_endpoint_type     *string
		Vpc_id                string
	}

	Vpc_endpoint_connection_notification struct {
		Vpc_endpoint_connection_notificationID *string `lyra:"ignore"`
		Connection_events                      []string
		Connection_notification_arn            string
		Notification_type                      *string
		State                                  *string
		Vpc_endpoint_id                        *string
		Vpc_endpoint_service_id                *string
	}

	Vpc_endpoint_route_table_association struct {
		Vpc_endpoint_route_table_associationID *string `lyra:"ignore"`
		Route_table_id                         string
		Vpc_endpoint_id                        string
	}

	Vpc_endpoint_service struct {
		Vpc_endpoint_serviceID     *string `lyra:"ignore"`
		Acceptance_required        bool
		Allowed_principals         *[]string
		Availability_zones         *[]string
		Base_endpoint_dns_names    *[]string
		Network_load_balancer_arns []string
		Private_dns_name           *string
		Service_name               *string
		Service_type               *string
		State                      *string
	}

	Vpc_endpoint_service_allowed_principal struct {
		Vpc_endpoint_service_allowed_principalID *string `lyra:"ignore"`
		Principal_arn                            string
		Vpc_endpoint_service_id                  string
	}

	Vpc_endpoint_subnet_association struct {
		Vpc_endpoint_subnet_associationID *string `lyra:"ignore"`
		Subnet_id                         string
		Vpc_endpoint_id                   string
	}

	Vpc_ipv4_cidr_block_association struct {
		Vpc_ipv4_cidr_block_associationID *string `lyra:"ignore"`
		Cidr_block                        string
		Vpc_id                            string
	}

	Vpc_peering_connection struct {
		Vpc_peering_connectionID *string `lyra:"ignore"`
		Accept_status            *string
		Accepter                 *[]Vpc_peering_connection__accepter
		Auto_accept              *bool
		Peer_owner_id            *string
		Peer_region              *string
		Peer_vpc_id              string
		Requester                *[]Vpc_peering_connection__requester
		Tags                     *map[string]string
		Vpc_id                   string
	}

	Vpc_peering_connection_accepter struct {
		Vpc_peering_connection_accepterID *string `lyra:"ignore"`
		Accept_status                     *string
		Accepter                          *[]Vpc_peering_connection_accepter__accepter
		Auto_accept                       *bool
		Peer_owner_id                     *string
		Peer_region                       *string
		Peer_vpc_id                       *string
		Requester                         *[]Vpc_peering_connection_accepter__requester
		Tags                              *map[string]string
		Vpc_id                            *string
		Vpc_peering_connection_id         string
	}

	Vpc_peering_connection_options struct {
		Vpc_peering_connection_optionsID *string `lyra:"ignore"`
		Accepter                         *[]Vpc_peering_connection_options__accepter
		Requester                        *[]Vpc_peering_connection_options__requester
		Vpc_peering_connection_id        string
	}

	Vpn_connection struct {
		Vpn_connectionID               *string `lyra:"ignore"`
		Customer_gateway_configuration *string
		Customer_gateway_id            string
		Routes                         *[]Vpn_connection__routes
		Static_routes_only             *bool
		Tags                           *map[string]string
		Transit_gateway_id             *string
		Tunnel1_address                *string
		Tunnel1_bgp_asn                *string
		Tunnel1_bgp_holdtime           *int64
		Tunnel1_cgw_inside_address     *string
		Tunnel1_inside_cidr            *string
		Tunnel1_preshared_key          *string
		Tunnel1_vgw_inside_address     *string
		Tunnel2_address                *string
		Tunnel2_bgp_asn                *string
		Tunnel2_bgp_holdtime           *int64
		Tunnel2_cgw_inside_address     *string
		Tunnel2_inside_cidr            *string
		Tunnel2_preshared_key          *string
		Tunnel2_vgw_inside_address     *string
		Type                           string
		Vgw_telemetry                  *[]Vpn_connection__vgw_telemetry
		Vpn_gateway_id                 *string
	}

	Vpn_connection_route struct {
		Vpn_connection_routeID *string `lyra:"ignore"`
		Destination_cidr_block string
		Vpn_connection_id      string
	}

	Vpn_gateway struct {
		Vpn_gatewayID     *string `lyra:"ignore"`
		Amazon_side_asn   *string
		Availability_zone *string
		Tags              *map[string]string
		Vpc_id            *string
	}

	Vpn_gateway_attachment struct {
		Vpn_gateway_attachmentID *string `lyra:"ignore"`
		Vpc_id                   string
		Vpn_gateway_id           string
	}

	Vpn_gateway_route_propagation struct {
		Vpn_gateway_route_propagationID *string `lyra:"ignore"`
		Route_table_id                  string
		Vpn_gateway_id                  string
	}

	Waf_byte_match_set struct {
		Waf_byte_match_setID *string `lyra:"ignore"`
		Byte_match_tuples    *[]Waf_byte_match_set__byte_match_tuples
		Name                 string
	}

	Waf_geo_match_set struct {
		Waf_geo_match_setID  *string `lyra:"ignore"`
		Geo_match_constraint *[]Waf_geo_match_set__geo_match_constraint
		Name                 string
	}

	Waf_ipset struct {
		Waf_ipsetID        *string `lyra:"ignore"`
		Arn                *string
		Ip_set_descriptors *[]Waf_ipset__ip_set_descriptors
		Name               string
	}

	Waf_rate_based_rule struct {
		Waf_rate_based_ruleID *string `lyra:"ignore"`
		Metric_name           string
		Name                  string
		Predicates            *[]Waf_rate_based_rule__predicates
		Rate_key              string
		Rate_limit            int64
	}

	Waf_regex_match_set struct {
		Waf_regex_match_setID *string `lyra:"ignore"`
		Name                  string
		Regex_match_tuple     *[]Waf_regex_match_set__regex_match_tuple
	}

	Waf_regex_pattern_set struct {
		Waf_regex_pattern_setID *string `lyra:"ignore"`
		Name                    string
		Regex_pattern_strings   *[]string
	}

	Waf_rule struct {
		Waf_ruleID  *string `lyra:"ignore"`
		Metric_name string
		Name        string
		Predicates  *[]Waf_rule__predicates
	}

	Waf_rule_group struct {
		Waf_rule_groupID *string `lyra:"ignore"`
		Activated_rule   *[]Waf_rule_group__activated_rule
		Metric_name      string
		Name             string
	}

	Waf_size_constraint_set struct {
		Waf_size_constraint_setID *string `lyra:"ignore"`
		Name                      string
		Size_constraints          *[]Waf_size_constraint_set__size_constraints
	}

	Waf_sql_injection_match_set struct {
		Waf_sql_injection_match_setID *string `lyra:"ignore"`
		Name                          string
		Sql_injection_match_tuples    *[]Waf_sql_injection_match_set__sql_injection_match_tuples
	}

	Waf_web_acl struct {
		Waf_web_aclID  *string `lyra:"ignore"`
		Default_action []Waf_web_acl__default_action
		Metric_name    string
		Name           string
		Rules          *[]Waf_web_acl__rules
	}

	Waf_xss_match_set struct {
		Waf_xss_match_setID *string `lyra:"ignore"`
		Name                string
		Xss_match_tuples    *[]Waf_xss_match_set__xss_match_tuples
	}

	Wafregional_byte_match_set struct {
		Wafregional_byte_match_setID *string `lyra:"ignore"`
		Byte_match_tuple             *[]Wafregional_byte_match_set__byte_match_tuple
		Byte_match_tuples            *[]Wafregional_byte_match_set__byte_match_tuples
		Name                         string
	}

	Wafregional_geo_match_set struct {
		Wafregional_geo_match_setID *string `lyra:"ignore"`
		Geo_match_constraint        *[]Wafregional_geo_match_set__geo_match_constraint
		Name                        string
	}

	Wafregional_ipset struct {
		Wafregional_ipsetID *string `lyra:"ignore"`
		Arn                 *string
		Ip_set_descriptor   *[]Wafregional_ipset__ip_set_descriptor
		Name                string
	}

	Wafregional_rate_based_rule struct {
		Wafregional_rate_based_ruleID *string `lyra:"ignore"`
		Metric_name                   string
		Name                          string
		Predicate                     *[]Wafregional_rate_based_rule__predicate
		Rate_key                      string
		Rate_limit                    int64
	}

	Wafregional_regex_match_set struct {
		Wafregional_regex_match_setID *string `lyra:"ignore"`
		Name                          string
		Regex_match_tuple             *[]Wafregional_regex_match_set__regex_match_tuple
	}

	Wafregional_regex_pattern_set struct {
		Wafregional_regex_pattern_setID *string `lyra:"ignore"`
		Name                            string
		Regex_pattern_strings           *[]string
	}

	Wafregional_rule struct {
		Wafregional_ruleID *string `lyra:"ignore"`
		Metric_name        string
		Name               string
		Predicate          *[]Wafregional_rule__predicate
	}

	Wafregional_rule_group struct {
		Wafregional_rule_groupID *string `lyra:"ignore"`
		Activated_rule           *[]Wafregional_rule_group__activated_rule
		Metric_name              string
		Name                     string
	}

	Wafregional_size_constraint_set struct {
		Wafregional_size_constraint_setID *string `lyra:"ignore"`
		Name                              string
		Size_constraints                  *[]Wafregional_size_constraint_set__size_constraints
	}

	Wafregional_sql_injection_match_set struct {
		Wafregional_sql_injection_match_setID *string `lyra:"ignore"`
		Name                                  string
		Sql_injection_match_tuple             *[]Wafregional_sql_injection_match_set__sql_injection_match_tuple
	}

	Wafregional_web_acl struct {
		Wafregional_web_aclID *string `lyra:"ignore"`
		Default_action        []Wafregional_web_acl__default_action
		Metric_name           string
		Name                  string
		Rule                  *[]Wafregional_web_acl__rule
	}

	Wafregional_web_acl_association struct {
		Wafregional_web_acl_associationID *string `lyra:"ignore"`
		Resource_arn                      string
		Web_acl_id                        string
	}

	Wafregional_xss_match_set struct {
		Wafregional_xss_match_setID *string `lyra:"ignore"`
		Name                        string
		Xss_match_tuple             *[]Wafregional_xss_match_set__xss_match_tuple
	}

	Acm_certificate__domain_validation_options struct {
		Domain_name           *string
		Resource_record_name  *string
		Resource_record_type  *string
		Resource_record_value *string
	}

	Acmpca_certificate_authority__certificate_authority_configuration__subject struct {
		Common_name                  *string
		Country                      *string
		Distinguished_name_qualifier *string
		Generation_qualifier         *string
		Given_name                   *string
		Initials                     *string
		Locality                     *string
		Organization                 *string
		Organizational_unit          *string
		Pseudonym                    *string
		State                        *string
		Surname                      *string
		Title                        *string
	}

	Acmpca_certificate_authority__certificate_authority_configuration struct {
		Key_algorithm     string
		Signing_algorithm string
		Subject           []Acmpca_certificate_authority__certificate_authority_configuration__subject
	}

	Acmpca_certificate_authority__revocation_configuration__crl_configuration struct {
		Custom_cname       *string
		Enabled            *bool
		Expiration_in_days int64
		S3_bucket_name     *string
	}

	Acmpca_certificate_authority__revocation_configuration struct {
		Crl_configuration *[]Acmpca_certificate_authority__revocation_configuration__crl_configuration
	}

	Alb__access_logs struct {
		Bucket  string
		Enabled *bool
		Prefix  *string
	}

	Alb__subnet_mapping struct {
		Allocation_id *string
		Subnet_id     string
	}

	Alb_listener__default_action__authenticate_cognito struct {
		Authentication_request_extra_params *map[string]string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		User_pool_arn                       string
		User_pool_client_id                 string
		User_pool_domain                    string
	}

	Alb_listener__default_action__authenticate_oidc struct {
		Authentication_request_extra_params *map[string]string
		Authorization_endpoint              string
		Client_id                           string
		Client_secret                       string
		Issuer                              string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		Token_endpoint                      string
		User_info_endpoint                  string
	}

	Alb_listener__default_action__fixed_response struct {
		Content_type string
		Message_body *string
		Status_code  *string
	}

	Alb_listener__default_action__redirect struct {
		Host        *string
		Path        *string
		Port        *string
		Protocol    *string
		Query       *string
		Status_code string
	}

	Alb_listener__default_action struct {
		Authenticate_cognito *[]Alb_listener__default_action__authenticate_cognito
		Authenticate_oidc    *[]Alb_listener__default_action__authenticate_oidc
		Fixed_response       *[]Alb_listener__default_action__fixed_response
		Order                *int64
		Redirect             *[]Alb_listener__default_action__redirect
		Target_group_arn     *string
		Type                 string
	}

	Alb_listener_rule__action__authenticate_cognito struct {
		Authentication_request_extra_params *map[string]string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		User_pool_arn                       string
		User_pool_client_id                 string
		User_pool_domain                    string
	}

	Alb_listener_rule__action__authenticate_oidc struct {
		Authentication_request_extra_params *map[string]string
		Authorization_endpoint              string
		Client_id                           string
		Client_secret                       string
		Issuer                              string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		Token_endpoint                      string
		User_info_endpoint                  string
	}

	Alb_listener_rule__action__fixed_response struct {
		Content_type string
		Message_body *string
		Status_code  *string
	}

	Alb_listener_rule__action__redirect struct {
		Host        *string
		Path        *string
		Port        *string
		Protocol    *string
		Query       *string
		Status_code string
	}

	Alb_listener_rule__action struct {
		Authenticate_cognito *[]Alb_listener_rule__action__authenticate_cognito
		Authenticate_oidc    *[]Alb_listener_rule__action__authenticate_oidc
		Fixed_response       *[]Alb_listener_rule__action__fixed_response
		Order                *int64
		Redirect             *[]Alb_listener_rule__action__redirect
		Target_group_arn     *string
		Type                 string
	}

	Alb_listener_rule__condition struct {
		Field  *string
		Values *[]string
	}

	Alb_target_group__health_check struct {
		Healthy_threshold   *int64
		Interval            *int64
		Matcher             *string
		Path                *string
		Port                *string
		Protocol            *string
		Timeout             *int64
		Unhealthy_threshold *int64
	}

	Alb_target_group__stickiness struct {
		Cookie_duration *int64
		Enabled         *bool
		Type            string
	}

	Ami__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           string
		Encrypted             *bool
		Iops                  *int64
		Snapshot_id           *string
		Volume_size           *int64
		Volume_type           *string
	}

	Ami__ephemeral_block_device struct {
		Device_name  string
		Virtual_name string
	}

	Ami_copy__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           *string
		Encrypted             *bool
		Iops                  *int64
		Snapshot_id           *string
		Volume_size           *int64
		Volume_type           *string
	}

	Ami_copy__ephemeral_block_device struct {
		Device_name  *string
		Virtual_name *string
	}

	Ami_from_instance__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           *string
		Encrypted             *bool
		Iops                  *int64
		Snapshot_id           *string
		Volume_size           *int64
		Volume_type           *string
	}

	Ami_from_instance__ephemeral_block_device struct {
		Device_name  *string
		Virtual_name *string
	}

	Api_gateway_account__throttle_settings struct {
		Burst_limit *int64
		Rate_limit  *float64
	}

	Api_gateway_api_key__stage_key struct {
		Rest_api_id string
		Stage_name  string
	}

	Api_gateway_documentation_part__location struct {
		Method      *string
		Name        *string
		Path        *string
		Status_code *string
		Type        string
	}

	Api_gateway_domain_name__endpoint_configuration struct {
		Types []string
	}

	Api_gateway_method_settings__settings struct {
		Cache_data_encrypted                       *bool
		Cache_ttl_in_seconds                       *int64
		Caching_enabled                            *bool
		Data_trace_enabled                         *bool
		Logging_level                              *string
		Metrics_enabled                            *bool
		Require_authorization_for_cache_control    *bool
		Throttling_burst_limit                     *int64
		Throttling_rate_limit                      *float64
		Unauthorized_cache_control_header_strategy *string
	}

	Api_gateway_rest_api__endpoint_configuration struct {
		Types []string
	}

	Api_gateway_stage__access_log_settings struct {
		Destination_arn string
		Format          string
	}

	Api_gateway_usage_plan__api_stages struct {
		Api_id string
		Stage  string
	}

	Api_gateway_usage_plan__quota_settings struct {
		Limit  int64
		Offset *int64
		Period string
	}

	Api_gateway_usage_plan__throttle_settings struct {
		Burst_limit *int64
		Rate_limit  *float64
	}

	Appautoscaling_policy__step_adjustment struct {
		Metric_interval_lower_bound *string
		Metric_interval_upper_bound *string
		Scaling_adjustment          int64
	}

	Appautoscaling_policy__step_scaling_policy_configuration__step_adjustment struct {
		Metric_interval_lower_bound *string
		Metric_interval_upper_bound *string
		Scaling_adjustment          int64
	}

	Appautoscaling_policy__step_scaling_policy_configuration struct {
		Adjustment_type          *string
		Cooldown                 *int64
		Metric_aggregation_type  *string
		Min_adjustment_magnitude *int64
		Step_adjustment          *[]Appautoscaling_policy__step_scaling_policy_configuration__step_adjustment
	}

	Appautoscaling_policy__target_tracking_scaling_policy_configuration__customized_metric_specification__dimensions struct {
		Name  string
		Value string
	}

	Appautoscaling_policy__target_tracking_scaling_policy_configuration__customized_metric_specification struct {
		Dimensions  *[]Appautoscaling_policy__target_tracking_scaling_policy_configuration__customized_metric_specification__dimensions
		Metric_name string
		Namespace   string
		Statistic   string
		Unit        *string
	}

	Appautoscaling_policy__target_tracking_scaling_policy_configuration__predefined_metric_specification struct {
		Predefined_metric_type string
		Resource_label         *string
	}

	Appautoscaling_policy__target_tracking_scaling_policy_configuration struct {
		Customized_metric_specification *[]Appautoscaling_policy__target_tracking_scaling_policy_configuration__customized_metric_specification
		Disable_scale_in                *bool
		Predefined_metric_specification *[]Appautoscaling_policy__target_tracking_scaling_policy_configuration__predefined_metric_specification
		Scale_in_cooldown               *int64
		Scale_out_cooldown              *int64
		Target_value                    float64
	}

	Appautoscaling_scheduled_action__scalable_target_action struct {
		Max_capacity *int64
		Min_capacity *int64
	}

	Appmesh_route__spec__http_route__action__weighted_target struct {
		Virtual_node string
		Weight       int64
	}

	Appmesh_route__spec__http_route__action struct {
		Weighted_target []Appmesh_route__spec__http_route__action__weighted_target
	}

	Appmesh_route__spec__http_route__match struct {
		Prefix string
	}

	Appmesh_route__spec__http_route struct {
		Action []Appmesh_route__spec__http_route__action
		Match  []Appmesh_route__spec__http_route__match
	}

	Appmesh_route__spec struct {
		Http_route *[]Appmesh_route__spec__http_route
	}

	Appmesh_virtual_node__spec__listener__port_mapping struct {
		Port     int64
		Protocol string
	}

	Appmesh_virtual_node__spec__listener struct {
		Port_mapping []Appmesh_virtual_node__spec__listener__port_mapping
	}

	Appmesh_virtual_node__spec__service_discovery__dns struct {
		Service_name string
	}

	Appmesh_virtual_node__spec__service_discovery struct {
		Dns []Appmesh_virtual_node__spec__service_discovery__dns
	}

	Appmesh_virtual_node__spec struct {
		Backends          *[]string
		Listener          *[]Appmesh_virtual_node__spec__listener
		Service_discovery *[]Appmesh_virtual_node__spec__service_discovery
	}

	Appmesh_virtual_router__spec struct {
		Service_names []string
	}

	Appsync_datasource__dynamodb_config struct {
		Region                 *string
		Table_name             string
		Use_caller_credentials *bool
	}

	Appsync_datasource__elasticsearch_config struct {
		Endpoint string
		Region   *string
	}

	Appsync_datasource__http_config struct {
		Endpoint string
	}

	Appsync_datasource__lambda_config struct {
		Function_arn string
	}

	Appsync_graphql_api__log_config struct {
		Cloudwatch_logs_role_arn string
		Field_log_level          string
	}

	Appsync_graphql_api__openid_connect_config struct {
		Auth_ttl  *int64
		Client_id *string
		Iat_ttl   *int64
		Issuer    string
	}

	Appsync_graphql_api__user_pool_config struct {
		App_id_client_regex *string
		Aws_region          *string
		Default_action      string
		User_pool_id        string
	}

	Athena_database__encryption_configuration struct {
		Encryption_option string
		Kms_key           *string
	}

	Autoscaling_group__initial_lifecycle_hook struct {
		Default_result          *string
		Heartbeat_timeout       *int64
		Lifecycle_transition    string
		Name                    string
		Notification_metadata   *string
		Notification_target_arn *string
		Role_arn                *string
	}

	Autoscaling_group__launch_template struct {
		Id      *string
		Name    *string
		Version *string
	}

	Autoscaling_group__mixed_instances_policy__instances_distribution struct {
		On_demand_allocation_strategy            *string
		On_demand_base_capacity                  *int64
		On_demand_percentage_above_base_capacity *int64
		Spot_allocation_strategy                 *string
		Spot_instance_pools                      *int64
		Spot_max_price                           *string
	}

	Autoscaling_group__mixed_instances_policy__launch_template__launch_template_specification struct {
		Launch_template_id   *string
		Launch_template_name *string
		Version              *string
	}

	Autoscaling_group__mixed_instances_policy__launch_template__override struct {
		Instance_type *string
	}

	Autoscaling_group__mixed_instances_policy__launch_template struct {
		Launch_template_specification []Autoscaling_group__mixed_instances_policy__launch_template__launch_template_specification
		Override                      *[]Autoscaling_group__mixed_instances_policy__launch_template__override
	}

	Autoscaling_group__mixed_instances_policy struct {
		Instances_distribution *[]Autoscaling_group__mixed_instances_policy__instances_distribution
		Launch_template        []Autoscaling_group__mixed_instances_policy__launch_template
	}

	Autoscaling_group__tag struct {
		Key                 string
		Propagate_at_launch bool
		Value               string
	}

	Autoscaling_policy__step_adjustment struct {
		Metric_interval_lower_bound *string
		Metric_interval_upper_bound *string
		Scaling_adjustment          int64
	}

	Autoscaling_policy__target_tracking_configuration__customized_metric_specification__metric_dimension struct {
		Name  string
		Value string
	}

	Autoscaling_policy__target_tracking_configuration__customized_metric_specification struct {
		Metric_dimension *[]Autoscaling_policy__target_tracking_configuration__customized_metric_specification__metric_dimension
		Metric_name      string
		Namespace        string
		Statistic        string
		Unit             *string
	}

	Autoscaling_policy__target_tracking_configuration__predefined_metric_specification struct {
		Predefined_metric_type string
		Resource_label         *string
	}

	Autoscaling_policy__target_tracking_configuration struct {
		Customized_metric_specification *[]Autoscaling_policy__target_tracking_configuration__customized_metric_specification
		Disable_scale_in                *bool
		Predefined_metric_specification *[]Autoscaling_policy__target_tracking_configuration__predefined_metric_specification
		Target_value                    float64
	}

	Batch_compute_environment__compute_resources struct {
		Bid_percentage      *int64
		Desired_vcpus       *int64
		Ec2_key_pair        *string
		Image_id            *string
		Instance_role       string
		Instance_type       []string
		Max_vcpus           int64
		Min_vcpus           int64
		Security_group_ids  []string
		Spot_iam_fleet_role *string
		Subnets             []string
		Tags                *map[string]string
		Type                string
	}

	Batch_job_definition__retry_strategy struct {
		Attempts *int64
	}

	Batch_job_definition__timeout struct {
		Attempt_duration_seconds *int64
	}

	Budgets_budget__cost_types struct {
		Include_credit             *bool
		Include_discount           *bool
		Include_other_subscription *bool
		Include_recurring          *bool
		Include_refund             *bool
		Include_subscription       *bool
		Include_support            *bool
		Include_tax                *bool
		Include_upfront            *bool
		Use_amortized              *bool
		Use_blended                *bool
	}

	Cloudfront_distribution__cache_behavior__forwarded_values__cookies struct {
		Forward           string
		Whitelisted_names *[]string
	}

	Cloudfront_distribution__cache_behavior__forwarded_values struct {
		Cookies                 []Cloudfront_distribution__cache_behavior__forwarded_values__cookies
		Headers                 *[]string
		Query_string            bool
		Query_string_cache_keys *[]string
	}

	Cloudfront_distribution__cache_behavior__lambda_function_association struct {
		Event_type   string
		Include_body *bool
		Lambda_arn   string
	}

	Cloudfront_distribution__cache_behavior struct {
		Allowed_methods             []string
		Cached_methods              []string
		Compress                    *bool
		Default_ttl                 *int64
		Field_level_encryption_id   *string
		Forwarded_values            []Cloudfront_distribution__cache_behavior__forwarded_values
		Lambda_function_association *[]Cloudfront_distribution__cache_behavior__lambda_function_association
		Max_ttl                     *int64
		Min_ttl                     *int64
		Path_pattern                string
		Smooth_streaming            *bool
		Target_origin_id            string
		Trusted_signers             *[]string
		Viewer_protocol_policy      string
	}

	Cloudfront_distribution__custom_error_response struct {
		Error_caching_min_ttl *int64
		Error_code            int64
		Response_code         *int64
		Response_page_path    *string
	}

	Cloudfront_distribution__default_cache_behavior__forwarded_values__cookies struct {
		Forward           string
		Whitelisted_names *[]string
	}

	Cloudfront_distribution__default_cache_behavior__forwarded_values struct {
		Cookies                 []Cloudfront_distribution__default_cache_behavior__forwarded_values__cookies
		Headers                 *[]string
		Query_string            bool
		Query_string_cache_keys *[]string
	}

	Cloudfront_distribution__default_cache_behavior__lambda_function_association struct {
		Event_type   string
		Include_body *bool
		Lambda_arn   string
	}

	Cloudfront_distribution__default_cache_behavior struct {
		Allowed_methods             []string
		Cached_methods              []string
		Compress                    *bool
		Default_ttl                 *int64
		Field_level_encryption_id   *string
		Forwarded_values            []Cloudfront_distribution__default_cache_behavior__forwarded_values
		Lambda_function_association *[]Cloudfront_distribution__default_cache_behavior__lambda_function_association
		Max_ttl                     *int64
		Min_ttl                     *int64
		Smooth_streaming            *bool
		Target_origin_id            string
		Trusted_signers             *[]string
		Viewer_protocol_policy      string
	}

	Cloudfront_distribution__logging_config struct {
		Bucket          string
		Include_cookies *bool
		Prefix          *string
	}

	Cloudfront_distribution__ordered_cache_behavior__forwarded_values__cookies struct {
		Forward           string
		Whitelisted_names *[]string
	}

	Cloudfront_distribution__ordered_cache_behavior__forwarded_values struct {
		Cookies                 []Cloudfront_distribution__ordered_cache_behavior__forwarded_values__cookies
		Headers                 *[]string
		Query_string            bool
		Query_string_cache_keys *[]string
	}

	Cloudfront_distribution__ordered_cache_behavior__lambda_function_association struct {
		Event_type   string
		Include_body *bool
		Lambda_arn   string
	}

	Cloudfront_distribution__ordered_cache_behavior struct {
		Allowed_methods             []string
		Cached_methods              []string
		Compress                    *bool
		Default_ttl                 *int64
		Field_level_encryption_id   *string
		Forwarded_values            []Cloudfront_distribution__ordered_cache_behavior__forwarded_values
		Lambda_function_association *[]Cloudfront_distribution__ordered_cache_behavior__lambda_function_association
		Max_ttl                     *int64
		Min_ttl                     *int64
		Path_pattern                string
		Smooth_streaming            *bool
		Target_origin_id            string
		Trusted_signers             *[]string
		Viewer_protocol_policy      string
	}

	Cloudfront_distribution__origin__custom_header struct {
		Name  string
		Value string
	}

	Cloudfront_distribution__origin__custom_origin_config struct {
		Http_port                int64
		Https_port               int64
		Origin_keepalive_timeout *int64
		Origin_protocol_policy   string
		Origin_read_timeout      *int64
		Origin_ssl_protocols     []string
	}

	Cloudfront_distribution__origin__s3_origin_config struct {
		Origin_access_identity string
	}

	Cloudfront_distribution__origin struct {
		Custom_header        *[]Cloudfront_distribution__origin__custom_header
		Custom_origin_config *[]Cloudfront_distribution__origin__custom_origin_config
		Domain_name          string
		Origin_id            string
		Origin_path          *string
		S3_origin_config     *[]Cloudfront_distribution__origin__s3_origin_config
	}

	Cloudfront_distribution__restrictions__geo_restriction struct {
		Locations        *[]string
		Restriction_type string
	}

	Cloudfront_distribution__restrictions struct {
		Geo_restriction []Cloudfront_distribution__restrictions__geo_restriction
	}

	Cloudfront_distribution__viewer_certificate struct {
		Acm_certificate_arn            *string
		Cloudfront_default_certificate *bool
		Iam_certificate_id             *string
		Minimum_protocol_version       *string
		Ssl_support_method             *string
	}

	Cloudhsm_v2_cluster__cluster_certificates struct {
		Aws_hardware_certificate          *string
		Cluster_certificate               *string
		Cluster_csr                       *string
		Hsm_certificate                   *string
		Manufacturer_hardware_certificate *string
	}

	Cloudtrail__event_selector__data_resource struct {
		Type   string
		Values []string
	}

	Cloudtrail__event_selector struct {
		Data_resource             *[]Cloudtrail__event_selector__data_resource
		Include_management_events *bool
		Read_write_type           *string
	}

	Cloudwatch_event_permission__condition struct {
		Key   string
		Type  string
		Value string
	}

	Cloudwatch_event_target__batch_target struct {
		Array_size     *int64
		Job_attempts   *int64
		Job_definition string
		Job_name       string
	}

	Cloudwatch_event_target__ecs_target__network_configuration struct {
		Assign_public_ip *bool
		Security_groups  *[]string
		Subnets          []string
	}

	Cloudwatch_event_target__ecs_target struct {
		Group                 *string
		Launch_type           *string
		Network_configuration *[]Cloudwatch_event_target__ecs_target__network_configuration
		Platform_version      *string
		Task_count            *int64
		Task_definition_arn   string
	}

	Cloudwatch_event_target__input_transformer struct {
		Input_paths    *map[string]string
		Input_template string
	}

	Cloudwatch_event_target__kinesis_target struct {
		Partition_key_path *string
	}

	Cloudwatch_event_target__run_command_targets struct {
		Key    string
		Values []string
	}

	Cloudwatch_event_target__sqs_target struct {
		Message_group_id *string
	}

	Cloudwatch_log_metric_filter__metric_transformation struct {
		Default_value *string
		Name          string
		Namespace     string
		Value         string
	}

	Codebuild_project__artifacts struct {
		Encryption_disabled *bool
		Location            *string
		Name                *string
		Namespace_type      *string
		Packaging           *string
		Path                *string
		Type                string
	}

	Codebuild_project__cache struct {
		Location *string
		Type     *string
	}

	Codebuild_project__environment__environment_variable struct {
		Name  string
		Type  *string
		Value string
	}

	Codebuild_project__environment struct {
		Certificate          *string
		Compute_type         string
		Environment_variable *[]Codebuild_project__environment__environment_variable
		Image                string
		Privileged_mode      *bool
		Type                 string
	}

	Codebuild_project__secondary_artifacts struct {
		Artifact_identifier string
		Encryption_disabled *bool
		Location            *string
		Name                *string
		Namespace_type      *string
		Packaging           *string
		Path                *string
		Type                string
	}

	Codebuild_project__secondary_sources__auth struct {
		Resource *string
		Type     string
	}

	Codebuild_project__secondary_sources struct {
		Auth                *[]Codebuild_project__secondary_sources__auth
		Buildspec           *string
		Git_clone_depth     *int64
		Insecure_ssl        *bool
		Location            *string
		Report_build_status *bool
		Source_identifier   string
		Type                string
	}

	Codebuild_project__source__auth struct {
		Resource *string
		Type     string
	}

	Codebuild_project__source struct {
		Auth                *[]Codebuild_project__source__auth
		Buildspec           *string
		Git_clone_depth     *int64
		Insecure_ssl        *bool
		Location            *string
		Report_build_status *bool
		Type                string
	}

	Codebuild_project__vpc_config struct {
		Security_group_ids []string
		Subnets            []string
		Vpc_id             string
	}

	Codecommit_trigger__trigger struct {
		Branches        *[]string
		Custom_data     *string
		Destination_arn string
		Events          []string
		Name            string
	}

	Codedeploy_deployment_config__minimum_healthy_hosts struct {
		Type  *string
		Value *int64
	}

	Codedeploy_deployment_config__traffic_routing_config__time_based_canary struct {
		Interval   *int64
		Percentage *int64
	}

	Codedeploy_deployment_config__traffic_routing_config__time_based_linear struct {
		Interval   *int64
		Percentage *int64
	}

	Codedeploy_deployment_config__traffic_routing_config struct {
		Time_based_canary *[]Codedeploy_deployment_config__traffic_routing_config__time_based_canary
		Time_based_linear *[]Codedeploy_deployment_config__traffic_routing_config__time_based_linear
		Type              *string
	}

	Codedeploy_deployment_group__alarm_configuration struct {
		Alarms                    *[]string
		Enabled                   *bool
		Ignore_poll_alarm_failure *bool
	}

	Codedeploy_deployment_group__auto_rollback_configuration struct {
		Enabled *bool
		Events  *[]string
	}

	Codedeploy_deployment_group__blue_green_deployment_config__deployment_ready_option struct {
		Action_on_timeout    *string
		Wait_time_in_minutes *int64
	}

	Codedeploy_deployment_group__blue_green_deployment_config__green_fleet_provisioning_option struct {
		Action *string
	}

	Codedeploy_deployment_group__blue_green_deployment_config__terminate_blue_instances_on_deployment_success struct {
		Action                           *string
		Termination_wait_time_in_minutes *int64
	}

	Codedeploy_deployment_group__blue_green_deployment_config struct {
		Deployment_ready_option                        *[]Codedeploy_deployment_group__blue_green_deployment_config__deployment_ready_option
		Green_fleet_provisioning_option                *[]Codedeploy_deployment_group__blue_green_deployment_config__green_fleet_provisioning_option
		Terminate_blue_instances_on_deployment_success *[]Codedeploy_deployment_group__blue_green_deployment_config__terminate_blue_instances_on_deployment_success
	}

	Codedeploy_deployment_group__deployment_style struct {
		Deployment_option *string
		Deployment_type   *string
	}

	Codedeploy_deployment_group__ec2_tag_filter struct {
		Key   *string
		Type  *string
		Value *string
	}

	Codedeploy_deployment_group__ec2_tag_set__ec2_tag_filter struct {
		Key   *string
		Type  *string
		Value *string
	}

	Codedeploy_deployment_group__ec2_tag_set struct {
		Ec2_tag_filter *[]Codedeploy_deployment_group__ec2_tag_set__ec2_tag_filter
	}

	Codedeploy_deployment_group__ecs_service struct {
		Cluster_name string
		Service_name string
	}

	Codedeploy_deployment_group__load_balancer_info__elb_info struct {
		Name *string
	}

	Codedeploy_deployment_group__load_balancer_info__target_group_info struct {
		Name *string
	}

	Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__prod_traffic_route struct {
		Listener_arns []string
	}

	Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__target_group struct {
		Name string
	}

	Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__test_traffic_route struct {
		Listener_arns []string
	}

	Codedeploy_deployment_group__load_balancer_info__target_group_pair_info struct {
		Prod_traffic_route []Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__prod_traffic_route
		Target_group       []Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__target_group
		Test_traffic_route *[]Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__test_traffic_route
	}

	Codedeploy_deployment_group__load_balancer_info struct {
		Elb_info               *[]Codedeploy_deployment_group__load_balancer_info__elb_info
		Target_group_info      *[]Codedeploy_deployment_group__load_balancer_info__target_group_info
		Target_group_pair_info *[]Codedeploy_deployment_group__load_balancer_info__target_group_pair_info
	}

	Codedeploy_deployment_group__on_premises_instance_tag_filter struct {
		Key   *string
		Type  *string
		Value *string
	}

	Codedeploy_deployment_group__trigger_configuration struct {
		Trigger_events     []string
		Trigger_name       string
		Trigger_target_arn string
	}

	Codepipeline__artifact_store__encryption_key struct {
		Id   string
		Type string
	}

	Codepipeline__artifact_store struct {
		Encryption_key *[]Codepipeline__artifact_store__encryption_key
		Location       string
		Type           string
	}

	Codepipeline__stage__action struct {
		Category         string
		Configuration    *map[string]string
		Input_artifacts  *[]string
		Name             string
		Output_artifacts *[]string
		Owner            string
		Provider         string
		Role_arn         *string
		Run_order        *int64
		Version          string
	}

	Codepipeline__stage struct {
		Action []Codepipeline__stage__action
		Name   string
	}

	Codepipeline_webhook__authentication_configuration struct {
		Allowed_ip_range *string
		Secret_token     *string
	}

	Codepipeline_webhook__filter struct {
		Json_path    string
		Match_equals string
	}

	Cognito_identity_pool__cognito_identity_providers struct {
		Client_id               *string
		Provider_name           *string
		Server_side_token_check *bool
	}

	Cognito_identity_pool_roles_attachment__role_mapping__mapping_rule struct {
		Claim      string
		Match_type string
		Role_arn   string
		Value      string
	}

	Cognito_identity_pool_roles_attachment__role_mapping struct {
		Ambiguous_role_resolution *string
		Identity_provider         string
		Mapping_rule              *[]Cognito_identity_pool_roles_attachment__role_mapping__mapping_rule
		Type                      string
	}

	Cognito_identity_pool_roles_attachment__roles struct {
		Authenticated   *string
		Unauthenticated *string
	}

	Cognito_resource_server__scope struct {
		Scope_description string
		Scope_name        string
	}

	Cognito_user_pool__admin_create_user_config__invite_message_template struct {
		Email_message *string
		Email_subject *string
		Sms_message   *string
	}

	Cognito_user_pool__admin_create_user_config struct {
		Allow_admin_create_user_only *bool
		Invite_message_template      *[]Cognito_user_pool__admin_create_user_config__invite_message_template
		Unused_account_validity_days *int64
	}

	Cognito_user_pool__device_configuration struct {
		Challenge_required_on_new_device      *bool
		Device_only_remembered_on_user_prompt *bool
	}

	Cognito_user_pool__email_configuration struct {
		Reply_to_email_address *string
		Source_arn             *string
	}

	Cognito_user_pool__lambda_config struct {
		Create_auth_challenge          *string
		Custom_message                 *string
		Define_auth_challenge          *string
		Post_authentication            *string
		Post_confirmation              *string
		Pre_authentication             *string
		Pre_sign_up                    *string
		Pre_token_generation           *string
		User_migration                 *string
		Verify_auth_challenge_response *string
	}

	Cognito_user_pool__password_policy struct {
		Minimum_length    *int64
		Require_lowercase *bool
		Require_numbers   *bool
		Require_symbols   *bool
		Require_uppercase *bool
	}

	Cognito_user_pool__schema__number_attribute_constraints struct {
		Max_value *string
		Min_value *string
	}

	Cognito_user_pool__schema__string_attribute_constraints struct {
		Max_length *string
		Min_length *string
	}

	Cognito_user_pool__schema struct {
		Attribute_data_type          string
		Developer_only_attribute     *bool
		Mutable                      *bool
		Name                         string
		Number_attribute_constraints *[]Cognito_user_pool__schema__number_attribute_constraints
		Required                     *bool
		String_attribute_constraints *[]Cognito_user_pool__schema__string_attribute_constraints
	}

	Cognito_user_pool__sms_configuration struct {
		External_id    string
		Sns_caller_arn string
	}

	Cognito_user_pool__verification_message_template struct {
		Default_email_option  *string
		Email_message         *string
		Email_message_by_link *string
		Email_subject         *string
		Email_subject_by_link *string
		Sms_message           *string
	}

	Config_config_rule__scope struct {
		Compliance_resource_id    *string
		Compliance_resource_types *[]string
		Tag_key                   *string
		Tag_value                 *string
	}

	Config_config_rule__source__source_detail struct {
		Event_source                *string
		Maximum_execution_frequency *string
		Message_type                *string
	}

	Config_config_rule__source struct {
		Owner             string
		Source_detail     *[]Config_config_rule__source__source_detail
		Source_identifier string
	}

	Config_configuration_aggregator__account_aggregation_source struct {
		Account_ids []string
		All_regions *bool
		Regions     *[]string
	}

	Config_configuration_aggregator__organization_aggregation_source struct {
		All_regions *bool
		Regions     *[]string
		Role_arn    string
	}

	Config_configuration_recorder__recording_group struct {
		All_supported                 *bool
		Include_global_resource_types *bool
		Resource_types                *[]string
	}

	Config_delivery_channel__snapshot_delivery_properties struct {
		Delivery_frequency *string
	}

	Datasync_location_efs__ec2_config struct {
		Security_group_arns []string
		Subnet_arn          string
	}

	Datasync_location_nfs__on_prem_config struct {
		Agent_arns []string
	}

	Datasync_location_s3__s3_config struct {
		Bucket_access_role_arn string
	}

	Datasync_task__options struct {
		Atime                  *string
		Bytes_per_second       *int64
		Gid                    *string
		Mtime                  *string
		Posix_permissions      *string
		Preserve_deleted_files *string
		Preserve_devices       *string
		Uid                    *string
		Verify_mode            *string
	}

	Dax_cluster__nodes struct {
		Address           *string
		Availability_zone *string
		Id                *string
		Port              *int64
	}

	Dax_cluster__server_side_encryption struct {
		Enabled *bool
	}

	Dax_parameter_group__parameters struct {
		Name  string
		Value string
	}

	Db_instance__s3_import struct {
		Bucket_name           string
		Bucket_prefix         *string
		Ingestion_role        string
		Source_engine         string
		Source_engine_version string
	}

	Db_option_group__option__option_settings struct {
		Name  string
		Value string
	}

	Db_option_group__option struct {
		Db_security_group_memberships  *[]string
		Option_name                    string
		Option_settings                *[]Db_option_group__option__option_settings
		Port                           *int64
		Version                        *string
		Vpc_security_group_memberships *[]string
	}

	Db_parameter_group__parameter struct {
		Apply_method *string
		Name         string
		Value        string
	}

	Db_security_group__ingress struct {
		Cidr                    *string
		Security_group_id       *string
		Security_group_name     *string
		Security_group_owner_id *string
	}

	Default_network_acl__egress struct {
		Action          string
		Cidr_block      *string
		From_port       int64
		Icmp_code       *int64
		Icmp_type       *int64
		Ipv6_cidr_block *string
		Protocol        string
		Rule_no         int64
		To_port         int64
	}

	Default_network_acl__ingress struct {
		Action          string
		Cidr_block      *string
		From_port       int64
		Icmp_code       *int64
		Icmp_type       *int64
		Ipv6_cidr_block *string
		Protocol        string
		Rule_no         int64
		To_port         int64
	}

	Default_route_table__route struct {
		Cidr_block                *string
		Egress_only_gateway_id    *string
		Gateway_id                *string
		Instance_id               *string
		Ipv6_cidr_block           *string
		Nat_gateway_id            *string
		Network_interface_id      *string
		Transit_gateway_id        *string
		Vpc_peering_connection_id *string
	}

	Default_security_group__egress struct {
		Cidr_blocks      *[]string
		Description      *string
		From_port        int64
		Ipv6_cidr_blocks *[]string
		Prefix_list_ids  *[]string
		Protocol         string
		Security_groups  *[]string
		Self             *bool
		To_port          int64
	}

	Default_security_group__ingress struct {
		Cidr_blocks      *[]string
		Description      *string
		From_port        int64
		Ipv6_cidr_blocks *[]string
		Prefix_list_ids  *[]string
		Protocol         string
		Security_groups  *[]string
		Self             *bool
		To_port          int64
	}

	Directory_service_directory__connect_settings struct {
		Customer_dns_ips  []string
		Customer_username string
		Subnet_ids        []string
		Vpc_id            string
	}

	Directory_service_directory__vpc_settings struct {
		Subnet_ids []string
		Vpc_id     string
	}

	Dlm_lifecycle_policy__policy_details__schedule__create_rule struct {
		Interval      int64
		Interval_unit *string
		Times         *[]string
	}

	Dlm_lifecycle_policy__policy_details__schedule__retain_rule struct {
		Count int64
	}

	Dlm_lifecycle_policy__policy_details__schedule struct {
		Copy_tags   *bool
		Create_rule []Dlm_lifecycle_policy__policy_details__schedule__create_rule
		Name        string
		Retain_rule []Dlm_lifecycle_policy__policy_details__schedule__retain_rule
		Tags_to_add *map[string]string
	}

	Dlm_lifecycle_policy__policy_details struct {
		Resource_types []string
		Schedule       []Dlm_lifecycle_policy__policy_details__schedule
		Target_tags    map[string]string
	}

	Dms_endpoint__mongodb_settings struct {
		Auth_mechanism      *string
		Auth_source         *string
		Auth_type           *string
		Docs_to_investigate *string
		Extract_doc_id      *string
		Nesting_level       *string
	}

	Dms_endpoint__s3_settings struct {
		Bucket_folder             *string
		Bucket_name               *string
		Compression_type          *string
		Csv_delimiter             *string
		Csv_row_delimiter         *string
		External_table_definition *string
		Service_access_role_arn   *string
	}

	Docdb_cluster_parameter_group__parameter struct {
		Apply_method *string
		Name         string
		Value        string
	}

	Dynamodb_global_table__replica struct {
		Region_name string
	}

	Dynamodb_table__attribute struct {
		Name string
		Type string
	}

	Dynamodb_table__global_secondary_index struct {
		Hash_key           string
		Name               string
		Non_key_attributes *[]string
		Projection_type    string
		Range_key          *string
		Read_capacity      *int64
		Write_capacity     *int64
	}

	Dynamodb_table__local_secondary_index struct {
		Name               string
		Non_key_attributes *[]string
		Projection_type    string
		Range_key          string
	}

	Dynamodb_table__point_in_time_recovery struct {
		Enabled bool
	}

	Dynamodb_table__server_side_encryption struct {
		Enabled bool
	}

	Dynamodb_table__ttl struct {
		Attribute_name string
		Enabled        bool
	}

	Ec2_fleet__launch_template_config__launch_template_specification struct {
		Launch_template_id   *string
		Launch_template_name *string
		Version              string
	}

	Ec2_fleet__launch_template_config__override struct {
		Availability_zone *string
		Instance_type     *string
		Max_price         *string
		Priority          *float64
		Subnet_id         *string
		Weighted_capacity *float64
	}

	Ec2_fleet__launch_template_config struct {
		Launch_template_specification []Ec2_fleet__launch_template_config__launch_template_specification
		Override                      *[]Ec2_fleet__launch_template_config__override
	}

	Ec2_fleet__on_demand_options struct {
		Allocation_strategy *string
	}

	Ec2_fleet__spot_options struct {
		Allocation_strategy            *string
		Instance_interruption_behavior *string
		Instance_pools_to_use_count    *int64
	}

	Ec2_fleet__target_capacity_specification struct {
		Default_target_capacity_type string
		On_demand_target_capacity    *int64
		Spot_target_capacity         *int64
		Total_target_capacity        int64
	}

	Ecs_service__deployment_controller struct {
		Type *string
	}

	Ecs_service__load_balancer struct {
		Container_name   string
		Container_port   int64
		Elb_name         *string
		Target_group_arn *string
	}

	Ecs_service__network_configuration struct {
		Assign_public_ip *bool
		Security_groups  *[]string
		Subnets          []string
	}

	Ecs_service__ordered_placement_strategy struct {
		Field *string
		Type  string
	}

	Ecs_service__placement_constraints struct {
		Expression *string
		Type       string
	}

	Ecs_service__placement_strategy struct {
		Field *string
		Type  string
	}

	Ecs_service__service_registries struct {
		Container_name *string
		Container_port *int64
		Port           *int64
		Registry_arn   string
	}

	Ecs_task_definition__placement_constraints struct {
		Expression *string
		Type       string
	}

	Ecs_task_definition__volume__docker_volume_configuration struct {
		Autoprovision *bool
		Driver        *string
		Driver_opts   *map[string]string
		Labels        *map[string]string
		Scope         *string
	}

	Ecs_task_definition__volume struct {
		Docker_volume_configuration *[]Ecs_task_definition__volume__docker_volume_configuration
		Host_path                   *string
		Name                        string
	}

	Eks_cluster__certificate_authority struct {
		Data *string
	}

	Eks_cluster__vpc_config struct {
		Security_group_ids *[]string
		Subnet_ids         []string
		Vpc_id             *string
	}

	Elastic_beanstalk_application__appversion_lifecycle struct {
		Delete_source_from_s3 *bool
		Max_age_in_days       *int64
		Max_count             *int64
		Service_role          string
	}

	Elastic_beanstalk_configuration_template__setting struct {
		Name      string
		Namespace string
		Resource  *string
		Value     string
	}

	Elastic_beanstalk_environment__all_settings struct {
		Name      string
		Namespace string
		Resource  *string
		Value     string
	}

	Elastic_beanstalk_environment__setting struct {
		Name      string
		Namespace string
		Resource  *string
		Value     string
	}

	Elasticache_cluster__cache_nodes struct {
		Address           *string
		Availability_zone *string
		Id                *string
		Port              *int64
	}

	Elasticache_parameter_group__parameter struct {
		Name  string
		Value string
	}

	Elasticache_replication_group__cluster_mode struct {
		Num_node_groups         int64
		Replicas_per_node_group int64
	}

	Elasticsearch_domain__cluster_config struct {
		Dedicated_master_count   *int64
		Dedicated_master_enabled *bool
		Dedicated_master_type    *string
		Instance_count           *int64
		Instance_type            *string
		Zone_awareness_enabled   *bool
	}

	Elasticsearch_domain__cognito_options struct {
		Enabled          *bool
		Identity_pool_id string
		Role_arn         string
		User_pool_id     string
	}

	Elasticsearch_domain__ebs_options struct {
		Ebs_enabled bool
		Iops        *int64
		Volume_size *int64
		Volume_type *string
	}

	Elasticsearch_domain__encrypt_at_rest struct {
		Enabled    bool
		Kms_key_id *string
	}

	Elasticsearch_domain__log_publishing_options struct {
		Cloudwatch_log_group_arn string
		Enabled                  *bool
		Log_type                 string
	}

	Elasticsearch_domain__node_to_node_encryption struct {
		Enabled bool
	}

	Elasticsearch_domain__snapshot_options struct {
		Automated_snapshot_start_hour int64
	}

	Elasticsearch_domain__vpc_options struct {
		Availability_zones *[]string
		Security_group_ids *[]string
		Subnet_ids         *[]string
		Vpc_id             *string
	}

	Elastictranscoder_pipeline__content_config struct {
		Bucket        *string
		Storage_class *string
	}

	Elastictranscoder_pipeline__content_config_permissions struct {
		Access       *[]string
		Grantee      *string
		Grantee_type *string
	}

	Elastictranscoder_pipeline__notifications struct {
		Completed   *string
		Error       *string
		Progressing *string
		Warning     *string
	}

	Elastictranscoder_pipeline__thumbnail_config struct {
		Bucket        *string
		Storage_class *string
	}

	Elastictranscoder_pipeline__thumbnail_config_permissions struct {
		Access       *[]string
		Grantee      *string
		Grantee_type *string
	}

	Elastictranscoder_preset__audio struct {
		Audio_packing_mode *string
		Bit_rate           *string
		Channels           *string
		Codec              *string
		Sample_rate        *string
	}

	Elastictranscoder_preset__audio_codec_options struct {
		Bit_depth *string
		Bit_order *string
		Profile   *string
		Signed    *string
	}

	Elastictranscoder_preset__thumbnails struct {
		Aspect_ratio   *string
		Format         *string
		Interval       *string
		Max_height     *string
		Max_width      *string
		Padding_policy *string
		Resolution     *string
		Sizing_policy  *string
	}

	Elastictranscoder_preset__video struct {
		Aspect_ratio         *string
		Bit_rate             *string
		Codec                *string
		Display_aspect_ratio *string
		Fixed_gop            *string
		Frame_rate           *string
		Keyframes_max_dist   *string
		Max_frame_rate       *string
		Max_height           *string
		Max_width            *string
		Padding_policy       *string
		Resolution           *string
		Sizing_policy        *string
	}

	Elastictranscoder_preset__video_watermarks struct {
		Horizontal_align  *string
		Horizontal_offset *string
		Id                *string
		Max_height        *string
		Max_width         *string
		Opacity           *string
		Sizing_policy     *string
		Target            *string
		Vertical_align    *string
		Vertical_offset   *string
	}

	Elb__access_logs struct {
		Bucket        string
		Bucket_prefix *string
		Enabled       *bool
		Interval      *int64
	}

	Elb__health_check struct {
		Healthy_threshold   int64
		Interval            int64
		Target              string
		Timeout             int64
		Unhealthy_threshold int64
	}

	Elb__listener struct {
		Instance_port      int64
		Instance_protocol  string
		Lb_port            int64
		Lb_protocol        string
		Ssl_certificate_id *string
	}

	Emr_cluster__bootstrap_action struct {
		Args *[]string
		Name string
		Path string
	}

	Emr_cluster__ec2_attributes struct {
		Additional_master_security_groups *string
		Additional_slave_security_groups  *string
		Emr_managed_master_security_group *string
		Emr_managed_slave_security_group  *string
		Instance_profile                  string
		Key_name                          *string
		Service_access_security_group     *string
		Subnet_id                         *string
	}

	Emr_cluster__instance_group__ebs_config struct {
		Iops                 *int64
		Size                 int64
		Type                 string
		Volumes_per_instance *int64
	}

	Emr_cluster__instance_group struct {
		Autoscaling_policy *string
		Bid_price          *string
		Ebs_config         *[]Emr_cluster__instance_group__ebs_config
		Id                 *string
		Instance_count     *int64
		Instance_role      string
		Instance_type      string
		Name               *string
	}

	Emr_cluster__kerberos_attributes struct {
		Ad_domain_join_password              *string
		Ad_domain_join_user                  *string
		Cross_realm_trust_principal_password *string
		Kdc_admin_password                   string
		Realm                                string
	}

	Emr_cluster__step__hadoop_jar_step struct {
		Args       *[]string
		Jar        string
		Main_class *string
		Properties *map[string]string
	}

	Emr_cluster__step struct {
		Action_on_failure string
		Hadoop_jar_step   []Emr_cluster__step__hadoop_jar_step
		Name              string
	}

	Emr_instance_group__ebs_config struct {
		Iops                 *int64
		Size                 int64
		Type                 string
		Volumes_per_instance *int64
	}

	Gamelift_alias__routing_strategy struct {
		Fleet_id *string
		Message  *string
		Type     string
	}

	Gamelift_build__storage_location struct {
		Bucket   string
		Key      string
		Role_arn string
	}

	Gamelift_fleet__ec2_inbound_permission struct {
		From_port int64
		Ip_range  string
		Protocol  string
		To_port   int64
	}

	Gamelift_fleet__resource_creation_limit_policy struct {
		New_game_sessions_per_creator *int64
		Policy_period_in_minutes      *int64
	}

	Gamelift_fleet__runtime_configuration__server_process struct {
		Concurrent_executions int64
		Launch_path           string
		Parameters            *string
	}

	Gamelift_fleet__runtime_configuration struct {
		Game_session_activation_timeout_seconds *int64
		Max_concurrent_game_session_activations *int64
		Server_process                          *[]Gamelift_fleet__runtime_configuration__server_process
	}

	Gamelift_game_session_queue__player_latency_policy struct {
		Maximum_individual_player_latency_milliseconds int64
		Policy_duration_seconds                        *int64
	}

	Glacier_vault__notification struct {
		Events    []string
		Sns_topic string
	}

	Globalaccelerator_accelerator__attributes struct {
		Flow_logs_enabled   *bool
		Flow_logs_s3_bucket *string
		Flow_logs_s3_prefix *string
	}

	Globalaccelerator_accelerator__ip_sets struct {
		Ip_addresses *[]string
		Ip_family    *string
	}

	Glue_catalog_table__partition_keys struct {
		Comment *string
		Name    string
		Type    *string
	}

	Glue_catalog_table__storage_descriptor__columns struct {
		Comment *string
		Name    string
		Type    *string
	}

	Glue_catalog_table__storage_descriptor__ser_de_info struct {
		Name                  *string
		Parameters            *map[string]string
		Serialization_library *string
	}

	Glue_catalog_table__storage_descriptor__skewed_info struct {
		Skewed_column_names               *[]string
		Skewed_column_value_location_maps *map[string]string
		Skewed_column_values              *[]string
	}

	Glue_catalog_table__storage_descriptor__sort_columns struct {
		Column     string
		Sort_order int64
	}

	Glue_catalog_table__storage_descriptor struct {
		Bucket_columns            *[]string
		Columns                   *[]Glue_catalog_table__storage_descriptor__columns
		Compressed                *bool
		Input_format              *string
		Location                  *string
		Number_of_buckets         *int64
		Output_format             *string
		Parameters                *map[string]string
		Ser_de_info               *[]Glue_catalog_table__storage_descriptor__ser_de_info
		Skewed_info               *[]Glue_catalog_table__storage_descriptor__skewed_info
		Sort_columns              *[]Glue_catalog_table__storage_descriptor__sort_columns
		Stored_as_sub_directories *bool
	}

	Glue_classifier__grok_classifier struct {
		Classification  string
		Custom_patterns *string
		Grok_pattern    string
	}

	Glue_classifier__json_classifier struct {
		Json_path string
	}

	Glue_classifier__xml_classifier struct {
		Classification string
		Row_tag        string
	}

	Glue_connection__physical_connection_requirements struct {
		Availability_zone      *string
		Security_group_id_list *[]string
		Subnet_id              *string
	}

	Glue_crawler__dynamodb_target struct {
		Path string
	}

	Glue_crawler__jdbc_target struct {
		Connection_name string
		Exclusions      *[]string
		Path            string
	}

	Glue_crawler__s3_target struct {
		Exclusions *[]string
		Path       string
	}

	Glue_crawler__schema_change_policy struct {
		Delete_behavior *string
		Update_behavior *string
	}

	Glue_job__command struct {
		Name            *string
		Script_location string
	}

	Glue_job__execution_property struct {
		Max_concurrent_runs *int64
	}

	Glue_security_configuration__encryption_configuration__cloudwatch_encryption struct {
		Cloudwatch_encryption_mode *string
		Kms_key_arn                *string
	}

	Glue_security_configuration__encryption_configuration__job_bookmarks_encryption struct {
		Job_bookmarks_encryption_mode *string
		Kms_key_arn                   *string
	}

	Glue_security_configuration__encryption_configuration__s3_encryption struct {
		Kms_key_arn        *string
		S3_encryption_mode *string
	}

	Glue_security_configuration__encryption_configuration struct {
		Cloudwatch_encryption    []Glue_security_configuration__encryption_configuration__cloudwatch_encryption
		Job_bookmarks_encryption []Glue_security_configuration__encryption_configuration__job_bookmarks_encryption
		S3_encryption            []Glue_security_configuration__encryption_configuration__s3_encryption
	}

	Glue_trigger__actions struct {
		Arguments *map[string]string
		Job_name  string
		Timeout   *int64
	}

	Glue_trigger__predicate__conditions struct {
		Job_name         string
		Logical_operator *string
		State            string
	}

	Glue_trigger__predicate struct {
		Conditions []Glue_trigger__predicate__conditions
		Logical    *string
	}

	Instance__credit_specification struct {
		Cpu_credits *string
	}

	Instance__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           string
		Encrypted             *bool
		Iops                  *int64
		Snapshot_id           *string
		Volume_id             *string
		Volume_size           *int64
		Volume_type           *string
	}

	Instance__ephemeral_block_device struct {
		Device_name  string
		No_device    *bool
		Virtual_name *string
	}

	Instance__network_interface struct {
		Delete_on_termination *bool
		Device_index          int64
		Network_interface_id  string
	}

	Instance__root_block_device struct {
		Delete_on_termination *bool
		Iops                  *int64
		Volume_id             *string
		Volume_size           *int64
		Volume_type           *string
	}

	Iot_thing_type__properties struct {
		Description           *string
		Searchable_attributes *[]string
	}

	Iot_topic_rule__cloudwatch_alarm struct {
		Alarm_name   string
		Role_arn     string
		State_reason string
		State_value  string
	}

	Iot_topic_rule__cloudwatch_metric struct {
		Metric_name      string
		Metric_namespace string
		Metric_timestamp *string
		Metric_unit      string
		Metric_value     string
		Role_arn         string
	}

	Iot_topic_rule__dynamodb struct {
		Hash_key_field  string
		Hash_key_type   *string
		Hash_key_value  string
		Payload_field   *string
		Range_key_field string
		Range_key_type  *string
		Range_key_value string
		Role_arn        string
		Table_name      string
	}

	Iot_topic_rule__elasticsearch struct {
		Endpoint string
		Id       string
		Index    string
		Role_arn string
		Type     string
	}

	Iot_topic_rule__firehose struct {
		Delivery_stream_name string
		Role_arn             string
		Separator            *string
	}

	Iot_topic_rule__kinesis struct {
		Partition_key *string
		Role_arn      string
		Stream_name   string
	}

	Iot_topic_rule__lambda struct {
		Function_arn string
	}

	Iot_topic_rule__republish struct {
		Role_arn string
		Topic    string
	}

	Iot_topic_rule__s3 struct {
		Bucket_name string
		Key         string
		Role_arn    string
	}

	Iot_topic_rule__sns struct {
		Message_format *string
		Role_arn       string
		Target_arn     string
	}

	Iot_topic_rule__sqs struct {
		Queue_url  string
		Role_arn   string
		Use_base64 bool
	}

	Kinesis_analytics_application__cloudwatch_logging_options struct {
		Id             *string
		Log_stream_arn string
		Role_arn       string
	}

	Kinesis_analytics_application__inputs__kinesis_firehose struct {
		Resource_arn string
		Role_arn     string
	}

	Kinesis_analytics_application__inputs__kinesis_stream struct {
		Resource_arn string
		Role_arn     string
	}

	Kinesis_analytics_application__inputs__parallelism struct {
		Count int64
	}

	Kinesis_analytics_application__inputs__processing_configuration__lambda struct {
		Resource_arn string
		Role_arn     string
	}

	Kinesis_analytics_application__inputs__processing_configuration struct {
		Lambda []Kinesis_analytics_application__inputs__processing_configuration__lambda
	}

	Kinesis_analytics_application__inputs__schema__record_columns struct {
		Mapping  *string
		Name     string
		Sql_type string
	}

	Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters__csv struct {
		Record_column_delimiter string
		Record_row_delimiter    string
	}

	Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters__json struct {
		Record_row_path string
	}

	Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters struct {
		Csv  *[]Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters__csv
		Json *[]Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters__json
	}

	Kinesis_analytics_application__inputs__schema__record_format struct {
		Mapping_parameters *[]Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters
		Record_format_type *string
	}

	Kinesis_analytics_application__inputs__schema struct {
		Record_columns  []Kinesis_analytics_application__inputs__schema__record_columns
		Record_encoding *string
		Record_format   []Kinesis_analytics_application__inputs__schema__record_format
	}

	Kinesis_analytics_application__inputs__starting_position_configuration struct {
		Starting_position *string
	}

	Kinesis_analytics_application__inputs struct {
		Id                              *string
		Kinesis_firehose                *[]Kinesis_analytics_application__inputs__kinesis_firehose
		Kinesis_stream                  *[]Kinesis_analytics_application__inputs__kinesis_stream
		Name_prefix                     string
		Parallelism                     *[]Kinesis_analytics_application__inputs__parallelism
		Processing_configuration        *[]Kinesis_analytics_application__inputs__processing_configuration
		Schema                          []Kinesis_analytics_application__inputs__schema
		Starting_position_configuration *[]Kinesis_analytics_application__inputs__starting_position_configuration
		Stream_names                    *[]string
	}

	Kinesis_analytics_application__outputs__kinesis_firehose struct {
		Resource_arn string
		Role_arn     string
	}

	Kinesis_analytics_application__outputs__kinesis_stream struct {
		Resource_arn string
		Role_arn     string
	}

	Kinesis_analytics_application__outputs__lambda struct {
		Resource_arn string
		Role_arn     string
	}

	Kinesis_analytics_application__outputs__schema struct {
		Record_format_type *string
	}

	Kinesis_analytics_application__outputs struct {
		Id               *string
		Kinesis_firehose *[]Kinesis_analytics_application__outputs__kinesis_firehose
		Kinesis_stream   *[]Kinesis_analytics_application__outputs__kinesis_stream
		Lambda           *[]Kinesis_analytics_application__outputs__lambda
		Name             string
		Schema           []Kinesis_analytics_application__outputs__schema
	}

	Kinesis_analytics_application__reference_data_sources__s3 struct {
		Bucket_arn string
		File_key   string
		Role_arn   string
	}

	Kinesis_analytics_application__reference_data_sources__schema__record_columns struct {
		Mapping  *string
		Name     string
		Sql_type string
	}

	Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters__csv struct {
		Record_column_delimiter string
		Record_row_delimiter    string
	}

	Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters__json struct {
		Record_row_path string
	}

	Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters struct {
		Csv  *[]Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters__csv
		Json *[]Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters__json
	}

	Kinesis_analytics_application__reference_data_sources__schema__record_format struct {
		Mapping_parameters *[]Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters
		Record_format_type *string
	}

	Kinesis_analytics_application__reference_data_sources__schema struct {
		Record_columns  []Kinesis_analytics_application__reference_data_sources__schema__record_columns
		Record_encoding *string
		Record_format   []Kinesis_analytics_application__reference_data_sources__schema__record_format
	}

	Kinesis_analytics_application__reference_data_sources struct {
		Id         *string
		S3         []Kinesis_analytics_application__reference_data_sources__s3
		Schema     []Kinesis_analytics_application__reference_data_sources__schema
		Table_name string
	}

	Kinesis_firehose_delivery_stream__elasticsearch_configuration__cloudwatch_logging_options struct {
		Enabled         *bool
		Log_group_name  *string
		Log_stream_name *string
	}

	Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration__processors__parameters struct {
		Parameter_name  string
		Parameter_value string
	}

	Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration__processors struct {
		Parameters *[]Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration__processors__parameters
		Type       string
	}

	Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration struct {
		Enabled    *bool
		Processors *[]Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration__processors
	}

	Kinesis_firehose_delivery_stream__elasticsearch_configuration struct {
		Buffering_interval         *int64
		Buffering_size             *int64
		Cloudwatch_logging_options *[]Kinesis_firehose_delivery_stream__elasticsearch_configuration__cloudwatch_logging_options
		Domain_arn                 string
		Index_name                 string
		Index_rotation_period      *string
		Processing_configuration   *[]Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration
		Retry_duration             *int64
		Role_arn                   string
		S3_backup_mode             *string
		Type_name                  *string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__cloudwatch_logging_options struct {
		Enabled         *bool
		Log_group_name  *string
		Log_stream_name *string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer__hive_json_ser_de struct {
		Timestamp_formats *[]string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer__open_x_json_ser_de struct {
		Case_insensitive                         *bool
		Column_to_json_key_mappings              *map[string]string
		Convert_dots_in_json_keys_to_underscores *bool
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer struct {
		Hive_json_ser_de   *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer__hive_json_ser_de
		Open_x_json_ser_de *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer__open_x_json_ser_de
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration struct {
		Deserializer []Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer__orc_ser_de struct {
		Block_size_bytes                        *int64
		Bloom_filter_columns                    *[]string
		Bloom_filter_false_positive_probability *float64
		Compression                             *string
		Dictionary_key_threshold                *float64
		Enable_padding                          *bool
		Format_version                          *string
		Padding_tolerance                       *float64
		Row_index_stride                        *int64
		Stripe_size_bytes                       *int64
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer__parquet_ser_de struct {
		Block_size_bytes              *int64
		Compression                   *string
		Enable_dictionary_compression *bool
		Max_padding_bytes             *int64
		Page_size_bytes               *int64
		Writer_version                *string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer struct {
		Orc_ser_de     *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer__orc_ser_de
		Parquet_ser_de *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer__parquet_ser_de
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration struct {
		Serializer []Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__schema_configuration struct {
		Catalog_id    *string
		Database_name string
		Region        *string
		Role_arn      string
		Table_name    string
		Version_id    *string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration struct {
		Enabled                     *bool
		Input_format_configuration  []Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration
		Output_format_configuration []Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration
		Schema_configuration        []Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__schema_configuration
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration__processors__parameters struct {
		Parameter_name  string
		Parameter_value string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration__processors struct {
		Parameters *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration__processors__parameters
		Type       string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration struct {
		Enabled    *bool
		Processors *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration__processors
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__s3_backup_configuration__cloudwatch_logging_options struct {
		Enabled         *bool
		Log_group_name  *string
		Log_stream_name *string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration__s3_backup_configuration struct {
		Bucket_arn                 string
		Buffer_interval            *int64
		Buffer_size                *int64
		Cloudwatch_logging_options *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__s3_backup_configuration__cloudwatch_logging_options
		Compression_format         *string
		Kms_key_arn                *string
		Prefix                     *string
		Role_arn                   string
	}

	Kinesis_firehose_delivery_stream__extended_s3_configuration struct {
		Bucket_arn                           string
		Buffer_interval                      *int64
		Buffer_size                          *int64
		Cloudwatch_logging_options           *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__cloudwatch_logging_options
		Compression_format                   *string
		Data_format_conversion_configuration *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration
		Error_output_prefix                  *string
		Kms_key_arn                          *string
		Prefix                               *string
		Processing_configuration             *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration
		Role_arn                             string
		S3_backup_configuration              *[]Kinesis_firehose_delivery_stream__extended_s3_configuration__s3_backup_configuration
		S3_backup_mode                       *string
	}

	Kinesis_firehose_delivery_stream__kinesis_source_configuration struct {
		Kinesis_stream_arn string
		Role_arn           string
	}

	Kinesis_firehose_delivery_stream__redshift_configuration__cloudwatch_logging_options struct {
		Enabled         *bool
		Log_group_name  *string
		Log_stream_name *string
	}

	Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration__processors__parameters struct {
		Parameter_name  string
		Parameter_value string
	}

	Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration__processors struct {
		Parameters *[]Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration__processors__parameters
		Type       string
	}

	Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration struct {
		Enabled    *bool
		Processors *[]Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration__processors
	}

	Kinesis_firehose_delivery_stream__redshift_configuration__s3_backup_configuration__cloudwatch_logging_options struct {
		Enabled         *bool
		Log_group_name  *string
		Log_stream_name *string
	}

	Kinesis_firehose_delivery_stream__redshift_configuration__s3_backup_configuration struct {
		Bucket_arn                 string
		Buffer_interval            *int64
		Buffer_size                *int64
		Cloudwatch_logging_options *[]Kinesis_firehose_delivery_stream__redshift_configuration__s3_backup_configuration__cloudwatch_logging_options
		Compression_format         *string
		Kms_key_arn                *string
		Prefix                     *string
		Role_arn                   string
	}

	Kinesis_firehose_delivery_stream__redshift_configuration struct {
		Cloudwatch_logging_options *[]Kinesis_firehose_delivery_stream__redshift_configuration__cloudwatch_logging_options
		Cluster_jdbcurl            string
		Copy_options               *string
		Data_table_columns         *string
		Data_table_name            string
		Password                   string
		Processing_configuration   *[]Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration
		Retry_duration             *int64
		Role_arn                   string
		S3_backup_configuration    *[]Kinesis_firehose_delivery_stream__redshift_configuration__s3_backup_configuration
		S3_backup_mode             *string
		Username                   string
	}

	Kinesis_firehose_delivery_stream__s3_configuration__cloudwatch_logging_options struct {
		Enabled         *bool
		Log_group_name  *string
		Log_stream_name *string
	}

	Kinesis_firehose_delivery_stream__s3_configuration struct {
		Bucket_arn                 string
		Buffer_interval            *int64
		Buffer_size                *int64
		Cloudwatch_logging_options *[]Kinesis_firehose_delivery_stream__s3_configuration__cloudwatch_logging_options
		Compression_format         *string
		Kms_key_arn                *string
		Prefix                     *string
		Role_arn                   string
	}

	Kinesis_firehose_delivery_stream__splunk_configuration__cloudwatch_logging_options struct {
		Enabled         *bool
		Log_group_name  *string
		Log_stream_name *string
	}

	Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration__processors__parameters struct {
		Parameter_name  string
		Parameter_value string
	}

	Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration__processors struct {
		Parameters *[]Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration__processors__parameters
		Type       string
	}

	Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration struct {
		Enabled    *bool
		Processors *[]Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration__processors
	}

	Kinesis_firehose_delivery_stream__splunk_configuration struct {
		Cloudwatch_logging_options *[]Kinesis_firehose_delivery_stream__splunk_configuration__cloudwatch_logging_options
		Hec_acknowledgment_timeout *int64
		Hec_endpoint               string
		Hec_endpoint_type          *string
		Hec_token                  string
		Processing_configuration   *[]Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration
		Retry_duration             *int64
		S3_backup_mode             *string
	}

	Kms_grant__constraints struct {
		Encryption_context_equals *map[string]string
		Encryption_context_subset *map[string]string
	}

	Lambda_alias__routing_config struct {
		Additional_version_weights *map[string]float64
	}

	Lambda_function__dead_letter_config struct {
		Target_arn string
	}

	Lambda_function__environment struct {
		Variables *map[string]string
	}

	Lambda_function__tracing_config struct {
		Mode string
	}

	Lambda_function__vpc_config struct {
		Security_group_ids []string
		Subnet_ids         []string
		Vpc_id             *string
	}

	Launch_configuration__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           string
		Encrypted             *bool
		Iops                  *int64
		No_device             *bool
		Snapshot_id           *string
		Volume_size           *int64
		Volume_type           *string
	}

	Launch_configuration__ephemeral_block_device struct {
		Device_name  string
		Virtual_name string
	}

	Launch_configuration__root_block_device struct {
		Delete_on_termination *bool
		Iops                  *int64
		Volume_size           *int64
		Volume_type           *string
	}

	Launch_template__block_device_mappings__ebs struct {
		Delete_on_termination *string
		Encrypted             *string
		Iops                  *int64
		Kms_key_id            *string
		Snapshot_id           *string
		Volume_size           *int64
		Volume_type           *string
	}

	Launch_template__block_device_mappings struct {
		Device_name  *string
		Ebs          *[]Launch_template__block_device_mappings__ebs
		No_device    *string
		Virtual_name *string
	}

	Launch_template__capacity_reservation_specification__capacity_reservation_target struct {
		Capacity_reservation_id *string
	}

	Launch_template__capacity_reservation_specification struct {
		Capacity_reservation_preference *string
		Capacity_reservation_target     *[]Launch_template__capacity_reservation_specification__capacity_reservation_target
	}

	Launch_template__credit_specification struct {
		Cpu_credits *string
	}

	Launch_template__elastic_gpu_specifications struct {
		Type string
	}

	Launch_template__iam_instance_profile struct {
		Arn  *string
		Name *string
	}

	Launch_template__instance_market_options__spot_options struct {
		Block_duration_minutes         *int64
		Instance_interruption_behavior *string
		Max_price                      *string
		Spot_instance_type             *string
		Valid_until                    *time.Time
	}

	Launch_template__instance_market_options struct {
		Market_type  *string
		Spot_options *[]Launch_template__instance_market_options__spot_options
	}

	Launch_template__license_specification struct {
		License_configuration_arn string
	}

	Launch_template__monitoring struct {
		Enabled *bool
	}

	Launch_template__network_interfaces struct {
		Associate_public_ip_address *bool
		Delete_on_termination       *bool
		Description                 *string
		Device_index                *int64
		Ipv4_address_count          *int64
		Ipv4_addresses              *[]string
		Ipv6_address_count          *int64
		Ipv6_addresses              *[]string
		Network_interface_id        *string
		Private_ip_address          *string
		Security_groups             *[]string
		Subnet_id                   *string
	}

	Launch_template__placement struct {
		Affinity          *string
		Availability_zone *string
		Group_name        *string
		Host_id           *string
		Spread_domain     *string
		Tenancy           *string
	}

	Launch_template__tag_specifications struct {
		Resource_type *string
		Tags          *map[string]string
	}

	Lb__access_logs struct {
		Bucket  string
		Enabled *bool
		Prefix  *string
	}

	Lb__subnet_mapping struct {
		Allocation_id *string
		Subnet_id     string
	}

	Lb_listener__default_action__authenticate_cognito struct {
		Authentication_request_extra_params *map[string]string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		User_pool_arn                       string
		User_pool_client_id                 string
		User_pool_domain                    string
	}

	Lb_listener__default_action__authenticate_oidc struct {
		Authentication_request_extra_params *map[string]string
		Authorization_endpoint              string
		Client_id                           string
		Client_secret                       string
		Issuer                              string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		Token_endpoint                      string
		User_info_endpoint                  string
	}

	Lb_listener__default_action__fixed_response struct {
		Content_type string
		Message_body *string
		Status_code  *string
	}

	Lb_listener__default_action__redirect struct {
		Host        *string
		Path        *string
		Port        *string
		Protocol    *string
		Query       *string
		Status_code string
	}

	Lb_listener__default_action struct {
		Authenticate_cognito *[]Lb_listener__default_action__authenticate_cognito
		Authenticate_oidc    *[]Lb_listener__default_action__authenticate_oidc
		Fixed_response       *[]Lb_listener__default_action__fixed_response
		Order                *int64
		Redirect             *[]Lb_listener__default_action__redirect
		Target_group_arn     *string
		Type                 string
	}

	Lb_listener_rule__action__authenticate_cognito struct {
		Authentication_request_extra_params *map[string]string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		User_pool_arn                       string
		User_pool_client_id                 string
		User_pool_domain                    string
	}

	Lb_listener_rule__action__authenticate_oidc struct {
		Authentication_request_extra_params *map[string]string
		Authorization_endpoint              string
		Client_id                           string
		Client_secret                       string
		Issuer                              string
		On_unauthenticated_request          *string
		Scope                               *string
		Session_cookie_name                 *string
		Session_timeout                     *int64
		Token_endpoint                      string
		User_info_endpoint                  string
	}

	Lb_listener_rule__action__fixed_response struct {
		Content_type string
		Message_body *string
		Status_code  *string
	}

	Lb_listener_rule__action__redirect struct {
		Host        *string
		Path        *string
		Port        *string
		Protocol    *string
		Query       *string
		Status_code string
	}

	Lb_listener_rule__action struct {
		Authenticate_cognito *[]Lb_listener_rule__action__authenticate_cognito
		Authenticate_oidc    *[]Lb_listener_rule__action__authenticate_oidc
		Fixed_response       *[]Lb_listener_rule__action__fixed_response
		Order                *int64
		Redirect             *[]Lb_listener_rule__action__redirect
		Target_group_arn     *string
		Type                 string
	}

	Lb_listener_rule__condition struct {
		Field  *string
		Values *[]string
	}

	Lb_ssl_negotiation_policy__attribute struct {
		Name  string
		Value string
	}

	Lb_target_group__health_check struct {
		Healthy_threshold   *int64
		Interval            *int64
		Matcher             *string
		Path                *string
		Port                *string
		Protocol            *string
		Timeout             *int64
		Unhealthy_threshold *int64
	}

	Lb_target_group__stickiness struct {
		Cookie_duration *int64
		Enabled         *bool
		Type            string
	}

	Load_balancer_policy__policy_attribute struct {
		Name  *string
		Value *string
	}

	Macie_s3_bucket_association__classification_type struct {
		Continuous *string
		One_time   *string
	}

	Media_package_channel__hls_ingest__ingest_endpoints struct {
		Password *string
		Url      *string
		Username *string
	}

	Media_package_channel__hls_ingest struct {
		Ingest_endpoints *[]Media_package_channel__hls_ingest__ingest_endpoints
	}

	Mq_broker__configuration struct {
		Id       *string
		Revision *int64
	}

	Mq_broker__instances struct {
		Console_url *string
		Endpoints   *[]string
		Ip_address  *string
	}

	Mq_broker__logs struct {
		Audit   *bool
		General *bool
	}

	Mq_broker__maintenance_window_start_time struct {
		Day_of_week string
		Time_of_day string
		Time_zone   string
	}

	Mq_broker__user struct {
		Console_access *bool
		Groups         *[]string
		Password       string
		Username       string
	}

	Neptune_cluster_parameter_group__parameter struct {
		Apply_method *string
		Name         string
		Value        string
	}

	Neptune_parameter_group__parameter struct {
		Apply_method *string
		Name         string
		Value        string
	}

	Network_acl__egress struct {
		Action          string
		Cidr_block      *string
		From_port       int64
		Icmp_code       *int64
		Icmp_type       *int64
		Ipv6_cidr_block *string
		Protocol        string
		Rule_no         int64
		To_port         int64
	}

	Network_acl__ingress struct {
		Action          string
		Cidr_block      *string
		From_port       int64
		Icmp_code       *int64
		Icmp_type       *int64
		Ipv6_cidr_block *string
		Protocol        string
		Rule_no         int64
		To_port         int64
	}

	Network_interface__attachment struct {
		Attachment_id *string
		Device_index  int64
		Instance      string
	}

	Opsworks_application__app_source struct {
		Password *string
		Revision *string
		Ssh_key  *string
		Type     string
		Url      *string
		Username *string
	}

	Opsworks_application__environment struct {
		Key    string
		Secure *bool
		Value  string
	}

	Opsworks_application__ssl_configuration struct {
		Certificate string
		Chain       *string
		Private_key string
	}

	Opsworks_custom_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_ganglia_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_haproxy_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_instance__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           string
		Iops                  *int64
		Snapshot_id           *string
		Volume_size           *int64
		Volume_type           *string
	}

	Opsworks_instance__ephemeral_block_device struct {
		Device_name  string
		Virtual_name string
	}

	Opsworks_instance__root_block_device struct {
		Delete_on_termination *bool
		Iops                  *int64
		Volume_size           *int64
		Volume_type           *string
	}

	Opsworks_java_app_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_memcached_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_mysql_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_nodejs_app_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_php_app_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_rails_app_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Opsworks_stack__custom_cookbooks_source struct {
		Password *string
		Revision *string
		Ssh_key  *string
		Type     string
		Url      string
		Username *string
	}

	Opsworks_static_web_layer__ebs_volume struct {
		Iops            *int64
		Mount_point     string
		Number_of_disks int64
		Raid_level      *string
		Size            int64
		Type            *string
	}

	Pinpoint_app__campaign_hook struct {
		Lambda_function_name *string
		Mode                 *string
		Web_url              *string
	}

	Pinpoint_app__limits struct {
		Daily               *int64
		Maximum_duration    *int64
		Messages_per_second *int64
		Total               *int64
	}

	Pinpoint_app__quiet_time struct {
		End   *string
		Start *string
	}

	Rds_cluster__s3_import struct {
		Bucket_name           string
		Bucket_prefix         *string
		Ingestion_role        string
		Source_engine         string
		Source_engine_version string
	}

	Rds_cluster__scaling_configuration struct {
		Auto_pause               *bool
		Max_capacity             *int64
		Min_capacity             *int64
		Seconds_until_auto_pause *int64
	}

	Rds_cluster_parameter_group__parameter struct {
		Apply_method *string
		Name         string
		Value        string
	}

	Redshift_cluster__logging struct {
		Bucket_name   *string
		Enable        bool
		S3_key_prefix *string
	}

	Redshift_cluster__snapshot_copy struct {
		Destination_region string
		Grant_name         *string
		Retention_period   *int64
	}

	Redshift_parameter_group__parameter struct {
		Name  string
		Value string
	}

	Redshift_security_group__ingress struct {
		Cidr                    *string
		Security_group_name     *string
		Security_group_owner_id *string
	}

	Resourcegroups_group__resource_query struct {
		Query string
		Type  *string
	}

	Route53_record__alias struct {
		Evaluate_target_health bool
		Name                   string
		Zone_id                string
	}

	Route53_record__failover_routing_policy struct {
		Type string
	}

	Route53_record__geolocation_routing_policy struct {
		Continent   *string
		Country     *string
		Subdivision *string
	}

	Route53_record__latency_routing_policy struct {
		Region string
	}

	Route53_record__weighted_routing_policy struct {
		Weight int64
	}

	Route53_zone__vpc struct {
		Vpc_id     string
		Vpc_region *string
	}

	Route_table__route struct {
		Cidr_block                *string
		Egress_only_gateway_id    *string
		Gateway_id                *string
		Instance_id               *string
		Ipv6_cidr_block           *string
		Nat_gateway_id            *string
		Network_interface_id      *string
		Transit_gateway_id        *string
		Vpc_peering_connection_id *string
	}

	S3_bucket__cors_rule struct {
		Allowed_headers *[]string
		Allowed_methods []string
		Allowed_origins []string
		Expose_headers  *[]string
		Max_age_seconds *int64
	}

	S3_bucket__lifecycle_rule__expiration struct {
		Date                         *string
		Days                         *int64
		Expired_object_delete_marker *bool
	}

	S3_bucket__lifecycle_rule__noncurrent_version_expiration struct {
		Days *int64
	}

	S3_bucket__lifecycle_rule__noncurrent_version_transition struct {
		Days          *int64
		Storage_class string
	}

	S3_bucket__lifecycle_rule__transition struct {
		Date          *string
		Days          *int64
		Storage_class string
	}

	S3_bucket__lifecycle_rule struct {
		Abort_incomplete_multipart_upload_days *int64
		Enabled                                bool
		Expiration                             *[]S3_bucket__lifecycle_rule__expiration
		Id                                     *string
		Noncurrent_version_expiration          *[]S3_bucket__lifecycle_rule__noncurrent_version_expiration
		Noncurrent_version_transition          *[]S3_bucket__lifecycle_rule__noncurrent_version_transition
		Prefix                                 *string
		Tags                                   *map[string]string
		Transition                             *[]S3_bucket__lifecycle_rule__transition
	}

	S3_bucket__logging struct {
		Target_bucket string
		Target_prefix *string
	}

	S3_bucket__object_lock_configuration__rule__default_retention struct {
		Days  *int64
		Mode  string
		Years *int64
	}

	S3_bucket__object_lock_configuration__rule struct {
		Default_retention []S3_bucket__object_lock_configuration__rule__default_retention
	}

	S3_bucket__object_lock_configuration struct {
		Object_lock_enabled string
		Rule                *[]S3_bucket__object_lock_configuration__rule
	}

	S3_bucket__replication_configuration__rules__destination__access_control_translation struct {
		Owner string
	}

	S3_bucket__replication_configuration__rules__destination struct {
		Access_control_translation *[]S3_bucket__replication_configuration__rules__destination__access_control_translation
		Account_id                 *string
		Bucket                     string
		Replica_kms_key_id         *string
		Storage_class              *string
	}

	S3_bucket__replication_configuration__rules__filter struct {
		Prefix *string
		Tags   *map[string]string
	}

	S3_bucket__replication_configuration__rules__source_selection_criteria__sse_kms_encrypted_objects struct {
		Enabled bool
	}

	S3_bucket__replication_configuration__rules__source_selection_criteria struct {
		Sse_kms_encrypted_objects *[]S3_bucket__replication_configuration__rules__source_selection_criteria__sse_kms_encrypted_objects
	}

	S3_bucket__replication_configuration__rules struct {
		Destination               []S3_bucket__replication_configuration__rules__destination
		Filter                    *[]S3_bucket__replication_configuration__rules__filter
		Id                        *string
		Prefix                    *string
		Priority                  *int64
		Source_selection_criteria *[]S3_bucket__replication_configuration__rules__source_selection_criteria
		Status                    string
	}

	S3_bucket__replication_configuration struct {
		Role  string
		Rules []S3_bucket__replication_configuration__rules
	}

	S3_bucket__server_side_encryption_configuration__rule__apply_server_side_encryption_by_default struct {
		Kms_master_key_id *string
		Sse_algorithm     string
	}

	S3_bucket__server_side_encryption_configuration__rule struct {
		Apply_server_side_encryption_by_default []S3_bucket__server_side_encryption_configuration__rule__apply_server_side_encryption_by_default
	}

	S3_bucket__server_side_encryption_configuration struct {
		Rule []S3_bucket__server_side_encryption_configuration__rule
	}

	S3_bucket__versioning struct {
		Enabled    *bool
		Mfa_delete *bool
	}

	S3_bucket__website struct {
		Error_document           *string
		Index_document           *string
		Redirect_all_requests_to *string
		Routing_rules            *string
	}

	S3_bucket_inventory__destination__bucket__encryption__sse_kms struct {
		Key_id string
	}

	S3_bucket_inventory__destination__bucket__encryption__sse_s3 struct {
	}

	S3_bucket_inventory__destination__bucket__encryption struct {
		Sse_kms *[]S3_bucket_inventory__destination__bucket__encryption__sse_kms
		Sse_s3  *[]S3_bucket_inventory__destination__bucket__encryption__sse_s3
	}

	S3_bucket_inventory__destination__bucket struct {
		Account_id *string
		Bucket_arn string
		Encryption *[]S3_bucket_inventory__destination__bucket__encryption
		Format     string
		Prefix     *string
	}

	S3_bucket_inventory__destination struct {
		Bucket []S3_bucket_inventory__destination__bucket
	}

	S3_bucket_inventory__filter struct {
		Prefix *string
	}

	S3_bucket_inventory__schedule struct {
		Frequency string
	}

	S3_bucket_metric__filter struct {
		Prefix *string
		Tags   *map[string]string
	}

	S3_bucket_notification__lambda_function struct {
		Events              []string
		Filter_prefix       *string
		Filter_suffix       *string
		Id                  *string
		Lambda_function_arn *string
	}

	S3_bucket_notification__queue struct {
		Events        []string
		Filter_prefix *string
		Filter_suffix *string
		Id            *string
		Queue_arn     string
	}

	S3_bucket_notification__topic struct {
		Events        []string
		Filter_prefix *string
		Filter_suffix *string
		Id            *string
		Topic_arn     string
	}

	Secretsmanager_secret__rotation_rules struct {
		Automatically_after_days int64
	}

	Security_group__egress struct {
		Cidr_blocks      *[]string
		Description      *string
		From_port        int64
		Ipv6_cidr_blocks *[]string
		Prefix_list_ids  *[]string
		Protocol         string
		Security_groups  *[]string
		Self             *bool
		To_port          int64
	}

	Security_group__ingress struct {
		Cidr_blocks      *[]string
		Description      *string
		From_port        int64
		Ipv6_cidr_blocks *[]string
		Prefix_list_ids  *[]string
		Protocol         string
		Security_groups  *[]string
		Self             *bool
		To_port          int64
	}

	Service_discovery_service__dns_config__dns_records struct {
		Ttl  int64
		Type string
	}

	Service_discovery_service__dns_config struct {
		Dns_records    []Service_discovery_service__dns_config__dns_records
		Namespace_id   string
		Routing_policy *string
	}

	Service_discovery_service__health_check_config struct {
		Failure_threshold *int64
		Resource_path     *string
		Type              *string
	}

	Service_discovery_service__health_check_custom_config struct {
		Failure_threshold *int64
	}

	Ses_event_destination__cloudwatch_destination struct {
		Default_value  string
		Dimension_name string
		Value_source   string
	}

	Ses_event_destination__kinesis_destination struct {
		Role_arn   string
		Stream_arn string
	}

	Ses_event_destination__sns_destination struct {
		Topic_arn string
	}

	Ses_receipt_rule__add_header_action struct {
		Header_name  string
		Header_value string
		Position     int64
	}

	Ses_receipt_rule__bounce_action struct {
		Message         string
		Position        int64
		Sender          string
		Smtp_reply_code string
		Status_code     *string
		Topic_arn       *string
	}

	Ses_receipt_rule__lambda_action struct {
		Function_arn    string
		Invocation_type *string
		Position        int64
		Topic_arn       *string
	}

	Ses_receipt_rule__s3_action struct {
		Bucket_name       string
		Kms_key_arn       *string
		Object_key_prefix *string
		Position          int64
		Topic_arn         *string
	}

	Ses_receipt_rule__sns_action struct {
		Position  int64
		Topic_arn string
	}

	Ses_receipt_rule__stop_action struct {
		Position  int64
		Scope     string
		Topic_arn *string
	}

	Ses_receipt_rule__workmail_action struct {
		Organization_arn string
		Position         int64
		Topic_arn        *string
	}

	Spot_fleet_request__launch_specification__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           string
		Encrypted             *bool
		Iops                  *int64
		Snapshot_id           *string
		Volume_size           *int64
		Volume_type           *string
	}

	Spot_fleet_request__launch_specification__ephemeral_block_device struct {
		Device_name  string
		Virtual_name string
	}

	Spot_fleet_request__launch_specification__root_block_device struct {
		Delete_on_termination *bool
		Iops                  *int64
		Volume_size           *int64
		Volume_type           *string
	}

	Spot_fleet_request__launch_specification struct {
		Ami                         string
		Associate_public_ip_address *bool
		Availability_zone           *string
		Ebs_block_device            *[]Spot_fleet_request__launch_specification__ebs_block_device
		Ebs_optimized               *bool
		Ephemeral_block_device      *[]Spot_fleet_request__launch_specification__ephemeral_block_device
		Iam_instance_profile        *string
		Iam_instance_profile_arn    *string
		Instance_type               string
		Key_name                    *string
		Monitoring                  *bool
		Placement_group             *string
		Placement_tenancy           *string
		Root_block_device           *[]Spot_fleet_request__launch_specification__root_block_device
		Spot_price                  *string
		Subnet_id                   *string
		Tags                        *map[string]string
		User_data                   *string
		Vpc_security_group_ids      *[]string
		Weighted_capacity           *string
	}

	Spot_instance_request__credit_specification struct {
		Cpu_credits *string
	}

	Spot_instance_request__ebs_block_device struct {
		Delete_on_termination *bool
		Device_name           string
		Encrypted             *bool
		Iops                  *int64
		Snapshot_id           *string
		Volume_id             *string
		Volume_size           *int64
		Volume_type           *string
	}

	Spot_instance_request__ephemeral_block_device struct {
		Device_name  string
		No_device    *bool
		Virtual_name *string
	}

	Spot_instance_request__network_interface struct {
		Delete_on_termination *bool
		Device_index          int64
		Network_interface_id  string
	}

	Spot_instance_request__root_block_device struct {
		Delete_on_termination *bool
		Iops                  *int64
		Volume_id             *string
		Volume_size           *int64
		Volume_type           *string
	}

	Ssm_association__output_location struct {
		S3_bucket_name string
		S3_key_prefix  *string
	}

	Ssm_association__targets struct {
		Key    string
		Values []string
	}

	Ssm_document__parameter struct {
		Default_value *string
		Description   *string
		Name          *string
		Type          *string
	}

	Ssm_document__permissions struct {
		Account_ids string
		Type        string
	}

	Ssm_maintenance_window_target__targets struct {
		Key    string
		Values []string
	}

	Ssm_maintenance_window_task__logging_info struct {
		S3_bucket_name   string
		S3_bucket_prefix *string
		S3_region        string
	}

	Ssm_maintenance_window_task__targets struct {
		Key    string
		Values []string
	}

	Ssm_maintenance_window_task__task_parameters struct {
		Name   string
		Values []string
	}

	Ssm_patch_baseline__approval_rule__patch_filter struct {
		Key    string
		Values []string
	}

	Ssm_patch_baseline__approval_rule struct {
		Approve_after_days  int64
		Compliance_level    *string
		Enable_non_security *bool
		Patch_filter        []Ssm_patch_baseline__approval_rule__patch_filter
	}

	Ssm_patch_baseline__global_filter struct {
		Key    string
		Values []string
	}

	Ssm_resource_data_sync__s3_destination struct {
		Bucket_name string
		Kms_key_arn *string
		Prefix      *string
		Region      string
		Sync_format *string
	}

	Storagegateway_gateway__smb_active_directory_settings struct {
		Domain_name string
		Password    string
		Username    string
	}

	Storagegateway_nfs_file_share__nfs_file_share_defaults struct {
		Directory_mode *string
		File_mode      *string
		Group_id       *int64
		Owner_id       *int64
	}

	Vpc_endpoint__dns_entry struct {
		Dns_name       *string
		Hosted_zone_id *string
	}

	Vpc_peering_connection__accepter struct {
		Allow_classic_link_to_remote_vpc *bool
		Allow_remote_vpc_dns_resolution  *bool
		Allow_vpc_to_remote_classic_link *bool
	}

	Vpc_peering_connection__requester struct {
		Allow_classic_link_to_remote_vpc *bool
		Allow_remote_vpc_dns_resolution  *bool
		Allow_vpc_to_remote_classic_link *bool
	}

	Vpc_peering_connection_accepter__accepter struct {
		Allow_classic_link_to_remote_vpc *bool
		Allow_remote_vpc_dns_resolution  *bool
		Allow_vpc_to_remote_classic_link *bool
	}

	Vpc_peering_connection_accepter__requester struct {
		Allow_classic_link_to_remote_vpc *bool
		Allow_remote_vpc_dns_resolution  *bool
		Allow_vpc_to_remote_classic_link *bool
	}

	Vpc_peering_connection_options__accepter struct {
		Allow_classic_link_to_remote_vpc *bool
		Allow_remote_vpc_dns_resolution  *bool
		Allow_vpc_to_remote_classic_link *bool
	}

	Vpc_peering_connection_options__requester struct {
		Allow_classic_link_to_remote_vpc *bool
		Allow_remote_vpc_dns_resolution  *bool
		Allow_vpc_to_remote_classic_link *bool
	}

	Vpn_connection__routes struct {
		Destination_cidr_block *string
		Source                 *string
		State                  *string
	}

	Vpn_connection__vgw_telemetry struct {
		Accepted_route_count *int64
		Last_status_change   *string
		Outside_ip_address   *string
		Status               *string
		Status_message       *string
	}

	Waf_byte_match_set__byte_match_tuples__field_to_match struct {
		Data *string
		Type string
	}

	Waf_byte_match_set__byte_match_tuples struct {
		Field_to_match        []Waf_byte_match_set__byte_match_tuples__field_to_match
		Positional_constraint string
		Target_string         *string
		Text_transformation   string
	}

	Waf_geo_match_set__geo_match_constraint struct {
		Type  string
		Value string
	}

	Waf_ipset__ip_set_descriptors struct {
		Type  string
		Value string
	}

	Waf_rate_based_rule__predicates struct {
		Data_id string
		Negated bool
		Type    string
	}

	Waf_regex_match_set__regex_match_tuple__field_to_match struct {
		Data *string
		Type string
	}

	Waf_regex_match_set__regex_match_tuple struct {
		Field_to_match       []Waf_regex_match_set__regex_match_tuple__field_to_match
		Regex_pattern_set_id string
		Text_transformation  string
	}

	Waf_rule__predicates struct {
		Data_id string
		Negated bool
		Type    string
	}

	Waf_rule_group__activated_rule__action struct {
		Type string
	}

	Waf_rule_group__activated_rule struct {
		Action   []Waf_rule_group__activated_rule__action
		Priority int64
		Rule_id  string
		Type     *string
	}

	Waf_size_constraint_set__size_constraints__field_to_match struct {
		Data *string
		Type string
	}

	Waf_size_constraint_set__size_constraints struct {
		Comparison_operator string
		Field_to_match      []Waf_size_constraint_set__size_constraints__field_to_match
		Size                int64
		Text_transformation string
	}

	Waf_sql_injection_match_set__sql_injection_match_tuples__field_to_match struct {
		Data *string
		Type string
	}

	Waf_sql_injection_match_set__sql_injection_match_tuples struct {
		Field_to_match      []Waf_sql_injection_match_set__sql_injection_match_tuples__field_to_match
		Text_transformation string
	}

	Waf_web_acl__default_action struct {
		Type string
	}

	Waf_web_acl__rules__action struct {
		Type string
	}

	Waf_web_acl__rules__override_action struct {
		Type string
	}

	Waf_web_acl__rules struct {
		Action          *[]Waf_web_acl__rules__action
		Override_action *[]Waf_web_acl__rules__override_action
		Priority        int64
		Rule_id         string
		Type            *string
	}

	Waf_xss_match_set__xss_match_tuples__field_to_match struct {
		Data *string
		Type string
	}

	Waf_xss_match_set__xss_match_tuples struct {
		Field_to_match      []Waf_xss_match_set__xss_match_tuples__field_to_match
		Text_transformation string
	}

	Wafregional_byte_match_set__byte_match_tuple__field_to_match struct {
		Data *string
		Type string
	}

	Wafregional_byte_match_set__byte_match_tuple struct {
		Field_to_match        []Wafregional_byte_match_set__byte_match_tuple__field_to_match
		Positional_constraint string
		Target_string         *string
		Text_transformation   string
	}

	Wafregional_byte_match_set__byte_match_tuples__field_to_match struct {
		Data *string
		Type string
	}

	Wafregional_byte_match_set__byte_match_tuples struct {
		Field_to_match        []Wafregional_byte_match_set__byte_match_tuples__field_to_match
		Positional_constraint string
		Target_string         *string
		Text_transformation   string
	}

	Wafregional_geo_match_set__geo_match_constraint struct {
		Type  string
		Value string
	}

	Wafregional_ipset__ip_set_descriptor struct {
		Type  string
		Value string
	}

	Wafregional_rate_based_rule__predicate struct {
		Data_id string
		Negated bool
		Type    string
	}

	Wafregional_regex_match_set__regex_match_tuple__field_to_match struct {
		Data *string
		Type string
	}

	Wafregional_regex_match_set__regex_match_tuple struct {
		Field_to_match       []Wafregional_regex_match_set__regex_match_tuple__field_to_match
		Regex_pattern_set_id string
		Text_transformation  string
	}

	Wafregional_rule__predicate struct {
		Data_id string
		Negated bool
		Type    string
	}

	Wafregional_rule_group__activated_rule__action struct {
		Type string
	}

	Wafregional_rule_group__activated_rule struct {
		Action   []Wafregional_rule_group__activated_rule__action
		Priority int64
		Rule_id  string
		Type     *string
	}

	Wafregional_size_constraint_set__size_constraints__field_to_match struct {
		Data *string
		Type string
	}

	Wafregional_size_constraint_set__size_constraints struct {
		Comparison_operator string
		Field_to_match      []Wafregional_size_constraint_set__size_constraints__field_to_match
		Size                int64
		Text_transformation string
	}

	Wafregional_sql_injection_match_set__sql_injection_match_tuple__field_to_match struct {
		Data *string
		Type string
	}

	Wafregional_sql_injection_match_set__sql_injection_match_tuple struct {
		Field_to_match      []Wafregional_sql_injection_match_set__sql_injection_match_tuple__field_to_match
		Text_transformation string
	}

	Wafregional_web_acl__default_action struct {
		Type string
	}

	Wafregional_web_acl__rule__action struct {
		Type string
	}

	Wafregional_web_acl__rule__override_action struct {
		Type string
	}

	Wafregional_web_acl__rule struct {
		Action          *[]Wafregional_web_acl__rule__action
		Override_action *[]Wafregional_web_acl__rule__override_action
		Priority        int64
		Rule_id         string
		Type            *string
	}

	Wafregional_xss_match_set__xss_match_tuple__field_to_match struct {
		Data *string
		Type string
	}

	Wafregional_xss_match_set__xss_match_tuple struct {
		Field_to_match      []Wafregional_xss_match_set__xss_match_tuple__field_to_match
		Text_transformation string
	}
)

func Initialize(sb *service.Builder, p *schema.Provider) {
	// Generic handler API
	sb.RegisterAPI("TerraformAws::GenericHandler", bridge.NewTFHandler(nil, "", nil))

	// Registration of resource types with handler
	var rt px.Type
	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Acm_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("acm_certificateID", "arn", "domain_name", "domain_validation_options", "subject_alternative_names", "validation_emails", "validation_method")
		b.ImmutableAttributes("domain_name", "subject_alternative_names", "validation_method")
	}))[0]
	sb.RegisterHandler("TerraformAws::Acm_certificateHandler", bridge.NewTFHandler(p, "aws_acm_certificate", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Acm_certificate_validation{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("acm_certificate_validationID")
		b.ImmutableAttributes("certificate_arn", "validation_record_fqdns")
	}))[0]
	sb.RegisterHandler("TerraformAws::Acm_certificate_validationHandler", bridge.NewTFHandler(p, "aws_acm_certificate_validation", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Acmpca_certificate_authority{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("acmpca_certificate_authorityID", "arn", "certificate", "certificate_chain", "certificate_signing_request", "not_after", "not_before", "serial", "status")
	}))[0]
	sb.RegisterHandler("TerraformAws::Acmpca_certificate_authorityHandler", bridge.NewTFHandler(p, "aws_acmpca_certificate_authority", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Alb{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("albID", "access_logs", "arn", "arn_suffix", "dns_name", "internal", "ip_address_type", "name", "security_groups", "subnet_mapping", "subnets", "vpc_id", "zone_id")
		b.ImmutableAttributes("internal", "load_balancer_type", "name", "name_prefix", "subnet_mapping")
	}))[0]
	sb.RegisterHandler("TerraformAws::AlbHandler", bridge.NewTFHandler(p, "aws_alb", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Alb_listener{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("alb_listenerID", "arn", "ssl_policy")
		b.ImmutableAttributes("load_balancer_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Alb_listenerHandler", bridge.NewTFHandler(p, "aws_alb_listener", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Alb_listener_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("alb_listener_certificateID")
		b.ImmutableAttributes("certificate_arn", "listener_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Alb_listener_certificateHandler", bridge.NewTFHandler(p, "aws_alb_listener_certificate", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Alb_listener_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("alb_listener_ruleID", "arn", "priority")
		b.ImmutableAttributes("listener_arn", "priority")
	}))[0]
	sb.RegisterHandler("TerraformAws::Alb_listener_ruleHandler", bridge.NewTFHandler(p, "aws_alb_listener_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Alb_target_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("alb_target_groupID", "arn", "arn_suffix", "health_check", "name", "stickiness")
		b.ImmutableAttributes("name", "name_prefix", "port", "protocol", "target_type", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Alb_target_groupHandler", bridge.NewTFHandler(p, "aws_alb_target_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Alb_target_group_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("alb_target_group_attachmentID")
		b.ImmutableAttributes("availability_zone", "port", "target_group_arn", "target_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Alb_target_group_attachmentHandler", bridge.NewTFHandler(p, "aws_alb_target_group_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ami{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("amiID", "ebs_block_device", "ephemeral_block_device", "image_location", "manage_ebs_snapshots", "root_snapshot_id")
		b.ImmutableAttributes("architecture", "ena_support", "ephemeral_block_device", "image_location", "kernel_id", "manage_ebs_snapshots", "name", "ramdisk_id", "root_device_name", "sriov_net_support", "virtualization_type")
	}))[0]
	sb.RegisterHandler("TerraformAws::AmiHandler", bridge.NewTFHandler(p, "aws_ami", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ami_copy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ami_copyID", "architecture", "ebs_block_device", "ena_support", "ephemeral_block_device", "image_location", "kernel_id", "kms_key_id", "manage_ebs_snapshots", "ramdisk_id", "root_device_name", "root_snapshot_id", "sriov_net_support", "virtualization_type")
		b.ImmutableAttributes("encrypted", "ephemeral_block_device", "kms_key_id", "manage_ebs_snapshots", "name", "source_ami_id", "source_ami_region")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ami_copyHandler", bridge.NewTFHandler(p, "aws_ami_copy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ami_from_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ami_from_instanceID", "architecture", "ebs_block_device", "ena_support", "ephemeral_block_device", "image_location", "kernel_id", "manage_ebs_snapshots", "ramdisk_id", "root_device_name", "root_snapshot_id", "sriov_net_support", "virtualization_type")
		b.ImmutableAttributes("ephemeral_block_device", "manage_ebs_snapshots", "name", "snapshot_without_reboot", "source_instance_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ami_from_instanceHandler", bridge.NewTFHandler(p, "aws_ami_from_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ami_launch_permission{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ami_launch_permissionID")
		b.ImmutableAttributes("account_id", "image_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ami_launch_permissionHandler", bridge.NewTFHandler(p, "aws_ami_launch_permission", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_accountID", "throttle_settings")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_accountHandler", bridge.NewTFHandler(p, "aws_api_gateway_account", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_api_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_api_keyID", "created_date", "last_updated_date", "value")
		b.ImmutableAttributes("name", "value")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_api_keyHandler", bridge.NewTFHandler(p, "aws_api_gateway_api_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_authorizer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_authorizerID")
		b.ImmutableAttributes("rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_authorizerHandler", bridge.NewTFHandler(p, "aws_api_gateway_authorizer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_base_path_mapping{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_base_path_mappingID")
		b.ImmutableAttributes("api_id", "base_path", "domain_name", "stage_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_base_path_mappingHandler", bridge.NewTFHandler(p, "aws_api_gateway_base_path_mapping", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_client_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_client_certificateID", "created_date", "expiration_date", "pem_encoded_certificate")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_client_certificateHandler", bridge.NewTFHandler(p, "aws_api_gateway_client_certificate", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_deployment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_deploymentID", "created_date", "execution_arn", "invoke_url")
		b.ImmutableAttributes("rest_api_id", "stage_description", "stage_name", "variables")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_deploymentHandler", bridge.NewTFHandler(p, "aws_api_gateway_deployment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_documentation_part{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_documentation_partID")
		b.ImmutableAttributes("location", "rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_documentation_partHandler", bridge.NewTFHandler(p, "aws_api_gateway_documentation_part", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_documentation_version{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_documentation_versionID")
		b.ImmutableAttributes("rest_api_id", "version")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_documentation_versionHandler", bridge.NewTFHandler(p, "aws_api_gateway_documentation_version", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_domain_name{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_domain_nameID", "certificate_upload_date", "cloudfront_domain_name", "cloudfront_zone_id", "endpoint_configuration", "regional_domain_name", "regional_zone_id")
		b.ImmutableAttributes("certificate_body", "certificate_chain", "certificate_private_key", "domain_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_domain_nameHandler", bridge.NewTFHandler(p, "aws_api_gateway_domain_name", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_gateway_response{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_gateway_responseID")
		b.ImmutableAttributes("response_type", "rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_gateway_responseHandler", bridge.NewTFHandler(p, "aws_api_gateway_gateway_response", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_integration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_integrationID", "cache_namespace", "passthrough_behavior")
		b.ImmutableAttributes("credentials", "http_method", "integration_http_method", "passthrough_behavior", "resource_id", "rest_api_id", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_integrationHandler", bridge.NewTFHandler(p, "aws_api_gateway_integration", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_integration_response{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_integration_responseID")
		b.ImmutableAttributes("http_method", "resource_id", "rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_integration_responseHandler", bridge.NewTFHandler(p, "aws_api_gateway_integration_response", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_method{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_methodID")
		b.ImmutableAttributes("http_method", "resource_id", "rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_methodHandler", bridge.NewTFHandler(p, "aws_api_gateway_method", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_method_response{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_method_responseID")
		b.ImmutableAttributes("http_method", "resource_id", "rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_method_responseHandler", bridge.NewTFHandler(p, "aws_api_gateway_method_response", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_method_settings{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_method_settingsID")
		b.ImmutableAttributes("method_path", "rest_api_id", "stage_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_method_settingsHandler", bridge.NewTFHandler(p, "aws_api_gateway_method_settings", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_model{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_modelID")
		b.ImmutableAttributes("content_type", "name", "rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_modelHandler", bridge.NewTFHandler(p, "aws_api_gateway_model", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_request_validator{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_request_validatorID")
		b.ImmutableAttributes("rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_request_validatorHandler", bridge.NewTFHandler(p, "aws_api_gateway_request_validator", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_resource{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_resourceID", "path")
		b.ImmutableAttributes("rest_api_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_resourceHandler", bridge.NewTFHandler(p, "aws_api_gateway_resource", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_rest_api{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_rest_apiID", "created_date", "endpoint_configuration", "execution_arn", "root_resource_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_rest_apiHandler", bridge.NewTFHandler(p, "aws_api_gateway_rest_api", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_stage{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_stageID", "execution_arn", "invoke_url")
		b.ImmutableAttributes("rest_api_id", "stage_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_stageHandler", bridge.NewTFHandler(p, "aws_api_gateway_stage", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_usage_plan{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_usage_planID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_usage_planHandler", bridge.NewTFHandler(p, "aws_api_gateway_usage_plan", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_usage_plan_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_usage_plan_keyID", "name", "value")
		b.ImmutableAttributes("key_id", "key_type", "usage_plan_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_usage_plan_keyHandler", bridge.NewTFHandler(p, "aws_api_gateway_usage_plan_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Api_gateway_vpc_link{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_gateway_vpc_linkID")
		b.ImmutableAttributes("target_arns")
	}))[0]
	sb.RegisterHandler("TerraformAws::Api_gateway_vpc_linkHandler", bridge.NewTFHandler(p, "aws_api_gateway_vpc_link", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&App_cookie_stickiness_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("app_cookie_stickiness_policyID")
		b.ImmutableAttributes("cookie_name", "lb_port", "load_balancer", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::App_cookie_stickiness_policyHandler", bridge.NewTFHandler(p, "aws_app_cookie_stickiness_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appautoscaling_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appautoscaling_policyID", "arn")
		b.ImmutableAttributes("alarms", "name", "scalable_dimension", "service_namespace")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appautoscaling_policyHandler", bridge.NewTFHandler(p, "aws_appautoscaling_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appautoscaling_scheduled_action{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appautoscaling_scheduled_actionID", "arn")
		b.ImmutableAttributes("end_time", "name", "resource_id", "scalable_dimension", "scalable_target_action", "schedule", "service_namespace", "start_time")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appautoscaling_scheduled_actionHandler", bridge.NewTFHandler(p, "aws_appautoscaling_scheduled_action", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appautoscaling_target{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appautoscaling_targetID", "role_arn")
		b.ImmutableAttributes("resource_id", "scalable_dimension", "service_namespace")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appautoscaling_targetHandler", bridge.NewTFHandler(p, "aws_appautoscaling_target", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appmesh_mesh{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appmesh_meshID", "arn", "created_date", "last_updated_date")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appmesh_meshHandler", bridge.NewTFHandler(p, "aws_appmesh_mesh", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appmesh_route{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appmesh_routeID", "arn", "created_date", "last_updated_date")
		b.ImmutableAttributes("mesh_name", "name", "virtual_router_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appmesh_routeHandler", bridge.NewTFHandler(p, "aws_appmesh_route", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appmesh_virtual_node{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appmesh_virtual_nodeID", "arn", "created_date", "last_updated_date")
		b.ImmutableAttributes("mesh_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appmesh_virtual_nodeHandler", bridge.NewTFHandler(p, "aws_appmesh_virtual_node", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appmesh_virtual_router{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appmesh_virtual_routerID", "arn", "created_date", "last_updated_date")
		b.ImmutableAttributes("mesh_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appmesh_virtual_routerHandler", bridge.NewTFHandler(p, "aws_appmesh_virtual_router", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appsync_api_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appsync_api_keyID", "key")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appsync_api_keyHandler", bridge.NewTFHandler(p, "aws_appsync_api_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appsync_datasource{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appsync_datasourceID", "arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appsync_datasourceHandler", bridge.NewTFHandler(p, "aws_appsync_datasource", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Appsync_graphql_api{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("appsync_graphql_apiID", "arn", "uris")
	}))[0]
	sb.RegisterHandler("TerraformAws::Appsync_graphql_apiHandler", bridge.NewTFHandler(p, "aws_appsync_graphql_api", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Athena_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("athena_databaseID")
		b.ImmutableAttributes("bucket", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Athena_databaseHandler", bridge.NewTFHandler(p, "aws_athena_database", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Athena_named_query{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("athena_named_queryID")
		b.ImmutableAttributes("database", "description", "name", "query")
	}))[0]
	sb.RegisterHandler("TerraformAws::Athena_named_queryHandler", bridge.NewTFHandler(p, "aws_athena_named_query", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Autoscaling_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("autoscaling_attachmentID")
		b.ImmutableAttributes("alb_target_group_arn", "autoscaling_group_name", "elb")
	}))[0]
	sb.RegisterHandler("TerraformAws::Autoscaling_attachmentHandler", bridge.NewTFHandler(p, "aws_autoscaling_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Autoscaling_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("autoscaling_groupID", "arn", "availability_zones", "default_cooldown", "desired_capacity", "health_check_type", "load_balancers", "name", "service_linked_role_arn", "target_group_arns", "vpc_zone_identifier")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Autoscaling_groupHandler", bridge.NewTFHandler(p, "aws_autoscaling_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Autoscaling_lifecycle_hook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("autoscaling_lifecycle_hookID", "default_result")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Autoscaling_lifecycle_hookHandler", bridge.NewTFHandler(p, "aws_autoscaling_lifecycle_hook", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Autoscaling_notification{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("autoscaling_notificationID")
		b.ImmutableAttributes("topic_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Autoscaling_notificationHandler", bridge.NewTFHandler(p, "aws_autoscaling_notification", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Autoscaling_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("autoscaling_policyID", "arn", "metric_aggregation_type")
		b.ImmutableAttributes("autoscaling_group_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Autoscaling_policyHandler", bridge.NewTFHandler(p, "aws_autoscaling_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Autoscaling_schedule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("autoscaling_scheduleID", "arn", "desired_capacity", "end_time", "max_size", "min_size", "recurrence", "start_time")
		b.ImmutableAttributes("autoscaling_group_name", "scheduled_action_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Autoscaling_scheduleHandler", bridge.NewTFHandler(p, "aws_autoscaling_schedule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Batch_compute_environment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("batch_compute_environmentID", "arn", "ecc_cluster_arn", "ecs_cluster_arn", "status", "status_reason")
		b.ImmutableAttributes("compute_environment_name", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Batch_compute_environmentHandler", bridge.NewTFHandler(p, "aws_batch_compute_environment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Batch_job_definition{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("batch_job_definitionID", "arn", "revision")
		b.ImmutableAttributes("container_properties", "name", "parameters", "retry_strategy", "timeout", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Batch_job_definitionHandler", bridge.NewTFHandler(p, "aws_batch_job_definition", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Batch_job_queue{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("batch_job_queueID", "arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Batch_job_queueHandler", bridge.NewTFHandler(p, "aws_batch_job_queue", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Budgets_budget{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("budgets_budgetID", "account_id", "cost_filters", "cost_types", "name", "name_prefix")
		b.ImmutableAttributes("account_id", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Budgets_budgetHandler", bridge.NewTFHandler(p, "aws_budgets_budget", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloud9_environment_ec2{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloud9_environment_ec2ID", "arn", "owner_arn", "type")
		b.ImmutableAttributes("automatic_stop_time_minutes", "instance_type", "owner_arn", "subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloud9_environment_ec2Handler", bridge.NewTFHandler(p, "aws_cloud9_environment_ec2", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudformation_stack{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudformation_stackID", "outputs", "parameters", "policy_body", "template_body")
		b.ImmutableAttributes("disable_rollback", "name", "on_failure", "timeout_in_minutes")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudformation_stackHandler", bridge.NewTFHandler(p, "aws_cloudformation_stack", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudfront_distribution{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudfront_distributionID", "active_trusted_signers", "arn", "caller_reference", "domain_name", "etag", "hosted_zone_id", "in_progress_validation_batches", "last_modified_time", "status")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudfront_distributionHandler", bridge.NewTFHandler(p, "aws_cloudfront_distribution", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudfront_origin_access_identity{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudfront_origin_access_identityID", "caller_reference", "cloudfront_access_identity_path", "etag", "iam_arn", "s3_canonical_user_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudfront_origin_access_identityHandler", bridge.NewTFHandler(p, "aws_cloudfront_origin_access_identity", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudfront_public_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudfront_public_keyID", "caller_reference", "etag", "name", "name_prefix")
		b.ImmutableAttributes("encoded_key", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudfront_public_keyHandler", bridge.NewTFHandler(p, "aws_cloudfront_public_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudhsm_v2_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudhsm_v2_clusterID", "cluster_certificates", "cluster_id", "cluster_state", "security_group_id", "vpc_id")
		b.ImmutableAttributes("hsm_type", "source_backup_identifier", "subnet_ids")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudhsm_v2_clusterHandler", bridge.NewTFHandler(p, "aws_cloudhsm_v2_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudhsm_v2_hsm{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudhsm_v2_hsmID", "availability_zone", "hsm_eni_id", "hsm_id", "hsm_state", "ip_address", "subnet_id")
		b.ImmutableAttributes("availability_zone", "cluster_id", "ip_address", "subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudhsm_v2_hsmHandler", bridge.NewTFHandler(p, "aws_cloudhsm_v2_hsm", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudtrail{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudtrailID", "arn", "home_region")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::CloudtrailHandler", bridge.NewTFHandler(p, "aws_cloudtrail", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_dashboard{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_dashboardID", "dashboard_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_dashboardHandler", bridge.NewTFHandler(p, "aws_cloudwatch_dashboard", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_event_permission{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_event_permissionID")
		b.ImmutableAttributes("statement_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_event_permissionHandler", bridge.NewTFHandler(p, "aws_cloudwatch_event_permission", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_event_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_event_ruleID", "arn", "name")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_event_ruleHandler", bridge.NewTFHandler(p, "aws_cloudwatch_event_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_event_target{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_event_targetID", "target_id")
		b.ImmutableAttributes("rule", "target_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_event_targetHandler", bridge.NewTFHandler(p, "aws_cloudwatch_event_target", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_log_destination{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_log_destinationID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_log_destinationHandler", bridge.NewTFHandler(p, "aws_cloudwatch_log_destination", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_log_destination_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_log_destination_policyID")
		b.ImmutableAttributes("destination_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_log_destination_policyHandler", bridge.NewTFHandler(p, "aws_cloudwatch_log_destination_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_log_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_log_groupID", "arn", "name")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_log_groupHandler", bridge.NewTFHandler(p, "aws_cloudwatch_log_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_log_metric_filter{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_log_metric_filterID")
		b.ImmutableAttributes("log_group_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_log_metric_filterHandler", bridge.NewTFHandler(p, "aws_cloudwatch_log_metric_filter", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_log_resource_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_log_resource_policyID")
		b.ImmutableAttributes("policy_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_log_resource_policyHandler", bridge.NewTFHandler(p, "aws_cloudwatch_log_resource_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_log_stream{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_log_streamID", "arn")
		b.ImmutableAttributes("log_group_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_log_streamHandler", bridge.NewTFHandler(p, "aws_cloudwatch_log_stream", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_log_subscription_filter{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_log_subscription_filterID", "role_arn")
		b.ImmutableAttributes("destination_arn", "log_group_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_log_subscription_filterHandler", bridge.NewTFHandler(p, "aws_cloudwatch_log_subscription_filter", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cloudwatch_metric_alarm{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudwatch_metric_alarmID", "arn", "evaluate_low_sample_count_percentiles")
		b.ImmutableAttributes("alarm_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cloudwatch_metric_alarmHandler", bridge.NewTFHandler(p, "aws_cloudwatch_metric_alarm", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codebuild_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codebuild_projectID", "arn", "badge_url", "description", "encryption_key")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codebuild_projectHandler", bridge.NewTFHandler(p, "aws_codebuild_project", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codebuild_webhook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codebuild_webhookID", "payload_url", "secret", "url")
		b.ImmutableAttributes("project_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codebuild_webhookHandler", bridge.NewTFHandler(p, "aws_codebuild_webhook", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codecommit_repository{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codecommit_repositoryID", "arn", "clone_url_http", "clone_url_ssh", "repository_id")
		b.ImmutableAttributes("repository_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codecommit_repositoryHandler", bridge.NewTFHandler(p, "aws_codecommit_repository", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codecommit_trigger{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codecommit_triggerID", "configuration_id")
		b.ImmutableAttributes("repository_name", "trigger")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codecommit_triggerHandler", bridge.NewTFHandler(p, "aws_codecommit_trigger", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codedeploy_app{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codedeploy_appID", "unique_id")
		b.ImmutableAttributes("compute_platform", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codedeploy_appHandler", bridge.NewTFHandler(p, "aws_codedeploy_app", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codedeploy_deployment_config{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codedeploy_deployment_configID", "deployment_config_id")
		b.ImmutableAttributes("compute_platform", "deployment_config_name", "minimum_healthy_hosts", "traffic_routing_config")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codedeploy_deployment_configHandler", bridge.NewTFHandler(p, "aws_codedeploy_deployment_config", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codedeploy_deployment_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codedeploy_deployment_groupID", "blue_green_deployment_config", "deployment_style", "load_balancer_info")
		b.ImmutableAttributes("deployment_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codedeploy_deployment_groupHandler", bridge.NewTFHandler(p, "aws_codedeploy_deployment_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codepipeline{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codepipelineID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::CodepipelineHandler", bridge.NewTFHandler(p, "aws_codepipeline", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Codepipeline_webhook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("codepipeline_webhookID", "url")
		b.ImmutableAttributes("authentication", "authentication_configuration", "filter", "name", "target_action", "target_pipeline")
	}))[0]
	sb.RegisterHandler("TerraformAws::Codepipeline_webhookHandler", bridge.NewTFHandler(p, "aws_codepipeline_webhook", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_identity_pool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_identity_poolID", "arn")
		b.ImmutableAttributes("developer_provider_name", "identity_pool_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_identity_poolHandler", bridge.NewTFHandler(p, "aws_cognito_identity_pool", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_identity_pool_roles_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_identity_pool_roles_attachmentID")
		b.ImmutableAttributes("identity_pool_id", "roles")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_identity_pool_roles_attachmentHandler", bridge.NewTFHandler(p, "aws_cognito_identity_pool_roles_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_identity_provider{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_identity_providerID")
		b.ImmutableAttributes("user_pool_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_identity_providerHandler", bridge.NewTFHandler(p, "aws_cognito_identity_provider", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_resource_server{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_resource_serverID", "scope_identifiers")
		b.ImmutableAttributes("identifier", "name", "user_pool_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_resource_serverHandler", bridge.NewTFHandler(p, "aws_cognito_resource_server", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_user_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_user_groupID")
		b.ImmutableAttributes("name", "user_pool_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_user_groupHandler", bridge.NewTFHandler(p, "aws_cognito_user_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_user_pool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_user_poolID", "admin_create_user_config", "arn", "creation_date", "email_verification_message", "email_verification_subject", "endpoint", "lambda_config", "last_modified_date", "password_policy", "verification_message_template")
		b.ImmutableAttributes("alias_attributes", "name", "schema", "username_attributes")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_user_poolHandler", bridge.NewTFHandler(p, "aws_cognito_user_pool", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_user_pool_client{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_user_pool_clientID", "client_secret")
		b.ImmutableAttributes("generate_secret", "user_pool_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_user_pool_clientHandler", bridge.NewTFHandler(p, "aws_cognito_user_pool_client", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Cognito_user_pool_domain{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognito_user_pool_domainID", "aws_account_id", "cloudfront_distribution_arn", "s3_bucket", "version")
		b.ImmutableAttributes("certificate_arn", "domain", "user_pool_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Cognito_user_pool_domainHandler", bridge.NewTFHandler(p, "aws_cognito_user_pool_domain", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Config_aggregate_authorization{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("config_aggregate_authorizationID", "arn")
		b.ImmutableAttributes("account_id", "region")
	}))[0]
	sb.RegisterHandler("TerraformAws::Config_aggregate_authorizationHandler", bridge.NewTFHandler(p, "aws_config_aggregate_authorization", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Config_config_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("config_config_ruleID", "arn", "rule_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Config_config_ruleHandler", bridge.NewTFHandler(p, "aws_config_config_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Config_configuration_aggregator{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("config_configuration_aggregatorID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Config_configuration_aggregatorHandler", bridge.NewTFHandler(p, "aws_config_configuration_aggregator", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Config_configuration_recorder{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("config_configuration_recorderID", "recording_group")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Config_configuration_recorderHandler", bridge.NewTFHandler(p, "aws_config_configuration_recorder", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Config_configuration_recorder_status{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("config_configuration_recorder_statusID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Config_configuration_recorder_statusHandler", bridge.NewTFHandler(p, "aws_config_configuration_recorder_status", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Config_delivery_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("config_delivery_channelID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Config_delivery_channelHandler", bridge.NewTFHandler(p, "aws_config_delivery_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Customer_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("customer_gatewayID")
		b.ImmutableAttributes("bgp_asn", "ip_address", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Customer_gatewayHandler", bridge.NewTFHandler(p, "aws_customer_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Datasync_agent{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("datasync_agentID", "activation_key", "arn", "ip_address")
		b.ImmutableAttributes("activation_key", "ip_address")
	}))[0]
	sb.RegisterHandler("TerraformAws::Datasync_agentHandler", bridge.NewTFHandler(p, "aws_datasync_agent", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Datasync_location_efs{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("datasync_location_efsID", "arn", "uri")
		b.ImmutableAttributes("ec2_config", "efs_file_system_arn", "subdirectory")
	}))[0]
	sb.RegisterHandler("TerraformAws::Datasync_location_efsHandler", bridge.NewTFHandler(p, "aws_datasync_location_efs", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Datasync_location_nfs{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("datasync_location_nfsID", "arn", "uri")
		b.ImmutableAttributes("on_prem_config", "server_hostname", "subdirectory")
	}))[0]
	sb.RegisterHandler("TerraformAws::Datasync_location_nfsHandler", bridge.NewTFHandler(p, "aws_datasync_location_nfs", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Datasync_location_s3{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("datasync_location_s3ID", "arn", "uri")
		b.ImmutableAttributes("s3_bucket_arn", "s3_config", "subdirectory")
	}))[0]
	sb.RegisterHandler("TerraformAws::Datasync_location_s3Handler", bridge.NewTFHandler(p, "aws_datasync_location_s3", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Datasync_task{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("datasync_taskID", "arn")
		b.ImmutableAttributes("cloudwatch_log_group_arn", "destination_location_arn", "source_location_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Datasync_taskHandler", bridge.NewTFHandler(p, "aws_datasync_task", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dax_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dax_clusterID", "arn", "cluster_address", "configuration_endpoint", "maintenance_window", "nodes", "parameter_group_name", "port", "security_group_ids", "subnet_group_name")
		b.ImmutableAttributes("availability_zones", "cluster_name", "iam_role_arn", "node_type", "subnet_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dax_clusterHandler", bridge.NewTFHandler(p, "aws_dax_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dax_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dax_parameter_groupID", "parameters")
		b.ImmutableAttributes("description", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dax_parameter_groupHandler", bridge.NewTFHandler(p, "aws_dax_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dax_subnet_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dax_subnet_groupID", "vpc_id")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dax_subnet_groupHandler", bridge.NewTFHandler(p, "aws_dax_subnet_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_cluster_snapshot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_cluster_snapshotID", "allocated_storage", "availability_zones", "db_cluster_snapshot_arn", "engine", "engine_version", "kms_key_id", "license_model", "port", "snapshot_type", "source_db_cluster_snapshot_arn", "status", "storage_encrypted", "vpc_id")
		b.ImmutableAttributes("db_cluster_identifier", "db_cluster_snapshot_identifier")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_cluster_snapshotHandler", bridge.NewTFHandler(p, "aws_db_cluster_snapshot", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_event_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_event_subscriptionID", "arn", "customer_aws_id", "name")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_event_subscriptionHandler", bridge.NewTFHandler(p, "aws_db_event_subscription", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_instanceID", "address", "allocated_storage", "apply_immediately", "arn", "availability_zone", "backup_retention_period", "backup_window", "ca_cert_identifier", "character_set_name", "db_subnet_group_name", "endpoint", "engine", "engine_version", "hosted_zone_id", "identifier", "identifier_prefix", "kms_key_id", "license_model", "maintenance_window", "monitoring_role_arn", "multi_az", "name", "option_group_name", "parameter_group_name", "port", "replicas", "resource_id", "status", "storage_type", "timezone", "username", "vpc_security_group_ids")
		b.ImmutableAttributes("availability_zone", "character_set_name", "engine", "identifier", "identifier_prefix", "kms_key_id", "name", "snapshot_identifier", "storage_encrypted", "timezone", "username")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_instanceHandler", bridge.NewTFHandler(p, "aws_db_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_option_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_option_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("engine_name", "major_engine_version", "name", "name_prefix", "option_group_description")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_option_groupHandler", bridge.NewTFHandler(p, "aws_db_option_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_parameter_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("description", "family", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_parameter_groupHandler", bridge.NewTFHandler(p, "aws_db_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_security_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_security_groupID", "arn")
		b.ImmutableAttributes("description", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_security_groupHandler", bridge.NewTFHandler(p, "aws_db_security_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_snapshot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_snapshotID", "allocated_storage", "availability_zone", "db_snapshot_arn", "encrypted", "engine", "engine_version", "iops", "kms_key_id", "license_model", "option_group_name", "port", "snapshot_type", "source_db_snapshot_identifier", "source_region", "status", "storage_type", "vpc_id")
		b.ImmutableAttributes("db_instance_identifier", "db_snapshot_identifier")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_snapshotHandler", bridge.NewTFHandler(p, "aws_db_snapshot", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Db_subnet_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("db_subnet_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Db_subnet_groupHandler", bridge.NewTFHandler(p, "aws_db_subnet_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Default_network_acl{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("default_network_aclID", "owner_id", "vpc_id")
		b.ImmutableAttributes("default_network_acl_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Default_network_aclHandler", bridge.NewTFHandler(p, "aws_default_network_acl", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Default_route_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("default_route_tableID", "owner_id", "route", "vpc_id")
		b.ImmutableAttributes("default_route_table_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Default_route_tableHandler", bridge.NewTFHandler(p, "aws_default_route_table", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Default_security_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("default_security_groupID", "arn", "name", "owner_id", "vpc_id")
		b.ImmutableAttributes("vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Default_security_groupHandler", bridge.NewTFHandler(p, "aws_default_security_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Default_subnet{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("default_subnetID", "arn", "assign_ipv6_address_on_creation", "availability_zone_id", "cidr_block", "ipv6_cidr_block", "ipv6_cidr_block_association_id", "map_public_ip_on_launch", "owner_id", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Default_subnetHandler", bridge.NewTFHandler(p, "aws_default_subnet", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Default_vpc{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("default_vpcID", "arn", "assign_generated_ipv6_cidr_block", "cidr_block", "default_network_acl_id", "default_route_table_id", "default_security_group_id", "dhcp_options_id", "enable_classiclink", "enable_classiclink_dns_support", "enable_dns_hostnames", "instance_tenancy", "ipv6_association_id", "ipv6_cidr_block", "main_route_table_id", "owner_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Default_vpcHandler", bridge.NewTFHandler(p, "aws_default_vpc", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Default_vpc_dhcp_options{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("default_vpc_dhcp_optionsID", "domain_name", "domain_name_servers", "ntp_servers", "owner_id")
		b.ImmutableAttributes("netbios_name_servers", "netbios_node_type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Default_vpc_dhcp_optionsHandler", bridge.NewTFHandler(p, "aws_default_vpc_dhcp_options", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Devicefarm_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("devicefarm_projectID", "arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Devicefarm_projectHandler", bridge.NewTFHandler(p, "aws_devicefarm_project", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Directory_service_conditional_forwarder{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("directory_service_conditional_forwarderID")
		b.ImmutableAttributes("directory_id", "remote_domain_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Directory_service_conditional_forwarderHandler", bridge.NewTFHandler(p, "aws_directory_service_conditional_forwarder", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Directory_service_directory{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("directory_service_directoryID", "access_url", "alias", "dns_ip_addresses", "edition", "security_group_id", "short_name", "size")
		b.ImmutableAttributes("alias", "connect_settings", "description", "edition", "name", "password", "short_name", "size", "type", "vpc_settings")
	}))[0]
	sb.RegisterHandler("TerraformAws::Directory_service_directoryHandler", bridge.NewTFHandler(p, "aws_directory_service_directory", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dlm_lifecycle_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dlm_lifecycle_policyID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dlm_lifecycle_policyHandler", bridge.NewTFHandler(p, "aws_dlm_lifecycle_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dms_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dms_certificateID", "certificate_arn")
		b.ImmutableAttributes("certificate_id", "certificate_pem", "certificate_wallet")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dms_certificateHandler", bridge.NewTFHandler(p, "aws_dms_certificate", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dms_endpoint{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dms_endpointID", "certificate_arn", "endpoint_arn", "extra_connection_attributes", "kms_key_arn", "ssl_mode")
		b.ImmutableAttributes("endpoint_id", "kms_key_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dms_endpointHandler", bridge.NewTFHandler(p, "aws_dms_endpoint", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dms_replication_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dms_replication_instanceID", "allocated_storage", "auto_minor_version_upgrade", "availability_zone", "engine_version", "kms_key_arn", "multi_az", "preferred_maintenance_window", "publicly_accessible", "replication_instance_arn", "replication_instance_private_ips", "replication_instance_public_ips", "replication_subnet_group_id", "vpc_security_group_ids")
		b.ImmutableAttributes("availability_zone", "kms_key_arn", "publicly_accessible", "replication_instance_id", "replication_subnet_group_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dms_replication_instanceHandler", bridge.NewTFHandler(p, "aws_dms_replication_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dms_replication_subnet_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dms_replication_subnet_groupID", "replication_subnet_group_arn", "vpc_id")
		b.ImmutableAttributes("replication_subnet_group_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dms_replication_subnet_groupHandler", bridge.NewTFHandler(p, "aws_dms_replication_subnet_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dms_replication_task{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dms_replication_taskID", "replication_task_arn")
		b.ImmutableAttributes("replication_instance_arn", "replication_task_id", "source_endpoint_arn", "target_endpoint_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dms_replication_taskHandler", bridge.NewTFHandler(p, "aws_dms_replication_task", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Docdb_cluster_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("docdb_cluster_parameter_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("description", "family", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Docdb_cluster_parameter_groupHandler", bridge.NewTFHandler(p, "aws_docdb_cluster_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Docdb_subnet_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("docdb_subnet_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Docdb_subnet_groupHandler", bridge.NewTFHandler(p, "aws_docdb_subnet_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_bgp_peer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_bgp_peerID", "amazon_address", "bgp_auth_key", "bgp_status", "customer_address")
		b.ImmutableAttributes("address_family", "amazon_address", "bgp_asn", "bgp_auth_key", "customer_address", "virtual_interface_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_bgp_peerHandler", bridge.NewTFHandler(p, "aws_dx_bgp_peer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_connection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_connectionID", "arn", "jumbo_frame_capable")
		b.ImmutableAttributes("bandwidth", "location", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_connectionHandler", bridge.NewTFHandler(p, "aws_dx_connection", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_connection_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_connection_associationID")
		b.ImmutableAttributes("connection_id", "lag_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_connection_associationHandler", bridge.NewTFHandler(p, "aws_dx_connection_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_gatewayID")
		b.ImmutableAttributes("amazon_side_asn", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_gatewayHandler", bridge.NewTFHandler(p, "aws_dx_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_gateway_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_gateway_associationID")
		b.ImmutableAttributes("dx_gateway_id", "vpn_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_gateway_associationHandler", bridge.NewTFHandler(p, "aws_dx_gateway_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_hosted_private_virtual_interface{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_hosted_private_virtual_interfaceID", "amazon_address", "arn", "bgp_auth_key", "customer_address", "jumbo_frame_capable")
		b.ImmutableAttributes("address_family", "amazon_address", "bgp_asn", "bgp_auth_key", "connection_id", "customer_address", "mtu", "name", "owner_account_id", "vlan")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_hosted_private_virtual_interfaceHandler", bridge.NewTFHandler(p, "aws_dx_hosted_private_virtual_interface", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_hosted_private_virtual_interface_accepter{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_hosted_private_virtual_interface_accepterID", "arn")
		b.ImmutableAttributes("dx_gateway_id", "virtual_interface_id", "vpn_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_hosted_private_virtual_interface_accepterHandler", bridge.NewTFHandler(p, "aws_dx_hosted_private_virtual_interface_accepter", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_hosted_public_virtual_interface{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_hosted_public_virtual_interfaceID", "amazon_address", "arn", "bgp_auth_key", "customer_address")
		b.ImmutableAttributes("address_family", "amazon_address", "bgp_asn", "bgp_auth_key", "connection_id", "customer_address", "name", "owner_account_id", "route_filter_prefixes", "vlan")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_hosted_public_virtual_interfaceHandler", bridge.NewTFHandler(p, "aws_dx_hosted_public_virtual_interface", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_hosted_public_virtual_interface_accepter{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_hosted_public_virtual_interface_accepterID", "arn")
		b.ImmutableAttributes("virtual_interface_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_hosted_public_virtual_interface_accepterHandler", bridge.NewTFHandler(p, "aws_dx_hosted_public_virtual_interface_accepter", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_lag{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_lagID", "arn", "number_of_connections")
		b.ImmutableAttributes("connections_bandwidth", "location", "number_of_connections")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_lagHandler", bridge.NewTFHandler(p, "aws_dx_lag", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_private_virtual_interface{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_private_virtual_interfaceID", "amazon_address", "arn", "bgp_auth_key", "customer_address", "jumbo_frame_capable")
		b.ImmutableAttributes("address_family", "amazon_address", "bgp_asn", "bgp_auth_key", "connection_id", "customer_address", "dx_gateway_id", "name", "vlan", "vpn_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_private_virtual_interfaceHandler", bridge.NewTFHandler(p, "aws_dx_private_virtual_interface", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dx_public_virtual_interface{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dx_public_virtual_interfaceID", "amazon_address", "arn", "bgp_auth_key", "customer_address")
		b.ImmutableAttributes("address_family", "amazon_address", "bgp_asn", "bgp_auth_key", "connection_id", "customer_address", "name", "route_filter_prefixes", "vlan")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dx_public_virtual_interfaceHandler", bridge.NewTFHandler(p, "aws_dx_public_virtual_interface", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dynamodb_global_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dynamodb_global_tableID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dynamodb_global_tableHandler", bridge.NewTFHandler(p, "aws_dynamodb_global_table", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dynamodb_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dynamodb_tableID", "arn", "point_in_time_recovery", "server_side_encryption", "stream_arn", "stream_label", "stream_view_type")
		b.ImmutableAttributes("hash_key", "local_secondary_index", "name", "range_key")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dynamodb_tableHandler", bridge.NewTFHandler(p, "aws_dynamodb_table", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Dynamodb_table_item{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dynamodb_table_itemID")
		b.ImmutableAttributes("hash_key", "range_key", "table_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Dynamodb_table_itemHandler", bridge.NewTFHandler(p, "aws_dynamodb_table_item", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ebs_snapshot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ebs_snapshotID", "data_encryption_key_id", "encrypted", "kms_key_id", "owner_alias", "owner_id", "volume_size")
		b.ImmutableAttributes("description", "tags", "volume_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ebs_snapshotHandler", bridge.NewTFHandler(p, "aws_ebs_snapshot", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ebs_snapshot_copy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ebs_snapshot_copyID", "data_encryption_key_id", "owner_alias", "owner_id", "volume_id", "volume_size")
		b.ImmutableAttributes("description", "encrypted", "kms_key_id", "source_region", "source_snapshot_id", "tags")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ebs_snapshot_copyHandler", bridge.NewTFHandler(p, "aws_ebs_snapshot_copy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ebs_volume{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ebs_volumeID", "arn", "encrypted", "iops", "kms_key_id", "size", "snapshot_id", "type")
		b.ImmutableAttributes("availability_zone", "encrypted", "kms_key_id", "snapshot_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ebs_volumeHandler", bridge.NewTFHandler(p, "aws_ebs_volume", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_capacity_reservation{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_capacity_reservationID")
		b.ImmutableAttributes("availability_zone", "ebs_optimized", "ephemeral_storage", "instance_match_criteria", "instance_platform", "instance_type", "tenancy")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_capacity_reservationHandler", bridge.NewTFHandler(p, "aws_ec2_capacity_reservation", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_fleet{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_fleetID")
		b.ImmutableAttributes("launch_template_config", "replace_unhealthy_instances", "tags", "terminate_instances_with_expiration", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_fleetHandler", bridge.NewTFHandler(p, "aws_ec2_fleet", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_transit_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_transit_gatewayID", "arn", "association_default_route_table_id", "owner_id", "propagation_default_route_table_id")
		b.ImmutableAttributes("amazon_side_asn", "auto_accept_shared_attachments", "default_route_table_association", "default_route_table_propagation", "description", "dns_support", "vpn_ecmp_support")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_transit_gatewayHandler", bridge.NewTFHandler(p, "aws_ec2_transit_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_transit_gateway_route{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_transit_gateway_routeID")
		b.ImmutableAttributes("destination_cidr_block", "transit_gateway_attachment_id", "transit_gateway_route_table_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_transit_gateway_routeHandler", bridge.NewTFHandler(p, "aws_ec2_transit_gateway_route", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_transit_gateway_route_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_transit_gateway_route_tableID", "default_association_route_table", "default_propagation_route_table")
		b.ImmutableAttributes("transit_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_transit_gateway_route_tableHandler", bridge.NewTFHandler(p, "aws_ec2_transit_gateway_route_table", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_transit_gateway_route_table_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_transit_gateway_route_table_associationID", "resource_id", "resource_type")
		b.ImmutableAttributes("transit_gateway_attachment_id", "transit_gateway_route_table_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_transit_gateway_route_table_associationHandler", bridge.NewTFHandler(p, "aws_ec2_transit_gateway_route_table_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_transit_gateway_route_table_propagation{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_transit_gateway_route_table_propagationID", "resource_id", "resource_type")
		b.ImmutableAttributes("transit_gateway_attachment_id", "transit_gateway_route_table_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_transit_gateway_route_table_propagationHandler", bridge.NewTFHandler(p, "aws_ec2_transit_gateway_route_table_propagation", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ec2_transit_gateway_vpc_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ec2_transit_gateway_vpc_attachmentID", "vpc_owner_id")
		b.ImmutableAttributes("transit_gateway_id", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ec2_transit_gateway_vpc_attachmentHandler", bridge.NewTFHandler(p, "aws_ec2_transit_gateway_vpc_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ecr_lifecycle_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ecr_lifecycle_policyID", "registry_id")
		b.ImmutableAttributes("policy", "repository")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ecr_lifecycle_policyHandler", bridge.NewTFHandler(p, "aws_ecr_lifecycle_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ecr_repository{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ecr_repositoryID", "arn", "registry_id", "repository_url")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ecr_repositoryHandler", bridge.NewTFHandler(p, "aws_ecr_repository", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ecr_repository_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ecr_repository_policyID", "registry_id")
		b.ImmutableAttributes("repository")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ecr_repository_policyHandler", bridge.NewTFHandler(p, "aws_ecr_repository_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ecs_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ecs_clusterID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ecs_clusterHandler", bridge.NewTFHandler(p, "aws_ecs_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ecs_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ecs_serviceID", "cluster", "iam_role", "platform_version")
		b.ImmutableAttributes("cluster", "iam_role", "launch_type", "load_balancer", "name", "ordered_placement_strategy", "placement_constraints", "placement_strategy", "propagate_tags", "scheduling_strategy", "service_registries")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ecs_serviceHandler", bridge.NewTFHandler(p, "aws_ecs_service", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ecs_task_definition{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ecs_task_definitionID", "arn", "network_mode", "revision")
		b.ImmutableAttributes("container_definitions", "cpu", "execution_role_arn", "family", "ipc_mode", "memory", "network_mode", "pid_mode", "placement_constraints", "requires_compatibilities", "task_role_arn", "volume")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ecs_task_definitionHandler", bridge.NewTFHandler(p, "aws_ecs_task_definition", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Efs_file_system{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("efs_file_systemID", "arn", "creation_token", "dns_name", "encrypted", "kms_key_id", "performance_mode", "reference_name")
		b.ImmutableAttributes("creation_token", "encrypted", "kms_key_id", "performance_mode")
	}))[0]
	sb.RegisterHandler("TerraformAws::Efs_file_systemHandler", bridge.NewTFHandler(p, "aws_efs_file_system", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Efs_mount_target{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("efs_mount_targetID", "dns_name", "file_system_arn", "ip_address", "network_interface_id", "security_groups")
		b.ImmutableAttributes("file_system_id", "ip_address", "subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Efs_mount_targetHandler", bridge.NewTFHandler(p, "aws_efs_mount_target", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Egress_only_internet_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("egress_only_internet_gatewayID")
		b.ImmutableAttributes("vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Egress_only_internet_gatewayHandler", bridge.NewTFHandler(p, "aws_egress_only_internet_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Eip{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eipID", "allocation_id", "association_id", "domain", "instance", "network_interface", "private_ip", "public_ip", "public_ipv4_pool", "vpc")
		b.ImmutableAttributes("public_ipv4_pool", "vpc")
	}))[0]
	sb.RegisterHandler("TerraformAws::EipHandler", bridge.NewTFHandler(p, "aws_eip", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Eip_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eip_associationID", "allocation_id", "instance_id", "network_interface_id", "private_ip_address", "public_ip")
		b.ImmutableAttributes("allocation_id", "allow_reassociation", "instance_id", "network_interface_id", "private_ip_address", "public_ip")
	}))[0]
	sb.RegisterHandler("TerraformAws::Eip_associationHandler", bridge.NewTFHandler(p, "aws_eip_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Eks_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eks_clusterID", "arn", "certificate_authority", "created_at", "endpoint", "platform_version", "version")
		b.ImmutableAttributes("name", "role_arn", "vpc_config")
	}))[0]
	sb.RegisterHandler("TerraformAws::Eks_clusterHandler", bridge.NewTFHandler(p, "aws_eks_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elastic_beanstalk_application{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elastic_beanstalk_applicationID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elastic_beanstalk_applicationHandler", bridge.NewTFHandler(p, "aws_elastic_beanstalk_application", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elastic_beanstalk_application_version{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elastic_beanstalk_application_versionID")
		b.ImmutableAttributes("application", "bucket", "key", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elastic_beanstalk_application_versionHandler", bridge.NewTFHandler(p, "aws_elastic_beanstalk_application_version", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elastic_beanstalk_configuration_template{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elastic_beanstalk_configuration_templateID", "setting")
		b.ImmutableAttributes("application", "environment_id", "name", "solution_stack_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elastic_beanstalk_configuration_templateHandler", bridge.NewTFHandler(p, "aws_elastic_beanstalk_configuration_template", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elastic_beanstalk_environment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elastic_beanstalk_environmentID", "all_settings", "arn", "autoscaling_groups", "cname", "cname_prefix", "instances", "launch_configurations", "load_balancers", "platform_arn", "queues", "solution_stack_name", "triggers", "version_label")
		b.ImmutableAttributes("cname_prefix", "name", "tier")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elastic_beanstalk_environmentHandler", bridge.NewTFHandler(p, "aws_elastic_beanstalk_environment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elasticache_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elasticache_clusterID", "apply_immediately", "availability_zone", "az_mode", "cache_nodes", "cluster_address", "configuration_endpoint", "engine", "engine_version", "maintenance_window", "node_type", "num_cache_nodes", "parameter_group_name", "replication_group_id", "security_group_ids", "security_group_names", "snapshot_window", "subnet_group_name")
		b.ImmutableAttributes("availability_zone", "availability_zones", "cluster_id", "engine", "port", "replication_group_id", "security_group_names", "snapshot_arns", "snapshot_name", "subnet_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elasticache_clusterHandler", bridge.NewTFHandler(p, "aws_elasticache_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elasticache_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elasticache_parameter_groupID")
		b.ImmutableAttributes("description", "family", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elasticache_parameter_groupHandler", bridge.NewTFHandler(p, "aws_elasticache_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elasticache_replication_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elasticache_replication_groupID", "apply_immediately", "cluster_mode", "configuration_endpoint_address", "engine_version", "maintenance_window", "member_clusters", "node_type", "number_cache_clusters", "parameter_group_name", "primary_endpoint_address", "security_group_ids", "security_group_names", "snapshot_window", "subnet_group_name")
		b.ImmutableAttributes("at_rest_encryption_enabled", "auth_token", "availability_zones", "engine", "port", "replication_group_id", "security_group_names", "snapshot_arns", "snapshot_name", "subnet_group_name", "transit_encryption_enabled")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elasticache_replication_groupHandler", bridge.NewTFHandler(p, "aws_elasticache_replication_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elasticache_security_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elasticache_security_groupID")
		b.ImmutableAttributes("description", "name", "security_group_names")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elasticache_security_groupHandler", bridge.NewTFHandler(p, "aws_elasticache_security_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elasticache_subnet_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elasticache_subnet_groupID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elasticache_subnet_groupHandler", bridge.NewTFHandler(p, "aws_elasticache_subnet_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elasticsearch_domain{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elasticsearch_domainID", "access_policies", "advanced_options", "arn", "cluster_config", "domain_id", "ebs_options", "encrypt_at_rest", "endpoint", "kibana_endpoint", "node_to_node_encryption")
		b.ImmutableAttributes("domain_name", "vpc_options")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elasticsearch_domainHandler", bridge.NewTFHandler(p, "aws_elasticsearch_domain", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elasticsearch_domain_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elasticsearch_domain_policyID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elasticsearch_domain_policyHandler", bridge.NewTFHandler(p, "aws_elasticsearch_domain_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elastictranscoder_pipeline{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elastictranscoder_pipelineID", "arn", "content_config", "name", "output_bucket", "thumbnail_config")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elastictranscoder_pipelineHandler", bridge.NewTFHandler(p, "aws_elastictranscoder_pipeline", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elastictranscoder_preset{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elastictranscoder_presetID", "arn", "name", "type")
		b.ImmutableAttributes("audio", "audio_codec_options", "container", "description", "name", "thumbnails", "video", "video_codec_options", "video_watermarks")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elastictranscoder_presetHandler", bridge.NewTFHandler(p, "aws_elastictranscoder_preset", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elb{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elbID", "arn", "availability_zones", "dns_name", "health_check", "instances", "internal", "name", "security_groups", "source_security_group", "source_security_group_id", "subnets", "zone_id")
		b.ImmutableAttributes("internal", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::ElbHandler", bridge.NewTFHandler(p, "aws_elb", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Elb_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("elb_attachmentID")
		b.ImmutableAttributes("elb", "instance")
	}))[0]
	sb.RegisterHandler("TerraformAws::Elb_attachmentHandler", bridge.NewTFHandler(p, "aws_elb_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Emr_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("emr_clusterID", "cluster_state", "core_instance_count", "core_instance_type", "instance_group", "keep_job_flow_alive_when_no_steps", "master_instance_type", "master_public_dns", "scale_down_behavior", "step", "termination_protection")
		b.ImmutableAttributes("additional_info", "applications", "autoscaling_role", "bootstrap_action", "configurations", "configurations_json", "core_instance_type", "custom_ami_id", "ebs_root_volume_size", "ec2_attributes", "instance_group", "keep_job_flow_alive_when_no_steps", "kerberos_attributes", "log_uri", "master_instance_type", "name", "release_label", "scale_down_behavior", "security_configuration", "service_role", "step")
	}))[0]
	sb.RegisterHandler("TerraformAws::Emr_clusterHandler", bridge.NewTFHandler(p, "aws_emr_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Emr_instance_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("emr_instance_groupID", "running_instance_count", "status")
		b.ImmutableAttributes("cluster_id", "ebs_config", "ebs_optimized", "instance_type", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Emr_instance_groupHandler", bridge.NewTFHandler(p, "aws_emr_instance_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Emr_security_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("emr_security_configurationID", "creation_date", "name")
		b.ImmutableAttributes("configuration", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Emr_security_configurationHandler", bridge.NewTFHandler(p, "aws_emr_security_configuration", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Flow_log{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("flow_logID", "log_destination", "log_group_name")
		b.ImmutableAttributes("eni_id", "iam_role_arn", "log_destination", "log_destination_type", "log_group_name", "subnet_id", "traffic_type", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Flow_logHandler", bridge.NewTFHandler(p, "aws_flow_log", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Gamelift_alias{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("gamelift_aliasID", "arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Gamelift_aliasHandler", bridge.NewTFHandler(p, "aws_gamelift_alias", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Gamelift_build{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("gamelift_buildID")
		b.ImmutableAttributes("operating_system", "storage_location")
	}))[0]
	sb.RegisterHandler("TerraformAws::Gamelift_buildHandler", bridge.NewTFHandler(p, "aws_gamelift_build", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Gamelift_fleet{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("gamelift_fleetID", "arn", "log_paths", "metric_groups", "operating_system")
		b.ImmutableAttributes("build_id", "ec2_instance_type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Gamelift_fleetHandler", bridge.NewTFHandler(p, "aws_gamelift_fleet", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Gamelift_game_session_queue{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("gamelift_game_session_queueID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Gamelift_game_session_queueHandler", bridge.NewTFHandler(p, "aws_gamelift_game_session_queue", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glacier_vault{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glacier_vaultID", "arn", "location")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glacier_vaultHandler", bridge.NewTFHandler(p, "aws_glacier_vault", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glacier_vault_lock{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glacier_vault_lockID")
		b.ImmutableAttributes("complete_lock", "policy", "vault_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glacier_vault_lockHandler", bridge.NewTFHandler(p, "aws_glacier_vault_lock", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Globalaccelerator_accelerator{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("globalaccelerator_acceleratorID", "ip_sets")
	}))[0]
	sb.RegisterHandler("TerraformAws::Globalaccelerator_acceleratorHandler", bridge.NewTFHandler(p, "aws_globalaccelerator_accelerator", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_catalog_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_catalog_databaseID", "catalog_id")
		b.ImmutableAttributes("catalog_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_catalog_databaseHandler", bridge.NewTFHandler(p, "aws_glue_catalog_database", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_catalog_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_catalog_tableID", "catalog_id")
		b.ImmutableAttributes("catalog_id", "database_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_catalog_tableHandler", bridge.NewTFHandler(p, "aws_glue_catalog_table", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_classifier{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_classifierID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_classifierHandler", bridge.NewTFHandler(p, "aws_glue_classifier", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_connection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_connectionID", "catalog_id")
		b.ImmutableAttributes("catalog_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_connectionHandler", bridge.NewTFHandler(p, "aws_glue_connection", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_crawler{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_crawlerID")
		b.ImmutableAttributes("database_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_crawlerHandler", bridge.NewTFHandler(p, "aws_glue_crawler", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_job{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_jobID", "execution_property")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_jobHandler", bridge.NewTFHandler(p, "aws_glue_job", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_security_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_security_configurationID")
		b.ImmutableAttributes("encryption_configuration", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_security_configurationHandler", bridge.NewTFHandler(p, "aws_glue_security_configuration", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Glue_trigger{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("glue_triggerID")
		b.ImmutableAttributes("name", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Glue_triggerHandler", bridge.NewTFHandler(p, "aws_glue_trigger", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Guardduty_detector{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("guardduty_detectorID", "account_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Guardduty_detectorHandler", bridge.NewTFHandler(p, "aws_guardduty_detector", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Guardduty_ipset{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("guardduty_ipsetID")
		b.ImmutableAttributes("detector_id", "format")
	}))[0]
	sb.RegisterHandler("TerraformAws::Guardduty_ipsetHandler", bridge.NewTFHandler(p, "aws_guardduty_ipset", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Guardduty_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("guardduty_memberID", "relationship_status")
		b.ImmutableAttributes("account_id", "detector_id", "disable_email_notification", "email", "invitation_message")
	}))[0]
	sb.RegisterHandler("TerraformAws::Guardduty_memberHandler", bridge.NewTFHandler(p, "aws_guardduty_member", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Guardduty_threatintelset{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("guardduty_threatintelsetID")
		b.ImmutableAttributes("detector_id", "format")
	}))[0]
	sb.RegisterHandler("TerraformAws::Guardduty_threatintelsetHandler", bridge.NewTFHandler(p, "aws_guardduty_threatintelset", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_access_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_access_keyID", "encrypted_secret", "key_fingerprint", "secret", "ses_smtp_password", "status")
		b.ImmutableAttributes("pgp_key", "user")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_access_keyHandler", bridge.NewTFHandler(p, "aws_iam_access_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_account_alias{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_account_aliasID")
		b.ImmutableAttributes("account_alias")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_account_aliasHandler", bridge.NewTFHandler(p, "aws_iam_account_alias", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_account_password_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_account_password_policyID", "expire_passwords", "hard_expiry", "max_password_age", "password_reuse_prevention", "require_lowercase_characters", "require_numbers", "require_symbols", "require_uppercase_characters")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_account_password_policyHandler", bridge.NewTFHandler(p, "aws_iam_account_password_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_groupID", "arn", "unique_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_groupHandler", bridge.NewTFHandler(p, "aws_iam_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_group_membership{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_group_membershipID")
		b.ImmutableAttributes("group", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_group_membershipHandler", bridge.NewTFHandler(p, "aws_iam_group_membership", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_group_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_group_policyID", "name")
		b.ImmutableAttributes("group", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_group_policyHandler", bridge.NewTFHandler(p, "aws_iam_group_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_group_policy_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_group_policy_attachmentID")
		b.ImmutableAttributes("group", "policy_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_group_policy_attachmentHandler", bridge.NewTFHandler(p, "aws_iam_group_policy_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_instance_profile{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_instance_profileID", "arn", "create_date", "name", "role", "roles", "unique_id")
		b.ImmutableAttributes("name", "name_prefix", "path")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_instance_profileHandler", bridge.NewTFHandler(p, "aws_iam_instance_profile", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_openid_connect_provider{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_openid_connect_providerID", "arn")
		b.ImmutableAttributes("client_id_list", "url")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_openid_connect_providerHandler", bridge.NewTFHandler(p, "aws_iam_openid_connect_provider", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_policyID", "arn", "name")
		b.ImmutableAttributes("description", "name", "name_prefix", "path")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_policyHandler", bridge.NewTFHandler(p, "aws_iam_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_policy_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_policy_attachmentID")
		b.ImmutableAttributes("name", "policy_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_policy_attachmentHandler", bridge.NewTFHandler(p, "aws_iam_policy_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_role{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_roleID", "arn", "create_date", "name", "unique_id")
		b.ImmutableAttributes("name", "name_prefix", "path")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_roleHandler", bridge.NewTFHandler(p, "aws_iam_role", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_role_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_role_policyID", "name")
		b.ImmutableAttributes("name", "name_prefix", "role")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_role_policyHandler", bridge.NewTFHandler(p, "aws_iam_role_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_role_policy_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_role_policy_attachmentID")
		b.ImmutableAttributes("policy_arn", "role")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_role_policy_attachmentHandler", bridge.NewTFHandler(p, "aws_iam_role_policy_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_saml_provider{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_saml_providerID", "arn", "valid_until")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_saml_providerHandler", bridge.NewTFHandler(p, "aws_iam_saml_provider", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_server_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_server_certificateID", "arn", "name")
		b.ImmutableAttributes("certificate_body", "certificate_chain", "name", "name_prefix", "path", "private_key")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_server_certificateHandler", bridge.NewTFHandler(p, "aws_iam_server_certificate", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_service_linked_role{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_service_linked_roleID", "arn", "create_date", "name", "path", "unique_id")
		b.ImmutableAttributes("aws_service_name", "custom_suffix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_service_linked_roleHandler", bridge.NewTFHandler(p, "aws_iam_service_linked_role", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_user{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_userID", "arn", "unique_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_userHandler", bridge.NewTFHandler(p, "aws_iam_user", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_user_group_membership{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_user_group_membershipID")
		b.ImmutableAttributes("user")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_user_group_membershipHandler", bridge.NewTFHandler(p, "aws_iam_user_group_membership", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_user_login_profile{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_user_login_profileID", "encrypted_password", "key_fingerprint")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_user_login_profileHandler", bridge.NewTFHandler(p, "aws_iam_user_login_profile", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_user_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_user_policyID", "name")
		b.ImmutableAttributes("name", "name_prefix", "user")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_user_policyHandler", bridge.NewTFHandler(p, "aws_iam_user_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_user_policy_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_user_policy_attachmentID")
		b.ImmutableAttributes("policy_arn", "user")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_user_policy_attachmentHandler", bridge.NewTFHandler(p, "aws_iam_user_policy_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iam_user_ssh_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iam_user_ssh_keyID", "fingerprint", "ssh_public_key_id", "status")
		b.ImmutableAttributes("encoding", "public_key", "username")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iam_user_ssh_keyHandler", bridge.NewTFHandler(p, "aws_iam_user_ssh_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Inspector_assessment_target{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("inspector_assessment_targetID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Inspector_assessment_targetHandler", bridge.NewTFHandler(p, "aws_inspector_assessment_target", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Inspector_assessment_template{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("inspector_assessment_templateID", "arn")
		b.ImmutableAttributes("arn", "duration", "name", "rules_package_arns", "target_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Inspector_assessment_templateHandler", bridge.NewTFHandler(p, "aws_inspector_assessment_template", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Inspector_resource_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("inspector_resource_groupID", "arn")
		b.ImmutableAttributes("tags")
	}))[0]
	sb.RegisterHandler("TerraformAws::Inspector_resource_groupHandler", bridge.NewTFHandler(p, "aws_inspector_resource_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("instanceID", "arn", "associate_public_ip_address", "availability_zone", "cpu_core_count", "cpu_threads_per_core", "ebs_block_device", "ephemeral_block_device", "host_id", "instance_state", "ipv6_address_count", "ipv6_addresses", "key_name", "network_interface", "network_interface_id", "password_data", "placement_group", "primary_network_interface_id", "private_dns", "private_ip", "public_dns", "public_ip", "root_block_device", "security_groups", "subnet_id", "tenancy", "volume_tags", "vpc_security_group_ids")
		b.ImmutableAttributes("ami", "associate_public_ip_address", "availability_zone", "cpu_core_count", "cpu_threads_per_core", "ebs_optimized", "ephemeral_block_device", "host_id", "ipv6_address_count", "ipv6_addresses", "key_name", "placement_group", "private_ip", "security_groups", "subnet_id", "tenancy", "user_data", "user_data_base64")
	}))[0]
	sb.RegisterHandler("TerraformAws::InstanceHandler", bridge.NewTFHandler(p, "aws_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Internet_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("internet_gatewayID", "owner_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Internet_gatewayHandler", bridge.NewTFHandler(p, "aws_internet_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iot_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iot_certificateID", "arn")
		b.ImmutableAttributes("csr")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iot_certificateHandler", bridge.NewTFHandler(p, "aws_iot_certificate", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iot_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iot_policyID", "arn", "default_version_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iot_policyHandler", bridge.NewTFHandler(p, "aws_iot_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iot_policy_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iot_policy_attachmentID")
		b.ImmutableAttributes("policy", "target")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iot_policy_attachmentHandler", bridge.NewTFHandler(p, "aws_iot_policy_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iot_thing{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iot_thingID", "arn", "default_client_id", "version")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iot_thingHandler", bridge.NewTFHandler(p, "aws_iot_thing", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iot_thing_principal_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iot_thing_principal_attachmentID")
		b.ImmutableAttributes("principal", "thing")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iot_thing_principal_attachmentHandler", bridge.NewTFHandler(p, "aws_iot_thing_principal_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iot_thing_type{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iot_thing_typeID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iot_thing_typeHandler", bridge.NewTFHandler(p, "aws_iot_thing_type", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Iot_topic_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iot_topic_ruleID", "arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Iot_topic_ruleHandler", bridge.NewTFHandler(p, "aws_iot_topic_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Key_pair{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("key_pairID", "fingerprint", "key_name")
		b.ImmutableAttributes("key_name", "key_name_prefix", "public_key")
	}))[0]
	sb.RegisterHandler("TerraformAws::Key_pairHandler", bridge.NewTFHandler(p, "aws_key_pair", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Kinesis_analytics_application{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kinesis_analytics_applicationID", "arn", "create_timestamp", "last_update_timestamp", "status", "version")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Kinesis_analytics_applicationHandler", bridge.NewTFHandler(p, "aws_kinesis_analytics_application", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Kinesis_firehose_delivery_stream{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kinesis_firehose_delivery_streamID", "arn", "destination_id", "version_id")
		b.ImmutableAttributes("destination", "kinesis_source_configuration", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Kinesis_firehose_delivery_streamHandler", bridge.NewTFHandler(p, "aws_kinesis_firehose_delivery_stream", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Kinesis_stream{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kinesis_streamID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Kinesis_streamHandler", bridge.NewTFHandler(p, "aws_kinesis_stream", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Kms_alias{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_aliasID", "arn", "target_key_arn")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Kms_aliasHandler", bridge.NewTFHandler(p, "aws_kms_alias", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Kms_grant{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_grantID", "grant_id", "grant_token")
		b.ImmutableAttributes("constraints", "grant_creation_tokens", "grantee_principal", "key_id", "name", "operations", "retire_on_delete", "retiring_principal")
	}))[0]
	sb.RegisterHandler("TerraformAws::Kms_grantHandler", bridge.NewTFHandler(p, "aws_kms_grant", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Kms_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_keyID", "arn", "description", "key_id", "key_usage", "policy")
		b.ImmutableAttributes("key_usage")
	}))[0]
	sb.RegisterHandler("TerraformAws::Kms_keyHandler", bridge.NewTFHandler(p, "aws_kms_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lambda_alias{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lambda_aliasID", "arn", "invoke_arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lambda_aliasHandler", bridge.NewTFHandler(p, "aws_lambda_alias", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lambda_event_source_mapping{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lambda_event_source_mappingID", "function_arn", "last_modified", "last_processing_result", "state", "state_transition_reason", "uuid")
		b.ImmutableAttributes("event_source_arn", "starting_position", "starting_position_timestamp")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lambda_event_source_mappingHandler", bridge.NewTFHandler(p, "aws_lambda_event_source_mapping", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lambda_function{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lambda_functionID", "arn", "invoke_arn", "last_modified", "qualified_arn", "source_code_hash", "source_code_size", "tracing_config", "version")
		b.ImmutableAttributes("function_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lambda_functionHandler", bridge.NewTFHandler(p, "aws_lambda_function", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lambda_layer_version{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lambda_layer_versionID", "arn", "created_date", "layer_arn", "source_code_hash", "source_code_size", "version")
		b.ImmutableAttributes("compatible_runtimes", "description", "filename", "layer_name", "license_info", "s3_bucket", "s3_key", "s3_object_version", "source_code_hash")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lambda_layer_versionHandler", bridge.NewTFHandler(p, "aws_lambda_layer_version", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lambda_permission{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lambda_permissionID", "statement_id")
		b.ImmutableAttributes("action", "event_source_token", "function_name", "principal", "qualifier", "source_account", "source_arn", "statement_id", "statement_id_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lambda_permissionHandler", bridge.NewTFHandler(p, "aws_lambda_permission", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Launch_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("launch_configurationID", "ebs_block_device", "ebs_optimized", "key_name", "name", "root_block_device")
		b.ImmutableAttributes("associate_public_ip_address", "ebs_optimized", "enable_monitoring", "ephemeral_block_device", "iam_instance_profile", "image_id", "instance_type", "key_name", "name", "name_prefix", "placement_tenancy", "security_groups", "spot_price", "user_data", "user_data_base64", "vpc_classic_link_id", "vpc_classic_link_security_groups")
	}))[0]
	sb.RegisterHandler("TerraformAws::Launch_configurationHandler", bridge.NewTFHandler(p, "aws_launch_configuration", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Launch_template{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("launch_templateID", "arn", "default_version", "latest_version", "name")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Launch_templateHandler", bridge.NewTFHandler(p, "aws_launch_template", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lbID", "access_logs", "arn", "arn_suffix", "dns_name", "internal", "ip_address_type", "name", "security_groups", "subnet_mapping", "subnets", "vpc_id", "zone_id")
		b.ImmutableAttributes("internal", "load_balancer_type", "name", "name_prefix", "subnet_mapping")
	}))[0]
	sb.RegisterHandler("TerraformAws::LbHandler", bridge.NewTFHandler(p, "aws_lb", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb_cookie_stickiness_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_cookie_stickiness_policyID")
		b.ImmutableAttributes("cookie_expiration_period", "lb_port", "load_balancer", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lb_cookie_stickiness_policyHandler", bridge.NewTFHandler(p, "aws_lb_cookie_stickiness_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb_listener{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_listenerID", "arn", "ssl_policy")
		b.ImmutableAttributes("load_balancer_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lb_listenerHandler", bridge.NewTFHandler(p, "aws_lb_listener", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb_listener_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_listener_certificateID")
		b.ImmutableAttributes("certificate_arn", "listener_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lb_listener_certificateHandler", bridge.NewTFHandler(p, "aws_lb_listener_certificate", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb_listener_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_listener_ruleID", "arn", "priority")
		b.ImmutableAttributes("listener_arn", "priority")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lb_listener_ruleHandler", bridge.NewTFHandler(p, "aws_lb_listener_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb_ssl_negotiation_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_ssl_negotiation_policyID")
		b.ImmutableAttributes("attribute", "lb_port", "load_balancer", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lb_ssl_negotiation_policyHandler", bridge.NewTFHandler(p, "aws_lb_ssl_negotiation_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb_target_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_target_groupID", "arn", "arn_suffix", "health_check", "name", "stickiness")
		b.ImmutableAttributes("name", "name_prefix", "port", "protocol", "target_type", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lb_target_groupHandler", bridge.NewTFHandler(p, "aws_lb_target_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lb_target_group_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_target_group_attachmentID")
		b.ImmutableAttributes("availability_zone", "port", "target_group_arn", "target_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lb_target_group_attachmentHandler", bridge.NewTFHandler(p, "aws_lb_target_group_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Licensemanager_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("licensemanager_associationID")
		b.ImmutableAttributes("license_configuration_arn", "resource_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Licensemanager_associationHandler", bridge.NewTFHandler(p, "aws_licensemanager_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Licensemanager_license_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("licensemanager_license_configurationID")
		b.ImmutableAttributes("license_counting_type", "license_rules")
	}))[0]
	sb.RegisterHandler("TerraformAws::Licensemanager_license_configurationHandler", bridge.NewTFHandler(p, "aws_licensemanager_license_configuration", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lightsail_domain{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lightsail_domainID", "arn")
		b.ImmutableAttributes("domain_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lightsail_domainHandler", bridge.NewTFHandler(p, "aws_lightsail_domain", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lightsail_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lightsail_instanceID", "arn", "cpu_count", "created_at", "ipv6_address", "is_static_ip", "private_ip_address", "public_ip_address", "ram_size", "username")
		b.ImmutableAttributes("availability_zone", "blueprint_id", "bundle_id", "key_pair_name", "name", "user_data")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lightsail_instanceHandler", bridge.NewTFHandler(p, "aws_lightsail_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lightsail_key_pair{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lightsail_key_pairID", "arn", "encrypted_fingerprint", "encrypted_private_key", "fingerprint", "name", "private_key", "public_key")
		b.ImmutableAttributes("name", "name_prefix", "pgp_key", "public_key")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lightsail_key_pairHandler", bridge.NewTFHandler(p, "aws_lightsail_key_pair", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lightsail_static_ip{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lightsail_static_ipID", "arn", "ip_address", "support_code")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lightsail_static_ipHandler", bridge.NewTFHandler(p, "aws_lightsail_static_ip", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Lightsail_static_ip_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lightsail_static_ip_attachmentID")
		b.ImmutableAttributes("instance_name", "static_ip_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Lightsail_static_ip_attachmentHandler", bridge.NewTFHandler(p, "aws_lightsail_static_ip_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Load_balancer_backend_server_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("load_balancer_backend_server_policyID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Load_balancer_backend_server_policyHandler", bridge.NewTFHandler(p, "aws_load_balancer_backend_server_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Load_balancer_listener_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("load_balancer_listener_policyID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Load_balancer_listener_policyHandler", bridge.NewTFHandler(p, "aws_load_balancer_listener_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Load_balancer_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("load_balancer_policyID")
		b.ImmutableAttributes("load_balancer_name", "policy_name", "policy_type_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Load_balancer_policyHandler", bridge.NewTFHandler(p, "aws_load_balancer_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Macie_member_account_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("macie_member_account_associationID")
		b.ImmutableAttributes("member_account_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Macie_member_account_associationHandler", bridge.NewTFHandler(p, "aws_macie_member_account_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Macie_s3_bucket_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("macie_s3_bucket_associationID", "classification_type")
		b.ImmutableAttributes("bucket_name", "member_account_id", "prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Macie_s3_bucket_associationHandler", bridge.NewTFHandler(p, "aws_macie_s3_bucket_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Main_route_table_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("main_route_table_associationID", "original_route_table_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Main_route_table_associationHandler", bridge.NewTFHandler(p, "aws_main_route_table_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Media_package_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("media_package_channelID", "arn", "hls_ingest")
		b.ImmutableAttributes("channel_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Media_package_channelHandler", bridge.NewTFHandler(p, "aws_media_package_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Media_store_container{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("media_store_containerID", "arn", "endpoint")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Media_store_containerHandler", bridge.NewTFHandler(p, "aws_media_store_container", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Media_store_container_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("media_store_container_policyID")
		b.ImmutableAttributes("container_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Media_store_container_policyHandler", bridge.NewTFHandler(p, "aws_media_store_container_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Mq_broker{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mq_brokerID", "arn", "configuration", "instances", "maintenance_window_start_time", "subnet_ids")
		b.ImmutableAttributes("auto_minor_version_upgrade", "broker_name", "deployment_mode", "engine_type", "engine_version", "host_instance_type", "maintenance_window_start_time", "publicly_accessible", "security_groups", "subnet_ids")
	}))[0]
	sb.RegisterHandler("TerraformAws::Mq_brokerHandler", bridge.NewTFHandler(p, "aws_mq_broker", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Mq_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mq_configurationID", "arn", "latest_revision")
		b.ImmutableAttributes("engine_type", "engine_version", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Mq_configurationHandler", bridge.NewTFHandler(p, "aws_mq_configuration", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Nat_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("nat_gatewayID", "network_interface_id", "private_ip", "public_ip")
		b.ImmutableAttributes("allocation_id", "subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Nat_gatewayHandler", bridge.NewTFHandler(p, "aws_nat_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Neptune_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("neptune_clusterID", "apply_immediately", "arn", "availability_zones", "cluster_identifier", "cluster_identifier_prefix", "cluster_members", "cluster_resource_id", "endpoint", "engine_version", "hosted_zone_id", "kms_key_arn", "neptune_subnet_group_name", "preferred_backup_window", "preferred_maintenance_window", "reader_endpoint", "vpc_security_group_ids")
		b.ImmutableAttributes("availability_zones", "cluster_identifier", "cluster_identifier_prefix", "engine", "engine_version", "kms_key_arn", "neptune_subnet_group_name", "port", "storage_encrypted")
	}))[0]
	sb.RegisterHandler("TerraformAws::Neptune_clusterHandler", bridge.NewTFHandler(p, "aws_neptune_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Neptune_cluster_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("neptune_cluster_instanceID", "address", "apply_immediately", "arn", "availability_zone", "dbi_resource_id", "endpoint", "engine_version", "identifier", "identifier_prefix", "kms_key_arn", "neptune_subnet_group_name", "preferred_backup_window", "preferred_maintenance_window", "storage_encrypted", "writer")
		b.ImmutableAttributes("availability_zone", "cluster_identifier", "engine", "engine_version", "identifier", "identifier_prefix", "neptune_subnet_group_name", "port", "publicly_accessible")
	}))[0]
	sb.RegisterHandler("TerraformAws::Neptune_cluster_instanceHandler", bridge.NewTFHandler(p, "aws_neptune_cluster_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Neptune_cluster_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("neptune_cluster_parameter_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("description", "family", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Neptune_cluster_parameter_groupHandler", bridge.NewTFHandler(p, "aws_neptune_cluster_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Neptune_cluster_snapshot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("neptune_cluster_snapshotID", "allocated_storage", "availability_zones", "db_cluster_snapshot_arn", "engine", "engine_version", "kms_key_id", "license_model", "port", "snapshot_type", "source_db_cluster_snapshot_arn", "status", "storage_encrypted", "vpc_id")
		b.ImmutableAttributes("db_cluster_identifier", "db_cluster_snapshot_identifier")
	}))[0]
	sb.RegisterHandler("TerraformAws::Neptune_cluster_snapshotHandler", bridge.NewTFHandler(p, "aws_neptune_cluster_snapshot", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Neptune_event_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("neptune_event_subscriptionID", "arn", "customer_aws_id", "name", "name_prefix")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Neptune_event_subscriptionHandler", bridge.NewTFHandler(p, "aws_neptune_event_subscription", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Neptune_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("neptune_parameter_groupID", "arn")
		b.ImmutableAttributes("description", "family", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Neptune_parameter_groupHandler", bridge.NewTFHandler(p, "aws_neptune_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Neptune_subnet_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("neptune_subnet_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Neptune_subnet_groupHandler", bridge.NewTFHandler(p, "aws_neptune_subnet_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Network_acl{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_aclID", "egress", "ingress", "owner_id", "subnet_ids")
		b.ImmutableAttributes("subnet_id", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Network_aclHandler", bridge.NewTFHandler(p, "aws_network_acl", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Network_acl_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_acl_ruleID")
		b.ImmutableAttributes("cidr_block", "egress", "from_port", "icmp_code", "icmp_type", "ipv6_cidr_block", "network_acl_id", "protocol", "rule_action", "rule_number", "to_port")
	}))[0]
	sb.RegisterHandler("TerraformAws::Network_acl_ruleHandler", bridge.NewTFHandler(p, "aws_network_acl_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Network_interface{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_interfaceID", "attachment", "private_dns_name", "private_ip", "private_ips", "private_ips_count", "security_groups")
		b.ImmutableAttributes("subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Network_interfaceHandler", bridge.NewTFHandler(p, "aws_network_interface", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Network_interface_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_interface_attachmentID", "attachment_id", "status")
		b.ImmutableAttributes("device_index", "instance_id", "network_interface_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Network_interface_attachmentHandler", bridge.NewTFHandler(p, "aws_network_interface_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Network_interface_sg_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_interface_sg_attachmentID")
		b.ImmutableAttributes("network_interface_id", "security_group_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Network_interface_sg_attachmentHandler", bridge.NewTFHandler(p, "aws_network_interface_sg_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_application{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_applicationID", "app_source", "short_name")
		b.ImmutableAttributes("short_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_applicationHandler", bridge.NewTFHandler(p, "aws_opsworks_application", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_custom_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_custom_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_custom_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_custom_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_ganglia_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_ganglia_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_ganglia_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_ganglia_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_haproxy_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_haproxy_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_haproxy_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_haproxy_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_instanceID", "ami_id", "availability_zone", "created_at", "ebs_block_device", "ec2_instance_id", "ecs_cluster_arn", "elastic_ip", "ephemeral_block_device", "hostname", "infrastructure_class", "instance_profile_arn", "last_service_error_id", "os", "platform", "private_dns", "private_ip", "public_dns", "public_ip", "registered_by", "reported_agent_version", "reported_os_family", "reported_os_name", "reported_os_version", "root_block_device", "root_device_type", "root_device_volume_id", "security_group_ids", "ssh_host_dsa_key_fingerprint", "ssh_host_rsa_key_fingerprint", "ssh_key_name", "status", "subnet_id", "tenancy", "virtualization_type")
		b.ImmutableAttributes("ami_id", "availability_zone", "ebs_block_device", "ebs_optimized", "ephemeral_block_device", "hostname", "os", "root_block_device", "root_device_type", "stack_id", "subnet_id", "tenancy", "virtualization_type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_instanceHandler", bridge.NewTFHandler(p, "aws_opsworks_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_java_app_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_java_app_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_java_app_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_java_app_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_memcached_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_memcached_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_memcached_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_memcached_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_mysql_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_mysql_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_mysql_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_mysql_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_nodejs_app_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_nodejs_app_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_nodejs_app_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_nodejs_app_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_permission{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_permissionID", "allow_ssh", "allow_sudo", "level", "stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_permissionHandler", bridge.NewTFHandler(p, "aws_opsworks_permission", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_php_app_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_php_app_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_php_app_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_php_app_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_rails_app_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_rails_app_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_rails_app_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_rails_app_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_rds_db_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_rds_db_instanceID")
		b.ImmutableAttributes("rds_db_instance_arn", "stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_rds_db_instanceHandler", bridge.NewTFHandler(p, "aws_opsworks_rds_db_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_stack{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_stackID", "agent_version", "arn", "custom_cookbooks_source", "default_availability_zone", "default_subnet_id", "stack_endpoint", "vpc_id")
		b.ImmutableAttributes("region", "service_role_arn", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_stackHandler", bridge.NewTFHandler(p, "aws_opsworks_stack", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_static_web_layer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_static_web_layerID")
		b.ImmutableAttributes("stack_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_static_web_layerHandler", bridge.NewTFHandler(p, "aws_opsworks_static_web_layer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Opsworks_user_profile{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("opsworks_user_profileID")
		b.ImmutableAttributes("user_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Opsworks_user_profileHandler", bridge.NewTFHandler(p, "aws_opsworks_user_profile", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Organizations_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organizations_accountID", "arn", "joined_method", "joined_timestamp", "status")
		b.ImmutableAttributes("email", "iam_user_access_to_billing", "name", "role_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Organizations_accountHandler", bridge.NewTFHandler(p, "aws_organizations_account", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Organizations_organization{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organizations_organizationID", "arn", "master_account_arn", "master_account_email", "master_account_id")
		b.ImmutableAttributes("feature_set")
	}))[0]
	sb.RegisterHandler("TerraformAws::Organizations_organizationHandler", bridge.NewTFHandler(p, "aws_organizations_organization", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Organizations_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organizations_policyID", "arn")
		b.ImmutableAttributes("type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Organizations_policyHandler", bridge.NewTFHandler(p, "aws_organizations_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Organizations_policy_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organizations_policy_attachmentID")
		b.ImmutableAttributes("policy_id", "target_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Organizations_policy_attachmentHandler", bridge.NewTFHandler(p, "aws_organizations_policy_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_adm_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_adm_channelID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_adm_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_adm_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_apns_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_apns_channelID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_apns_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_apns_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_apns_sandbox_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_apns_sandbox_channelID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_apns_sandbox_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_apns_sandbox_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_apns_voip_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_apns_voip_channelID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_apns_voip_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_apns_voip_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_apns_voip_sandbox_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_apns_voip_sandbox_channelID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_apns_voip_sandbox_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_apns_voip_sandbox_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_app{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_appID", "application_id", "name")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_appHandler", bridge.NewTFHandler(p, "aws_pinpoint_app", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_baidu_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_baidu_channelID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_baidu_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_baidu_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_email_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_email_channelID", "messages_per_second")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_email_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_email_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_event_stream{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_event_streamID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_event_streamHandler", bridge.NewTFHandler(p, "aws_pinpoint_event_stream", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_gcm_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_gcm_channelID")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_gcm_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_gcm_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Pinpoint_sms_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pinpoint_sms_channelID", "promotional_messages_per_second", "transactional_messages_per_second")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Pinpoint_sms_channelHandler", bridge.NewTFHandler(p, "aws_pinpoint_sms_channel", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Placement_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("placement_groupID")
		b.ImmutableAttributes("name", "strategy")
	}))[0]
	sb.RegisterHandler("TerraformAws::Placement_groupHandler", bridge.NewTFHandler(p, "aws_placement_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Proxy_protocol_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("proxy_protocol_policyID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Proxy_protocol_policyHandler", bridge.NewTFHandler(p, "aws_proxy_protocol_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ram_resource_share{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ram_resource_shareID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ram_resource_shareHandler", bridge.NewTFHandler(p, "aws_ram_resource_share", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Rds_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("rds_clusterID", "apply_immediately", "arn", "availability_zones", "cluster_identifier", "cluster_identifier_prefix", "cluster_members", "cluster_resource_id", "database_name", "db_cluster_parameter_group_name", "db_subnet_group_name", "endpoint", "engine_version", "hosted_zone_id", "kms_key_id", "master_username", "port", "preferred_backup_window", "preferred_maintenance_window", "reader_endpoint", "vpc_security_group_ids")
		b.ImmutableAttributes("availability_zones", "cluster_identifier", "cluster_identifier_prefix", "database_name", "db_subnet_group_name", "engine", "engine_mode", "kms_key_id", "master_username", "port", "source_region", "storage_encrypted")
	}))[0]
	sb.RegisterHandler("TerraformAws::Rds_clusterHandler", bridge.NewTFHandler(p, "aws_rds_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Rds_cluster_endpoint{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("rds_cluster_endpointID", "arn", "endpoint")
		b.ImmutableAttributes("cluster_endpoint_identifier", "cluster_identifier")
	}))[0]
	sb.RegisterHandler("TerraformAws::Rds_cluster_endpointHandler", bridge.NewTFHandler(p, "aws_rds_cluster_endpoint", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Rds_cluster_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("rds_cluster_instanceID", "apply_immediately", "arn", "availability_zone", "db_parameter_group_name", "db_subnet_group_name", "dbi_resource_id", "endpoint", "engine_version", "identifier", "identifier_prefix", "kms_key_id", "monitoring_role_arn", "performance_insights_enabled", "performance_insights_kms_key_id", "port", "preferred_backup_window", "preferred_maintenance_window", "storage_encrypted", "writer")
		b.ImmutableAttributes("availability_zone", "cluster_identifier", "db_subnet_group_name", "engine", "engine_version", "identifier", "identifier_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Rds_cluster_instanceHandler", bridge.NewTFHandler(p, "aws_rds_cluster_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Rds_cluster_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("rds_cluster_parameter_groupID", "arn", "name", "name_prefix")
		b.ImmutableAttributes("description", "family", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Rds_cluster_parameter_groupHandler", bridge.NewTFHandler(p, "aws_rds_cluster_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Rds_global_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("rds_global_clusterID", "arn", "engine_version", "global_cluster_resource_id")
		b.ImmutableAttributes("database_name", "engine", "engine_version", "global_cluster_identifier", "storage_encrypted")
	}))[0]
	sb.RegisterHandler("TerraformAws::Rds_global_clusterHandler", bridge.NewTFHandler(p, "aws_rds_global_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Redshift_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redshift_clusterID", "availability_zone", "bucket_name", "cluster_parameter_group_name", "cluster_public_key", "cluster_revision_number", "cluster_security_groups", "cluster_subnet_group_name", "cluster_type", "database_name", "dns_name", "enable_logging", "endpoint", "enhanced_vpc_routing", "iam_roles", "kms_key_id", "preferred_maintenance_window", "s3_key_prefix", "vpc_security_group_ids")
		b.ImmutableAttributes("availability_zone", "cluster_identifier", "cluster_subnet_group_name", "master_username", "snapshot_cluster_identifier", "snapshot_identifier")
	}))[0]
	sb.RegisterHandler("TerraformAws::Redshift_clusterHandler", bridge.NewTFHandler(p, "aws_redshift_cluster", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Redshift_event_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redshift_event_subscriptionID", "customer_aws_id", "status")
		b.ImmutableAttributes("name", "tags")
	}))[0]
	sb.RegisterHandler("TerraformAws::Redshift_event_subscriptionHandler", bridge.NewTFHandler(p, "aws_redshift_event_subscription", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Redshift_parameter_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redshift_parameter_groupID")
		b.ImmutableAttributes("description", "family", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Redshift_parameter_groupHandler", bridge.NewTFHandler(p, "aws_redshift_parameter_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Redshift_security_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redshift_security_groupID")
		b.ImmutableAttributes("description", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Redshift_security_groupHandler", bridge.NewTFHandler(p, "aws_redshift_security_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Redshift_snapshot_copy_grant{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redshift_snapshot_copy_grantID", "kms_key_id")
		b.ImmutableAttributes("kms_key_id", "snapshot_copy_grant_name", "tags")
	}))[0]
	sb.RegisterHandler("TerraformAws::Redshift_snapshot_copy_grantHandler", bridge.NewTFHandler(p, "aws_redshift_snapshot_copy_grant", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Redshift_subnet_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redshift_subnet_groupID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Redshift_subnet_groupHandler", bridge.NewTFHandler(p, "aws_redshift_subnet_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Resourcegroups_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("resourcegroups_groupID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Resourcegroups_groupHandler", bridge.NewTFHandler(p, "aws_resourcegroups_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("routeID", "destination_prefix_list_id", "egress_only_gateway_id", "gateway_id", "instance_id", "instance_owner_id", "nat_gateway_id", "network_interface_id", "origin", "state")
		b.ImmutableAttributes("destination_cidr_block", "destination_ipv6_cidr_block", "route_table_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::RouteHandler", bridge.NewTFHandler(p, "aws_route", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route53_delegation_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route53_delegation_setID", "name_servers")
		b.ImmutableAttributes("reference_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route53_delegation_setHandler", bridge.NewTFHandler(p, "aws_route53_delegation_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route53_health_check{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route53_health_checkID", "enable_sni")
		b.ImmutableAttributes("ip_address", "measure_latency", "reference_name", "request_interval", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route53_health_checkHandler", bridge.NewTFHandler(p, "aws_route53_health_check", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route53_query_log{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route53_query_logID")
		b.ImmutableAttributes("cloudwatch_log_group_arn", "zone_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route53_query_logHandler", bridge.NewTFHandler(p, "aws_route53_query_log", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route53_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route53_recordID", "fqdn")
		b.ImmutableAttributes("name", "zone_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route53_recordHandler", bridge.NewTFHandler(p, "aws_route53_record", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route53_zone{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route53_zoneID", "name_servers", "vpc", "vpc_id", "vpc_region", "zone_id")
		b.ImmutableAttributes("delegation_set_id", "name", "vpc_id", "vpc_region")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route53_zoneHandler", bridge.NewTFHandler(p, "aws_route53_zone", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route53_zone_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route53_zone_associationID", "vpc_region")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route53_zone_associationHandler", bridge.NewTFHandler(p, "aws_route53_zone_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route_tableID", "owner_id", "propagating_vgws", "route")
		b.ImmutableAttributes("vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route_tableHandler", bridge.NewTFHandler(p, "aws_route_table", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Route_table_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route_table_associationID")
		b.ImmutableAttributes("subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Route_table_associationHandler", bridge.NewTFHandler(p, "aws_route_table_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_account_public_access_block{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_account_public_access_blockID", "account_id")
		b.ImmutableAttributes("account_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_account_public_access_blockHandler", bridge.NewTFHandler(p, "aws_s3_account_public_access_block", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_bucket{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_bucketID", "acceleration_status", "arn", "bucket", "bucket_domain_name", "bucket_regional_domain_name", "hosted_zone_id", "region", "request_payer", "versioning", "website_domain", "website_endpoint")
		b.ImmutableAttributes("bucket", "bucket_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_bucketHandler", bridge.NewTFHandler(p, "aws_s3_bucket", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_bucket_inventory{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_bucket_inventoryID")
		b.ImmutableAttributes("bucket", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_bucket_inventoryHandler", bridge.NewTFHandler(p, "aws_s3_bucket_inventory", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_bucket_metric{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_bucket_metricID")
		b.ImmutableAttributes("bucket", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_bucket_metricHandler", bridge.NewTFHandler(p, "aws_s3_bucket_metric", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_bucket_notification{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_bucket_notificationID")
		b.ImmutableAttributes("bucket")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_bucket_notificationHandler", bridge.NewTFHandler(p, "aws_s3_bucket_notification", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_bucket_object{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_bucket_objectID", "content_type", "etag", "server_side_encryption", "storage_class", "version_id")
		b.ImmutableAttributes("bucket", "key")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_bucket_objectHandler", bridge.NewTFHandler(p, "aws_s3_bucket_object", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_bucket_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_bucket_policyID")
		b.ImmutableAttributes("bucket")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_bucket_policyHandler", bridge.NewTFHandler(p, "aws_s3_bucket_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&S3_bucket_public_access_block{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("s3_bucket_public_access_blockID")
		b.ImmutableAttributes("bucket")
	}))[0]
	sb.RegisterHandler("TerraformAws::S3_bucket_public_access_blockHandler", bridge.NewTFHandler(p, "aws_s3_bucket_public_access_block", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sagemaker_notebook_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sagemaker_notebook_instanceID", "arn", "security_groups")
		b.ImmutableAttributes("kms_key_id", "name", "security_groups", "subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sagemaker_notebook_instanceHandler", bridge.NewTFHandler(p, "aws_sagemaker_notebook_instance", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Secretsmanager_secret{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("secretsmanager_secretID", "arn", "name", "name_prefix", "rotation_enabled")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Secretsmanager_secretHandler", bridge.NewTFHandler(p, "aws_secretsmanager_secret", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Secretsmanager_secret_version{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("secretsmanager_secret_versionID", "arn", "version_id", "version_stages")
		b.ImmutableAttributes("secret_binary", "secret_id", "secret_string")
	}))[0]
	sb.RegisterHandler("TerraformAws::Secretsmanager_secret_versionHandler", bridge.NewTFHandler(p, "aws_secretsmanager_secret_version", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Security_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("security_groupID", "arn", "egress", "ingress", "name", "owner_id", "vpc_id")
		b.ImmutableAttributes("description", "name", "name_prefix", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Security_groupHandler", bridge.NewTFHandler(p, "aws_security_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Security_group_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("security_group_ruleID", "source_security_group_id")
		b.ImmutableAttributes("cidr_blocks", "from_port", "ipv6_cidr_blocks", "prefix_list_ids", "protocol", "security_group_id", "self", "source_security_group_id", "to_port", "type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Security_group_ruleHandler", bridge.NewTFHandler(p, "aws_security_group_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Securityhub_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("securityhub_accountID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Securityhub_accountHandler", bridge.NewTFHandler(p, "aws_securityhub_account", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Securityhub_product_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("securityhub_product_subscriptionID", "arn")
		b.ImmutableAttributes("product_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Securityhub_product_subscriptionHandler", bridge.NewTFHandler(p, "aws_securityhub_product_subscription", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Securityhub_standards_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("securityhub_standards_subscriptionID")
		b.ImmutableAttributes("standards_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Securityhub_standards_subscriptionHandler", bridge.NewTFHandler(p, "aws_securityhub_standards_subscription", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Service_discovery_http_namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_discovery_http_namespaceID", "arn")
		b.ImmutableAttributes("description", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Service_discovery_http_namespaceHandler", bridge.NewTFHandler(p, "aws_service_discovery_http_namespace", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Service_discovery_private_dns_namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_discovery_private_dns_namespaceID", "arn", "hosted_zone")
		b.ImmutableAttributes("description", "name", "vpc")
	}))[0]
	sb.RegisterHandler("TerraformAws::Service_discovery_private_dns_namespaceHandler", bridge.NewTFHandler(p, "aws_service_discovery_private_dns_namespace", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Service_discovery_public_dns_namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_discovery_public_dns_namespaceID", "arn", "hosted_zone")
		b.ImmutableAttributes("description", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Service_discovery_public_dns_namespaceHandler", bridge.NewTFHandler(p, "aws_service_discovery_public_dns_namespace", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Service_discovery_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_discovery_serviceID", "arn")
		b.ImmutableAttributes("health_check_custom_config", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Service_discovery_serviceHandler", bridge.NewTFHandler(p, "aws_service_discovery_service", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Servicecatalog_portfolio{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicecatalog_portfolioID", "arn", "created_time", "description")
	}))[0]
	sb.RegisterHandler("TerraformAws::Servicecatalog_portfolioHandler", bridge.NewTFHandler(p, "aws_servicecatalog_portfolio", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_active_receipt_rule_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_active_receipt_rule_setID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_active_receipt_rule_setHandler", bridge.NewTFHandler(p, "aws_ses_active_receipt_rule_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_configuration_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_configuration_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_configuration_setHandler", bridge.NewTFHandler(p, "aws_ses_configuration_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_domain_dkim{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_domain_dkimID", "dkim_tokens")
		b.ImmutableAttributes("domain")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_domain_dkimHandler", bridge.NewTFHandler(p, "aws_ses_domain_dkim", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_domain_identity{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_domain_identityID", "arn", "verification_token")
		b.ImmutableAttributes("domain")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_domain_identityHandler", bridge.NewTFHandler(p, "aws_ses_domain_identity", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_domain_identity_verification{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_domain_identity_verificationID", "arn")
		b.ImmutableAttributes("domain")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_domain_identity_verificationHandler", bridge.NewTFHandler(p, "aws_ses_domain_identity_verification", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_domain_mail_from{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_domain_mail_fromID")
		b.ImmutableAttributes("domain")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_domain_mail_fromHandler", bridge.NewTFHandler(p, "aws_ses_domain_mail_from", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_event_destination{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_event_destinationID")
		b.ImmutableAttributes("cloudwatch_destination", "configuration_set_name", "enabled", "kinesis_destination", "matching_types", "name", "sns_destination")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_event_destinationHandler", bridge.NewTFHandler(p, "aws_ses_event_destination", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_identity_notification_topic{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_identity_notification_topicID")
		b.ImmutableAttributes("identity", "notification_type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_identity_notification_topicHandler", bridge.NewTFHandler(p, "aws_ses_identity_notification_topic", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_receipt_filter{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_receipt_filterID")
		b.ImmutableAttributes("cidr", "name", "policy")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_receipt_filterHandler", bridge.NewTFHandler(p, "aws_ses_receipt_filter", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_receipt_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_receipt_ruleID", "enabled", "scan_enabled", "tls_policy")
		b.ImmutableAttributes("name", "rule_set_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_receipt_ruleHandler", bridge.NewTFHandler(p, "aws_ses_receipt_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_receipt_rule_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_receipt_rule_setID")
		b.ImmutableAttributes("rule_set_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_receipt_rule_setHandler", bridge.NewTFHandler(p, "aws_ses_receipt_rule_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ses_template{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ses_templateID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ses_templateHandler", bridge.NewTFHandler(p, "aws_ses_template", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sfn_activity{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sfn_activityID", "creation_date")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sfn_activityHandler", bridge.NewTFHandler(p, "aws_sfn_activity", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sfn_state_machine{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sfn_state_machineID", "creation_date", "status")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sfn_state_machineHandler", bridge.NewTFHandler(p, "aws_sfn_state_machine", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Simpledb_domain{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("simpledb_domainID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Simpledb_domainHandler", bridge.NewTFHandler(p, "aws_simpledb_domain", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Snapshot_create_volume_permission{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("snapshot_create_volume_permissionID")
		b.ImmutableAttributes("account_id", "snapshot_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Snapshot_create_volume_permissionHandler", bridge.NewTFHandler(p, "aws_snapshot_create_volume_permission", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sns_platform_application{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sns_platform_applicationID", "arn")
		b.ImmutableAttributes("name", "platform")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sns_platform_applicationHandler", bridge.NewTFHandler(p, "aws_sns_platform_application", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sns_sms_preferences{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sns_sms_preferencesID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sns_sms_preferencesHandler", bridge.NewTFHandler(p, "aws_sns_sms_preferences", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sns_topic{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sns_topicID", "arn", "name", "policy")
		b.ImmutableAttributes("name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sns_topicHandler", bridge.NewTFHandler(p, "aws_sns_topic", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sns_topic_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sns_topic_policyID")
		b.ImmutableAttributes("arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sns_topic_policyHandler", bridge.NewTFHandler(p, "aws_sns_topic_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sns_topic_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sns_topic_subscriptionID", "arn")
		b.ImmutableAttributes("endpoint", "protocol", "topic_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sns_topic_subscriptionHandler", bridge.NewTFHandler(p, "aws_sns_topic_subscription", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Spot_datafeed_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spot_datafeed_subscriptionID")
		b.ImmutableAttributes("bucket", "prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Spot_datafeed_subscriptionHandler", bridge.NewTFHandler(p, "aws_spot_datafeed_subscription", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Spot_fleet_request{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spot_fleet_requestID", "client_token", "load_balancers", "spot_request_state", "target_group_arns")
		b.ImmutableAttributes("allocation_strategy", "fleet_type", "iam_fleet_role", "instance_interruption_behaviour", "instance_pools_to_use_count", "launch_specification", "load_balancers", "replace_unhealthy_instances", "spot_price", "target_group_arns", "terminate_instances_with_expiration", "valid_from", "valid_until")
	}))[0]
	sb.RegisterHandler("TerraformAws::Spot_fleet_requestHandler", bridge.NewTFHandler(p, "aws_spot_fleet_request", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Spot_instance_request{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spot_instance_requestID", "arn", "associate_public_ip_address", "availability_zone", "cpu_core_count", "cpu_threads_per_core", "ebs_block_device", "ephemeral_block_device", "host_id", "instance_state", "ipv6_address_count", "ipv6_addresses", "key_name", "network_interface", "network_interface_id", "password_data", "placement_group", "primary_network_interface_id", "private_dns", "private_ip", "public_dns", "public_ip", "root_block_device", "security_groups", "spot_bid_status", "spot_instance_id", "spot_request_state", "subnet_id", "tenancy", "valid_from", "valid_until", "vpc_security_group_ids")
		b.ImmutableAttributes("ami", "arn", "associate_public_ip_address", "availability_zone", "block_device", "block_duration_minutes", "cpu_core_count", "cpu_threads_per_core", "credit_specification", "disable_api_termination", "ebs_block_device", "ebs_optimized", "ephemeral_block_device", "get_password_data", "host_id", "iam_instance_profile", "instance_initiated_shutdown_behavior", "instance_interruption_behaviour", "instance_state", "instance_type", "ipv6_address_count", "ipv6_addresses", "key_name", "launch_group", "monitoring", "network_interface", "network_interface_id", "password_data", "placement_group", "primary_network_interface_id", "private_dns", "private_ip", "public_dns", "public_ip", "root_block_device", "security_groups", "source_dest_check", "spot_price", "subnet_id", "tenancy", "user_data", "user_data_base64", "valid_from", "valid_until", "vpc_security_group_ids")
	}))[0]
	sb.RegisterHandler("TerraformAws::Spot_instance_requestHandler", bridge.NewTFHandler(p, "aws_spot_instance_request", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sqs_queue{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sqs_queueID", "arn", "kms_data_key_reuse_period_seconds", "name", "policy")
		b.ImmutableAttributes("fifo_queue", "name", "name_prefix")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sqs_queueHandler", bridge.NewTFHandler(p, "aws_sqs_queue", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Sqs_queue_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sqs_queue_policyID")
		b.ImmutableAttributes("queue_url")
	}))[0]
	sb.RegisterHandler("TerraformAws::Sqs_queue_policyHandler", bridge.NewTFHandler(p, "aws_sqs_queue_policy", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_activation{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_activationID", "activation_code", "expired", "registration_count")
		b.ImmutableAttributes("description", "expiration_date", "iam_role", "name", "registration_limit")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_activationHandler", bridge.NewTFHandler(p, "aws_ssm_activation", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_associationID", "association_id", "document_version", "parameters", "targets")
		b.ImmutableAttributes("instance_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_associationHandler", bridge.NewTFHandler(p, "aws_ssm_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_document{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_documentID", "arn", "created_date", "default_version", "description", "hash", "hash_type", "latest_version", "owner", "parameter", "platform_types", "schema_version", "status")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_documentHandler", bridge.NewTFHandler(p, "aws_ssm_document", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_maintenance_window{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_maintenance_windowID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_maintenance_windowHandler", bridge.NewTFHandler(p, "aws_ssm_maintenance_window", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_maintenance_window_target{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_maintenance_window_targetID")
		b.ImmutableAttributes("resource_type", "window_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_maintenance_window_targetHandler", bridge.NewTFHandler(p, "aws_ssm_maintenance_window_target", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_maintenance_window_task{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_maintenance_window_taskID")
		b.ImmutableAttributes("description", "logging_info", "max_concurrency", "max_errors", "name", "priority", "service_role_arn", "targets", "task_arn", "task_parameters", "task_type", "window_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_maintenance_window_taskHandler", bridge.NewTFHandler(p, "aws_ssm_maintenance_window_task", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_parameter{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_parameterID", "arn", "key_id")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_parameterHandler", bridge.NewTFHandler(p, "aws_ssm_parameter", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_patch_baseline{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_patch_baselineID")
		b.ImmutableAttributes("operating_system")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_patch_baselineHandler", bridge.NewTFHandler(p, "aws_ssm_patch_baseline", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_patch_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_patch_groupID")
		b.ImmutableAttributes("baseline_id", "patch_group")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_patch_groupHandler", bridge.NewTFHandler(p, "aws_ssm_patch_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Ssm_resource_data_sync{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("ssm_resource_data_syncID")
		b.ImmutableAttributes("name", "s3_destination")
	}))[0]
	sb.RegisterHandler("TerraformAws::Ssm_resource_data_syncHandler", bridge.NewTFHandler(p, "aws_ssm_resource_data_sync", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Storagegateway_cache{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storagegateway_cacheID")
		b.ImmutableAttributes("disk_id", "gateway_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Storagegateway_cacheHandler", bridge.NewTFHandler(p, "aws_storagegateway_cache", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Storagegateway_cached_iscsi_volume{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storagegateway_cached_iscsi_volumeID", "arn", "chap_enabled", "lun_number", "network_interface_port", "target_arn", "volume_arn", "volume_id")
		b.ImmutableAttributes("gateway_arn", "network_interface_id", "snapshot_id", "source_volume_arn", "target_name", "volume_size_in_bytes")
	}))[0]
	sb.RegisterHandler("TerraformAws::Storagegateway_cached_iscsi_volumeHandler", bridge.NewTFHandler(p, "aws_storagegateway_cached_iscsi_volume", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Storagegateway_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storagegateway_gatewayID", "activation_key", "arn", "gateway_id", "gateway_ip_address")
		b.ImmutableAttributes("activation_key", "gateway_ip_address", "gateway_type", "medium_changer_type", "tape_drive_type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Storagegateway_gatewayHandler", bridge.NewTFHandler(p, "aws_storagegateway_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Storagegateway_nfs_file_share{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storagegateway_nfs_file_shareID", "arn", "fileshare_id")
		b.ImmutableAttributes("gateway_arn", "location_arn", "role_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Storagegateway_nfs_file_shareHandler", bridge.NewTFHandler(p, "aws_storagegateway_nfs_file_share", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Storagegateway_smb_file_share{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storagegateway_smb_file_shareID", "arn", "fileshare_id")
		b.ImmutableAttributes("authentication", "gateway_arn", "location_arn", "role_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Storagegateway_smb_file_shareHandler", bridge.NewTFHandler(p, "aws_storagegateway_smb_file_share", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Storagegateway_upload_buffer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storagegateway_upload_bufferID")
		b.ImmutableAttributes("disk_id", "gateway_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Storagegateway_upload_bufferHandler", bridge.NewTFHandler(p, "aws_storagegateway_upload_buffer", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Storagegateway_working_storage{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storagegateway_working_storageID")
		b.ImmutableAttributes("disk_id", "gateway_arn")
	}))[0]
	sb.RegisterHandler("TerraformAws::Storagegateway_working_storageHandler", bridge.NewTFHandler(p, "aws_storagegateway_working_storage", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Subnet{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("subnetID", "arn", "availability_zone", "availability_zone_id", "ipv6_cidr_block", "ipv6_cidr_block_association_id", "owner_id")
		b.ImmutableAttributes("availability_zone", "availability_zone_id", "cidr_block", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::SubnetHandler", bridge.NewTFHandler(p, "aws_subnet", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Swf_domain{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("swf_domainID", "name")
		b.ImmutableAttributes("description", "name", "name_prefix", "workflow_execution_retention_period_in_days")
	}))[0]
	sb.RegisterHandler("TerraformAws::Swf_domainHandler", bridge.NewTFHandler(p, "aws_swf_domain", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Transfer_server{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("transfer_serverID", "arn", "endpoint")
		b.ImmutableAttributes("identity_provider_type")
	}))[0]
	sb.RegisterHandler("TerraformAws::Transfer_serverHandler", bridge.NewTFHandler(p, "aws_transfer_server", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Transfer_ssh_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("transfer_ssh_keyID")
		b.ImmutableAttributes("body", "server_id", "user_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Transfer_ssh_keyHandler", bridge.NewTFHandler(p, "aws_transfer_ssh_key", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Transfer_user{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("transfer_userID", "arn")
		b.ImmutableAttributes("server_id", "user_name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Transfer_userHandler", bridge.NewTFHandler(p, "aws_transfer_user", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Volume_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("volume_attachmentID")
		b.ImmutableAttributes("device_name", "instance_id", "volume_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Volume_attachmentHandler", bridge.NewTFHandler(p, "aws_volume_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpcID", "arn", "default_network_acl_id", "default_route_table_id", "default_security_group_id", "dhcp_options_id", "enable_classiclink", "enable_classiclink_dns_support", "enable_dns_hostnames", "ipv6_association_id", "ipv6_cidr_block", "main_route_table_id", "owner_id")
		b.ImmutableAttributes("cidr_block")
	}))[0]
	sb.RegisterHandler("TerraformAws::VpcHandler", bridge.NewTFHandler(p, "aws_vpc", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_dhcp_options{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_dhcp_optionsID", "owner_id")
		b.ImmutableAttributes("domain_name", "domain_name_servers", "netbios_name_servers", "netbios_node_type", "ntp_servers")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_dhcp_optionsHandler", bridge.NewTFHandler(p, "aws_vpc_dhcp_options", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_dhcp_options_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_dhcp_options_associationID")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_dhcp_options_associationHandler", bridge.NewTFHandler(p, "aws_vpc_dhcp_options_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_endpoint{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_endpointID", "cidr_blocks", "dns_entry", "network_interface_ids", "policy", "prefix_list_id", "route_table_ids", "security_group_ids", "state", "subnet_ids")
		b.ImmutableAttributes("service_name", "vpc_endpoint_type", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_endpointHandler", bridge.NewTFHandler(p, "aws_vpc_endpoint", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_endpoint_connection_notification{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_endpoint_connection_notificationID", "notification_type", "state")
		b.ImmutableAttributes("vpc_endpoint_id", "vpc_endpoint_service_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_endpoint_connection_notificationHandler", bridge.NewTFHandler(p, "aws_vpc_endpoint_connection_notification", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_endpoint_route_table_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_endpoint_route_table_associationID")
		b.ImmutableAttributes("route_table_id", "vpc_endpoint_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_endpoint_route_table_associationHandler", bridge.NewTFHandler(p, "aws_vpc_endpoint_route_table_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_endpoint_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_endpoint_serviceID", "allowed_principals", "availability_zones", "base_endpoint_dns_names", "private_dns_name", "service_name", "service_type", "state")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_endpoint_serviceHandler", bridge.NewTFHandler(p, "aws_vpc_endpoint_service", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_endpoint_service_allowed_principal{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_endpoint_service_allowed_principalID")
		b.ImmutableAttributes("principal_arn", "vpc_endpoint_service_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_endpoint_service_allowed_principalHandler", bridge.NewTFHandler(p, "aws_vpc_endpoint_service_allowed_principal", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_endpoint_subnet_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_endpoint_subnet_associationID")
		b.ImmutableAttributes("subnet_id", "vpc_endpoint_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_endpoint_subnet_associationHandler", bridge.NewTFHandler(p, "aws_vpc_endpoint_subnet_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_ipv4_cidr_block_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_ipv4_cidr_block_associationID")
		b.ImmutableAttributes("cidr_block", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_ipv4_cidr_block_associationHandler", bridge.NewTFHandler(p, "aws_vpc_ipv4_cidr_block_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_peering_connection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_peering_connectionID", "accept_status", "accepter", "peer_owner_id", "peer_region", "requester")
		b.ImmutableAttributes("peer_owner_id", "peer_region", "peer_vpc_id", "vpc_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_peering_connectionHandler", bridge.NewTFHandler(p, "aws_vpc_peering_connection", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_peering_connection_accepter{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_peering_connection_accepterID", "accept_status", "accepter", "peer_owner_id", "peer_region", "peer_vpc_id", "requester", "vpc_id")
		b.ImmutableAttributes("vpc_peering_connection_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_peering_connection_accepterHandler", bridge.NewTFHandler(p, "aws_vpc_peering_connection_accepter", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpc_peering_connection_options{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpc_peering_connection_optionsID", "accepter", "requester")
		b.ImmutableAttributes("vpc_peering_connection_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpc_peering_connection_optionsHandler", bridge.NewTFHandler(p, "aws_vpc_peering_connection_options", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpn_connection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpn_connectionID", "customer_gateway_configuration", "routes", "static_routes_only", "tunnel1_address", "tunnel1_bgp_asn", "tunnel1_bgp_holdtime", "tunnel1_cgw_inside_address", "tunnel1_inside_cidr", "tunnel1_preshared_key", "tunnel1_vgw_inside_address", "tunnel2_address", "tunnel2_bgp_asn", "tunnel2_bgp_holdtime", "tunnel2_cgw_inside_address", "tunnel2_inside_cidr", "tunnel2_preshared_key", "tunnel2_vgw_inside_address", "vgw_telemetry")
		b.ImmutableAttributes("customer_gateway_id", "static_routes_only", "transit_gateway_id", "tunnel1_inside_cidr", "tunnel1_preshared_key", "tunnel2_inside_cidr", "tunnel2_preshared_key", "type", "vpn_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpn_connectionHandler", bridge.NewTFHandler(p, "aws_vpn_connection", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpn_connection_route{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpn_connection_routeID")
		b.ImmutableAttributes("destination_cidr_block", "vpn_connection_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpn_connection_routeHandler", bridge.NewTFHandler(p, "aws_vpn_connection_route", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpn_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpn_gatewayID", "amazon_side_asn", "vpc_id")
		b.ImmutableAttributes("amazon_side_asn", "availability_zone")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpn_gatewayHandler", bridge.NewTFHandler(p, "aws_vpn_gateway", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpn_gateway_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpn_gateway_attachmentID")
		b.ImmutableAttributes("vpc_id", "vpn_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpn_gateway_attachmentHandler", bridge.NewTFHandler(p, "aws_vpn_gateway_attachment", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Vpn_gateway_route_propagation{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("vpn_gateway_route_propagationID")
		b.ImmutableAttributes("route_table_id", "vpn_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Vpn_gateway_route_propagationHandler", bridge.NewTFHandler(p, "aws_vpn_gateway_route_propagation", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_byte_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_byte_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_byte_match_setHandler", bridge.NewTFHandler(p, "aws_waf_byte_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_geo_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_geo_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_geo_match_setHandler", bridge.NewTFHandler(p, "aws_waf_geo_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_ipset{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_ipsetID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_ipsetHandler", bridge.NewTFHandler(p, "aws_waf_ipset", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_rate_based_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_rate_based_ruleID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_rate_based_ruleHandler", bridge.NewTFHandler(p, "aws_waf_rate_based_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_regex_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_regex_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_regex_match_setHandler", bridge.NewTFHandler(p, "aws_waf_regex_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_regex_pattern_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_regex_pattern_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_regex_pattern_setHandler", bridge.NewTFHandler(p, "aws_waf_regex_pattern_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_ruleID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_ruleHandler", bridge.NewTFHandler(p, "aws_waf_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_rule_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_rule_groupID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_rule_groupHandler", bridge.NewTFHandler(p, "aws_waf_rule_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_size_constraint_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_size_constraint_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_size_constraint_setHandler", bridge.NewTFHandler(p, "aws_waf_size_constraint_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_sql_injection_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_sql_injection_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_sql_injection_match_setHandler", bridge.NewTFHandler(p, "aws_waf_sql_injection_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_web_acl{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_web_aclID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_web_aclHandler", bridge.NewTFHandler(p, "aws_waf_web_acl", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Waf_xss_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("waf_xss_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Waf_xss_match_setHandler", bridge.NewTFHandler(p, "aws_waf_xss_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_byte_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_byte_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_byte_match_setHandler", bridge.NewTFHandler(p, "aws_wafregional_byte_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_geo_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_geo_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_geo_match_setHandler", bridge.NewTFHandler(p, "aws_wafregional_geo_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_ipset{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_ipsetID", "arn")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_ipsetHandler", bridge.NewTFHandler(p, "aws_wafregional_ipset", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_rate_based_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_rate_based_ruleID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_rate_based_ruleHandler", bridge.NewTFHandler(p, "aws_wafregional_rate_based_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_regex_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_regex_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_regex_match_setHandler", bridge.NewTFHandler(p, "aws_wafregional_regex_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_regex_pattern_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_regex_pattern_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_regex_pattern_setHandler", bridge.NewTFHandler(p, "aws_wafregional_regex_pattern_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_ruleID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_ruleHandler", bridge.NewTFHandler(p, "aws_wafregional_rule", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_rule_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_rule_groupID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_rule_groupHandler", bridge.NewTFHandler(p, "aws_wafregional_rule_group", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_size_constraint_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_size_constraint_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_size_constraint_setHandler", bridge.NewTFHandler(p, "aws_wafregional_size_constraint_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_sql_injection_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_sql_injection_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_sql_injection_match_setHandler", bridge.NewTFHandler(p, "aws_wafregional_sql_injection_match_set", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_web_acl{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_web_aclID")
		b.ImmutableAttributes("metric_name", "name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_web_aclHandler", bridge.NewTFHandler(p, "aws_wafregional_web_acl", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_web_acl_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_web_acl_associationID")
		b.ImmutableAttributes("resource_arn", "web_acl_id")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_web_acl_associationHandler", bridge.NewTFHandler(p, "aws_wafregional_web_acl_association", rt), rt)

	rt = sb.RegisterTypes("TerraformAws", sb.BuildResource(&Wafregional_xss_match_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("wafregional_xss_match_setID")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAws::Wafregional_xss_match_setHandler", bridge.NewTFHandler(p, "aws_wafregional_xss_match_set", rt), rt)

	// Registration of non-resource types
	sb.RegisterTypes("TerraformAws",
		&Acm_certificate__domain_validation_options{},
		&Acmpca_certificate_authority__certificate_authority_configuration__subject{},
		&Acmpca_certificate_authority__certificate_authority_configuration{},
		&Acmpca_certificate_authority__revocation_configuration__crl_configuration{},
		&Acmpca_certificate_authority__revocation_configuration{},
		&Alb__access_logs{},
		&Alb__subnet_mapping{},
		&Alb_listener__default_action__authenticate_cognito{},
		&Alb_listener__default_action__authenticate_oidc{},
		&Alb_listener__default_action__fixed_response{},
		&Alb_listener__default_action__redirect{},
		&Alb_listener__default_action{},
		&Alb_listener_rule__action__authenticate_cognito{},
		&Alb_listener_rule__action__authenticate_oidc{},
		&Alb_listener_rule__action__fixed_response{},
		&Alb_listener_rule__action__redirect{},
		&Alb_listener_rule__action{},
		&Alb_listener_rule__condition{},
		&Alb_target_group__health_check{},
		&Alb_target_group__stickiness{},
		&Ami__ebs_block_device{},
		&Ami__ephemeral_block_device{},
		&Ami_copy__ebs_block_device{},
		&Ami_copy__ephemeral_block_device{},
		&Ami_from_instance__ebs_block_device{},
		&Ami_from_instance__ephemeral_block_device{},
		&Api_gateway_account__throttle_settings{},
		&Api_gateway_api_key__stage_key{},
		&Api_gateway_documentation_part__location{},
		&Api_gateway_domain_name__endpoint_configuration{},
		&Api_gateway_method_settings__settings{},
		&Api_gateway_rest_api__endpoint_configuration{},
		&Api_gateway_stage__access_log_settings{},
		&Api_gateway_usage_plan__api_stages{},
		&Api_gateway_usage_plan__quota_settings{},
		&Api_gateway_usage_plan__throttle_settings{},
		&Appautoscaling_policy__step_adjustment{},
		&Appautoscaling_policy__step_scaling_policy_configuration__step_adjustment{},
		&Appautoscaling_policy__step_scaling_policy_configuration{},
		&Appautoscaling_policy__target_tracking_scaling_policy_configuration__customized_metric_specification__dimensions{},
		&Appautoscaling_policy__target_tracking_scaling_policy_configuration__customized_metric_specification{},
		&Appautoscaling_policy__target_tracking_scaling_policy_configuration__predefined_metric_specification{},
		&Appautoscaling_policy__target_tracking_scaling_policy_configuration{},
		&Appautoscaling_scheduled_action__scalable_target_action{},
		&Appmesh_route__spec__http_route__action__weighted_target{},
		&Appmesh_route__spec__http_route__action{},
		&Appmesh_route__spec__http_route__match{},
		&Appmesh_route__spec__http_route{},
		&Appmesh_route__spec{},
		&Appmesh_virtual_node__spec__listener__port_mapping{},
		&Appmesh_virtual_node__spec__listener{},
		&Appmesh_virtual_node__spec__service_discovery__dns{},
		&Appmesh_virtual_node__spec__service_discovery{},
		&Appmesh_virtual_node__spec{},
		&Appmesh_virtual_router__spec{},
		&Appsync_datasource__dynamodb_config{},
		&Appsync_datasource__elasticsearch_config{},
		&Appsync_datasource__http_config{},
		&Appsync_datasource__lambda_config{},
		&Appsync_graphql_api__log_config{},
		&Appsync_graphql_api__openid_connect_config{},
		&Appsync_graphql_api__user_pool_config{},
		&Athena_database__encryption_configuration{},
		&Autoscaling_group__initial_lifecycle_hook{},
		&Autoscaling_group__launch_template{},
		&Autoscaling_group__mixed_instances_policy__instances_distribution{},
		&Autoscaling_group__mixed_instances_policy__launch_template__launch_template_specification{},
		&Autoscaling_group__mixed_instances_policy__launch_template__override{},
		&Autoscaling_group__mixed_instances_policy__launch_template{},
		&Autoscaling_group__mixed_instances_policy{},
		&Autoscaling_group__tag{},
		&Autoscaling_policy__step_adjustment{},
		&Autoscaling_policy__target_tracking_configuration__customized_metric_specification__metric_dimension{},
		&Autoscaling_policy__target_tracking_configuration__customized_metric_specification{},
		&Autoscaling_policy__target_tracking_configuration__predefined_metric_specification{},
		&Autoscaling_policy__target_tracking_configuration{},
		&Batch_compute_environment__compute_resources{},
		&Batch_job_definition__retry_strategy{},
		&Batch_job_definition__timeout{},
		&Budgets_budget__cost_types{},
		&Cloudfront_distribution__cache_behavior__forwarded_values__cookies{},
		&Cloudfront_distribution__cache_behavior__forwarded_values{},
		&Cloudfront_distribution__cache_behavior__lambda_function_association{},
		&Cloudfront_distribution__cache_behavior{},
		&Cloudfront_distribution__custom_error_response{},
		&Cloudfront_distribution__default_cache_behavior__forwarded_values__cookies{},
		&Cloudfront_distribution__default_cache_behavior__forwarded_values{},
		&Cloudfront_distribution__default_cache_behavior__lambda_function_association{},
		&Cloudfront_distribution__default_cache_behavior{},
		&Cloudfront_distribution__logging_config{},
		&Cloudfront_distribution__ordered_cache_behavior__forwarded_values__cookies{},
		&Cloudfront_distribution__ordered_cache_behavior__forwarded_values{},
		&Cloudfront_distribution__ordered_cache_behavior__lambda_function_association{},
		&Cloudfront_distribution__ordered_cache_behavior{},
		&Cloudfront_distribution__origin__custom_header{},
		&Cloudfront_distribution__origin__custom_origin_config{},
		&Cloudfront_distribution__origin__s3_origin_config{},
		&Cloudfront_distribution__origin{},
		&Cloudfront_distribution__restrictions__geo_restriction{},
		&Cloudfront_distribution__restrictions{},
		&Cloudfront_distribution__viewer_certificate{},
		&Cloudhsm_v2_cluster__cluster_certificates{},
		&Cloudtrail__event_selector__data_resource{},
		&Cloudtrail__event_selector{},
		&Cloudwatch_event_permission__condition{},
		&Cloudwatch_event_target__batch_target{},
		&Cloudwatch_event_target__ecs_target__network_configuration{},
		&Cloudwatch_event_target__ecs_target{},
		&Cloudwatch_event_target__input_transformer{},
		&Cloudwatch_event_target__kinesis_target{},
		&Cloudwatch_event_target__run_command_targets{},
		&Cloudwatch_event_target__sqs_target{},
		&Cloudwatch_log_metric_filter__metric_transformation{},
		&Codebuild_project__artifacts{},
		&Codebuild_project__cache{},
		&Codebuild_project__environment__environment_variable{},
		&Codebuild_project__environment{},
		&Codebuild_project__secondary_artifacts{},
		&Codebuild_project__secondary_sources__auth{},
		&Codebuild_project__secondary_sources{},
		&Codebuild_project__source__auth{},
		&Codebuild_project__source{},
		&Codebuild_project__vpc_config{},
		&Codecommit_trigger__trigger{},
		&Codedeploy_deployment_config__minimum_healthy_hosts{},
		&Codedeploy_deployment_config__traffic_routing_config__time_based_canary{},
		&Codedeploy_deployment_config__traffic_routing_config__time_based_linear{},
		&Codedeploy_deployment_config__traffic_routing_config{},
		&Codedeploy_deployment_group__alarm_configuration{},
		&Codedeploy_deployment_group__auto_rollback_configuration{},
		&Codedeploy_deployment_group__blue_green_deployment_config__deployment_ready_option{},
		&Codedeploy_deployment_group__blue_green_deployment_config__green_fleet_provisioning_option{},
		&Codedeploy_deployment_group__blue_green_deployment_config__terminate_blue_instances_on_deployment_success{},
		&Codedeploy_deployment_group__blue_green_deployment_config{},
		&Codedeploy_deployment_group__deployment_style{},
		&Codedeploy_deployment_group__ec2_tag_filter{},
		&Codedeploy_deployment_group__ec2_tag_set__ec2_tag_filter{},
		&Codedeploy_deployment_group__ec2_tag_set{},
		&Codedeploy_deployment_group__ecs_service{},
		&Codedeploy_deployment_group__load_balancer_info__elb_info{},
		&Codedeploy_deployment_group__load_balancer_info__target_group_info{},
		&Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__prod_traffic_route{},
		&Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__target_group{},
		&Codedeploy_deployment_group__load_balancer_info__target_group_pair_info__test_traffic_route{},
		&Codedeploy_deployment_group__load_balancer_info__target_group_pair_info{},
		&Codedeploy_deployment_group__load_balancer_info{},
		&Codedeploy_deployment_group__on_premises_instance_tag_filter{},
		&Codedeploy_deployment_group__trigger_configuration{},
		&Codepipeline__artifact_store__encryption_key{},
		&Codepipeline__artifact_store{},
		&Codepipeline__stage__action{},
		&Codepipeline__stage{},
		&Codepipeline_webhook__authentication_configuration{},
		&Codepipeline_webhook__filter{},
		&Cognito_identity_pool__cognito_identity_providers{},
		&Cognito_identity_pool_roles_attachment__role_mapping__mapping_rule{},
		&Cognito_identity_pool_roles_attachment__role_mapping{},
		&Cognito_identity_pool_roles_attachment__roles{},
		&Cognito_resource_server__scope{},
		&Cognito_user_pool__admin_create_user_config__invite_message_template{},
		&Cognito_user_pool__admin_create_user_config{},
		&Cognito_user_pool__device_configuration{},
		&Cognito_user_pool__email_configuration{},
		&Cognito_user_pool__lambda_config{},
		&Cognito_user_pool__password_policy{},
		&Cognito_user_pool__schema__number_attribute_constraints{},
		&Cognito_user_pool__schema__string_attribute_constraints{},
		&Cognito_user_pool__schema{},
		&Cognito_user_pool__sms_configuration{},
		&Cognito_user_pool__verification_message_template{},
		&Config_config_rule__scope{},
		&Config_config_rule__source__source_detail{},
		&Config_config_rule__source{},
		&Config_configuration_aggregator__account_aggregation_source{},
		&Config_configuration_aggregator__organization_aggregation_source{},
		&Config_configuration_recorder__recording_group{},
		&Config_delivery_channel__snapshot_delivery_properties{},
		&Datasync_location_efs__ec2_config{},
		&Datasync_location_nfs__on_prem_config{},
		&Datasync_location_s3__s3_config{},
		&Datasync_task__options{},
		&Dax_cluster__nodes{},
		&Dax_cluster__server_side_encryption{},
		&Dax_parameter_group__parameters{},
		&Db_instance__s3_import{},
		&Db_option_group__option__option_settings{},
		&Db_option_group__option{},
		&Db_parameter_group__parameter{},
		&Db_security_group__ingress{},
		&Default_network_acl__egress{},
		&Default_network_acl__ingress{},
		&Default_route_table__route{},
		&Default_security_group__egress{},
		&Default_security_group__ingress{},
		&Directory_service_directory__connect_settings{},
		&Directory_service_directory__vpc_settings{},
		&Dlm_lifecycle_policy__policy_details__schedule__create_rule{},
		&Dlm_lifecycle_policy__policy_details__schedule__retain_rule{},
		&Dlm_lifecycle_policy__policy_details__schedule{},
		&Dlm_lifecycle_policy__policy_details{},
		&Dms_endpoint__mongodb_settings{},
		&Dms_endpoint__s3_settings{},
		&Docdb_cluster_parameter_group__parameter{},
		&Dynamodb_global_table__replica{},
		&Dynamodb_table__attribute{},
		&Dynamodb_table__global_secondary_index{},
		&Dynamodb_table__local_secondary_index{},
		&Dynamodb_table__point_in_time_recovery{},
		&Dynamodb_table__server_side_encryption{},
		&Dynamodb_table__ttl{},
		&Ec2_fleet__launch_template_config__launch_template_specification{},
		&Ec2_fleet__launch_template_config__override{},
		&Ec2_fleet__launch_template_config{},
		&Ec2_fleet__on_demand_options{},
		&Ec2_fleet__spot_options{},
		&Ec2_fleet__target_capacity_specification{},
		&Ecs_service__deployment_controller{},
		&Ecs_service__load_balancer{},
		&Ecs_service__network_configuration{},
		&Ecs_service__ordered_placement_strategy{},
		&Ecs_service__placement_constraints{},
		&Ecs_service__placement_strategy{},
		&Ecs_service__service_registries{},
		&Ecs_task_definition__placement_constraints{},
		&Ecs_task_definition__volume__docker_volume_configuration{},
		&Ecs_task_definition__volume{},
		&Eks_cluster__certificate_authority{},
		&Eks_cluster__vpc_config{},
		&Elastic_beanstalk_application__appversion_lifecycle{},
		&Elastic_beanstalk_configuration_template__setting{},
		&Elastic_beanstalk_environment__all_settings{},
		&Elastic_beanstalk_environment__setting{},
		&Elasticache_cluster__cache_nodes{},
		&Elasticache_parameter_group__parameter{},
		&Elasticache_replication_group__cluster_mode{},
		&Elasticsearch_domain__cluster_config{},
		&Elasticsearch_domain__cognito_options{},
		&Elasticsearch_domain__ebs_options{},
		&Elasticsearch_domain__encrypt_at_rest{},
		&Elasticsearch_domain__log_publishing_options{},
		&Elasticsearch_domain__node_to_node_encryption{},
		&Elasticsearch_domain__snapshot_options{},
		&Elasticsearch_domain__vpc_options{},
		&Elastictranscoder_pipeline__content_config{},
		&Elastictranscoder_pipeline__content_config_permissions{},
		&Elastictranscoder_pipeline__notifications{},
		&Elastictranscoder_pipeline__thumbnail_config{},
		&Elastictranscoder_pipeline__thumbnail_config_permissions{},
		&Elastictranscoder_preset__audio{},
		&Elastictranscoder_preset__audio_codec_options{},
		&Elastictranscoder_preset__thumbnails{},
		&Elastictranscoder_preset__video{},
		&Elastictranscoder_preset__video_watermarks{},
		&Elb__access_logs{},
		&Elb__health_check{},
		&Elb__listener{},
		&Emr_cluster__bootstrap_action{},
		&Emr_cluster__ec2_attributes{},
		&Emr_cluster__instance_group__ebs_config{},
		&Emr_cluster__instance_group{},
		&Emr_cluster__kerberos_attributes{},
		&Emr_cluster__step__hadoop_jar_step{},
		&Emr_cluster__step{},
		&Emr_instance_group__ebs_config{},
		&Gamelift_alias__routing_strategy{},
		&Gamelift_build__storage_location{},
		&Gamelift_fleet__ec2_inbound_permission{},
		&Gamelift_fleet__resource_creation_limit_policy{},
		&Gamelift_fleet__runtime_configuration__server_process{},
		&Gamelift_fleet__runtime_configuration{},
		&Gamelift_game_session_queue__player_latency_policy{},
		&Glacier_vault__notification{},
		&Globalaccelerator_accelerator__attributes{},
		&Globalaccelerator_accelerator__ip_sets{},
		&Glue_catalog_table__partition_keys{},
		&Glue_catalog_table__storage_descriptor__columns{},
		&Glue_catalog_table__storage_descriptor__ser_de_info{},
		&Glue_catalog_table__storage_descriptor__skewed_info{},
		&Glue_catalog_table__storage_descriptor__sort_columns{},
		&Glue_catalog_table__storage_descriptor{},
		&Glue_classifier__grok_classifier{},
		&Glue_classifier__json_classifier{},
		&Glue_classifier__xml_classifier{},
		&Glue_connection__physical_connection_requirements{},
		&Glue_crawler__dynamodb_target{},
		&Glue_crawler__jdbc_target{},
		&Glue_crawler__s3_target{},
		&Glue_crawler__schema_change_policy{},
		&Glue_job__command{},
		&Glue_job__execution_property{},
		&Glue_security_configuration__encryption_configuration__cloudwatch_encryption{},
		&Glue_security_configuration__encryption_configuration__job_bookmarks_encryption{},
		&Glue_security_configuration__encryption_configuration__s3_encryption{},
		&Glue_security_configuration__encryption_configuration{},
		&Glue_trigger__actions{},
		&Glue_trigger__predicate__conditions{},
		&Glue_trigger__predicate{},
		&Instance__credit_specification{},
		&Instance__ebs_block_device{},
		&Instance__ephemeral_block_device{},
		&Instance__network_interface{},
		&Instance__root_block_device{},
		&Iot_thing_type__properties{},
		&Iot_topic_rule__cloudwatch_alarm{},
		&Iot_topic_rule__cloudwatch_metric{},
		&Iot_topic_rule__dynamodb{},
		&Iot_topic_rule__elasticsearch{},
		&Iot_topic_rule__firehose{},
		&Iot_topic_rule__kinesis{},
		&Iot_topic_rule__lambda{},
		&Iot_topic_rule__republish{},
		&Iot_topic_rule__s3{},
		&Iot_topic_rule__sns{},
		&Iot_topic_rule__sqs{},
		&Kinesis_analytics_application__cloudwatch_logging_options{},
		&Kinesis_analytics_application__inputs__kinesis_firehose{},
		&Kinesis_analytics_application__inputs__kinesis_stream{},
		&Kinesis_analytics_application__inputs__parallelism{},
		&Kinesis_analytics_application__inputs__processing_configuration__lambda{},
		&Kinesis_analytics_application__inputs__processing_configuration{},
		&Kinesis_analytics_application__inputs__schema__record_columns{},
		&Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters__csv{},
		&Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters__json{},
		&Kinesis_analytics_application__inputs__schema__record_format__mapping_parameters{},
		&Kinesis_analytics_application__inputs__schema__record_format{},
		&Kinesis_analytics_application__inputs__schema{},
		&Kinesis_analytics_application__inputs__starting_position_configuration{},
		&Kinesis_analytics_application__inputs{},
		&Kinesis_analytics_application__outputs__kinesis_firehose{},
		&Kinesis_analytics_application__outputs__kinesis_stream{},
		&Kinesis_analytics_application__outputs__lambda{},
		&Kinesis_analytics_application__outputs__schema{},
		&Kinesis_analytics_application__outputs{},
		&Kinesis_analytics_application__reference_data_sources__s3{},
		&Kinesis_analytics_application__reference_data_sources__schema__record_columns{},
		&Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters__csv{},
		&Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters__json{},
		&Kinesis_analytics_application__reference_data_sources__schema__record_format__mapping_parameters{},
		&Kinesis_analytics_application__reference_data_sources__schema__record_format{},
		&Kinesis_analytics_application__reference_data_sources__schema{},
		&Kinesis_analytics_application__reference_data_sources{},
		&Kinesis_firehose_delivery_stream__elasticsearch_configuration__cloudwatch_logging_options{},
		&Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration__processors__parameters{},
		&Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration__processors{},
		&Kinesis_firehose_delivery_stream__elasticsearch_configuration__processing_configuration{},
		&Kinesis_firehose_delivery_stream__elasticsearch_configuration{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__cloudwatch_logging_options{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer__hive_json_ser_de{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer__open_x_json_ser_de{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration__deserializer{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__input_format_configuration{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer__orc_ser_de{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer__parquet_ser_de{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration__serializer{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__output_format_configuration{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration__schema_configuration{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__data_format_conversion_configuration{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration__processors__parameters{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration__processors{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__processing_configuration{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__s3_backup_configuration__cloudwatch_logging_options{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration__s3_backup_configuration{},
		&Kinesis_firehose_delivery_stream__extended_s3_configuration{},
		&Kinesis_firehose_delivery_stream__kinesis_source_configuration{},
		&Kinesis_firehose_delivery_stream__redshift_configuration__cloudwatch_logging_options{},
		&Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration__processors__parameters{},
		&Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration__processors{},
		&Kinesis_firehose_delivery_stream__redshift_configuration__processing_configuration{},
		&Kinesis_firehose_delivery_stream__redshift_configuration__s3_backup_configuration__cloudwatch_logging_options{},
		&Kinesis_firehose_delivery_stream__redshift_configuration__s3_backup_configuration{},
		&Kinesis_firehose_delivery_stream__redshift_configuration{},
		&Kinesis_firehose_delivery_stream__s3_configuration__cloudwatch_logging_options{},
		&Kinesis_firehose_delivery_stream__s3_configuration{},
		&Kinesis_firehose_delivery_stream__splunk_configuration__cloudwatch_logging_options{},
		&Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration__processors__parameters{},
		&Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration__processors{},
		&Kinesis_firehose_delivery_stream__splunk_configuration__processing_configuration{},
		&Kinesis_firehose_delivery_stream__splunk_configuration{},
		&Kms_grant__constraints{},
		&Lambda_alias__routing_config{},
		&Lambda_function__dead_letter_config{},
		&Lambda_function__environment{},
		&Lambda_function__tracing_config{},
		&Lambda_function__vpc_config{},
		&Launch_configuration__ebs_block_device{},
		&Launch_configuration__ephemeral_block_device{},
		&Launch_configuration__root_block_device{},
		&Launch_template__block_device_mappings__ebs{},
		&Launch_template__block_device_mappings{},
		&Launch_template__capacity_reservation_specification__capacity_reservation_target{},
		&Launch_template__capacity_reservation_specification{},
		&Launch_template__credit_specification{},
		&Launch_template__elastic_gpu_specifications{},
		&Launch_template__iam_instance_profile{},
		&Launch_template__instance_market_options__spot_options{},
		&Launch_template__instance_market_options{},
		&Launch_template__license_specification{},
		&Launch_template__monitoring{},
		&Launch_template__network_interfaces{},
		&Launch_template__placement{},
		&Launch_template__tag_specifications{},
		&Lb__access_logs{},
		&Lb__subnet_mapping{},
		&Lb_listener__default_action__authenticate_cognito{},
		&Lb_listener__default_action__authenticate_oidc{},
		&Lb_listener__default_action__fixed_response{},
		&Lb_listener__default_action__redirect{},
		&Lb_listener__default_action{},
		&Lb_listener_rule__action__authenticate_cognito{},
		&Lb_listener_rule__action__authenticate_oidc{},
		&Lb_listener_rule__action__fixed_response{},
		&Lb_listener_rule__action__redirect{},
		&Lb_listener_rule__action{},
		&Lb_listener_rule__condition{},
		&Lb_ssl_negotiation_policy__attribute{},
		&Lb_target_group__health_check{},
		&Lb_target_group__stickiness{},
		&Load_balancer_policy__policy_attribute{},
		&Macie_s3_bucket_association__classification_type{},
		&Media_package_channel__hls_ingest__ingest_endpoints{},
		&Media_package_channel__hls_ingest{},
		&Mq_broker__configuration{},
		&Mq_broker__instances{},
		&Mq_broker__logs{},
		&Mq_broker__maintenance_window_start_time{},
		&Mq_broker__user{},
		&Neptune_cluster_parameter_group__parameter{},
		&Neptune_parameter_group__parameter{},
		&Network_acl__egress{},
		&Network_acl__ingress{},
		&Network_interface__attachment{},
		&Opsworks_application__app_source{},
		&Opsworks_application__environment{},
		&Opsworks_application__ssl_configuration{},
		&Opsworks_custom_layer__ebs_volume{},
		&Opsworks_ganglia_layer__ebs_volume{},
		&Opsworks_haproxy_layer__ebs_volume{},
		&Opsworks_instance__ebs_block_device{},
		&Opsworks_instance__ephemeral_block_device{},
		&Opsworks_instance__root_block_device{},
		&Opsworks_java_app_layer__ebs_volume{},
		&Opsworks_memcached_layer__ebs_volume{},
		&Opsworks_mysql_layer__ebs_volume{},
		&Opsworks_nodejs_app_layer__ebs_volume{},
		&Opsworks_php_app_layer__ebs_volume{},
		&Opsworks_rails_app_layer__ebs_volume{},
		&Opsworks_stack__custom_cookbooks_source{},
		&Opsworks_static_web_layer__ebs_volume{},
		&Pinpoint_app__campaign_hook{},
		&Pinpoint_app__limits{},
		&Pinpoint_app__quiet_time{},
		&Rds_cluster__s3_import{},
		&Rds_cluster__scaling_configuration{},
		&Rds_cluster_parameter_group__parameter{},
		&Redshift_cluster__logging{},
		&Redshift_cluster__snapshot_copy{},
		&Redshift_parameter_group__parameter{},
		&Redshift_security_group__ingress{},
		&Resourcegroups_group__resource_query{},
		&Route53_record__alias{},
		&Route53_record__failover_routing_policy{},
		&Route53_record__geolocation_routing_policy{},
		&Route53_record__latency_routing_policy{},
		&Route53_record__weighted_routing_policy{},
		&Route53_zone__vpc{},
		&Route_table__route{},
		&S3_bucket__cors_rule{},
		&S3_bucket__lifecycle_rule__expiration{},
		&S3_bucket__lifecycle_rule__noncurrent_version_expiration{},
		&S3_bucket__lifecycle_rule__noncurrent_version_transition{},
		&S3_bucket__lifecycle_rule__transition{},
		&S3_bucket__lifecycle_rule{},
		&S3_bucket__logging{},
		&S3_bucket__object_lock_configuration__rule__default_retention{},
		&S3_bucket__object_lock_configuration__rule{},
		&S3_bucket__object_lock_configuration{},
		&S3_bucket__replication_configuration__rules__destination__access_control_translation{},
		&S3_bucket__replication_configuration__rules__destination{},
		&S3_bucket__replication_configuration__rules__filter{},
		&S3_bucket__replication_configuration__rules__source_selection_criteria__sse_kms_encrypted_objects{},
		&S3_bucket__replication_configuration__rules__source_selection_criteria{},
		&S3_bucket__replication_configuration__rules{},
		&S3_bucket__replication_configuration{},
		&S3_bucket__server_side_encryption_configuration__rule__apply_server_side_encryption_by_default{},
		&S3_bucket__server_side_encryption_configuration__rule{},
		&S3_bucket__server_side_encryption_configuration{},
		&S3_bucket__versioning{},
		&S3_bucket__website{},
		&S3_bucket_inventory__destination__bucket__encryption__sse_kms{},
		&S3_bucket_inventory__destination__bucket__encryption__sse_s3{},
		&S3_bucket_inventory__destination__bucket__encryption{},
		&S3_bucket_inventory__destination__bucket{},
		&S3_bucket_inventory__destination{},
		&S3_bucket_inventory__filter{},
		&S3_bucket_inventory__schedule{},
		&S3_bucket_metric__filter{},
		&S3_bucket_notification__lambda_function{},
		&S3_bucket_notification__queue{},
		&S3_bucket_notification__topic{},
		&Secretsmanager_secret__rotation_rules{},
		&Security_group__egress{},
		&Security_group__ingress{},
		&Service_discovery_service__dns_config__dns_records{},
		&Service_discovery_service__dns_config{},
		&Service_discovery_service__health_check_config{},
		&Service_discovery_service__health_check_custom_config{},
		&Ses_event_destination__cloudwatch_destination{},
		&Ses_event_destination__kinesis_destination{},
		&Ses_event_destination__sns_destination{},
		&Ses_receipt_rule__add_header_action{},
		&Ses_receipt_rule__bounce_action{},
		&Ses_receipt_rule__lambda_action{},
		&Ses_receipt_rule__s3_action{},
		&Ses_receipt_rule__sns_action{},
		&Ses_receipt_rule__stop_action{},
		&Ses_receipt_rule__workmail_action{},
		&Spot_fleet_request__launch_specification__ebs_block_device{},
		&Spot_fleet_request__launch_specification__ephemeral_block_device{},
		&Spot_fleet_request__launch_specification__root_block_device{},
		&Spot_fleet_request__launch_specification{},
		&Spot_instance_request__credit_specification{},
		&Spot_instance_request__ebs_block_device{},
		&Spot_instance_request__ephemeral_block_device{},
		&Spot_instance_request__network_interface{},
		&Spot_instance_request__root_block_device{},
		&Ssm_association__output_location{},
		&Ssm_association__targets{},
		&Ssm_document__parameter{},
		&Ssm_document__permissions{},
		&Ssm_maintenance_window_target__targets{},
		&Ssm_maintenance_window_task__logging_info{},
		&Ssm_maintenance_window_task__targets{},
		&Ssm_maintenance_window_task__task_parameters{},
		&Ssm_patch_baseline__approval_rule__patch_filter{},
		&Ssm_patch_baseline__approval_rule{},
		&Ssm_patch_baseline__global_filter{},
		&Ssm_resource_data_sync__s3_destination{},
		&Storagegateway_gateway__smb_active_directory_settings{},
		&Storagegateway_nfs_file_share__nfs_file_share_defaults{},
		&Vpc_endpoint__dns_entry{},
		&Vpc_peering_connection__accepter{},
		&Vpc_peering_connection__requester{},
		&Vpc_peering_connection_accepter__accepter{},
		&Vpc_peering_connection_accepter__requester{},
		&Vpc_peering_connection_options__accepter{},
		&Vpc_peering_connection_options__requester{},
		&Vpn_connection__routes{},
		&Vpn_connection__vgw_telemetry{},
		&Waf_byte_match_set__byte_match_tuples__field_to_match{},
		&Waf_byte_match_set__byte_match_tuples{},
		&Waf_geo_match_set__geo_match_constraint{},
		&Waf_ipset__ip_set_descriptors{},
		&Waf_rate_based_rule__predicates{},
		&Waf_regex_match_set__regex_match_tuple__field_to_match{},
		&Waf_regex_match_set__regex_match_tuple{},
		&Waf_rule__predicates{},
		&Waf_rule_group__activated_rule__action{},
		&Waf_rule_group__activated_rule{},
		&Waf_size_constraint_set__size_constraints__field_to_match{},
		&Waf_size_constraint_set__size_constraints{},
		&Waf_sql_injection_match_set__sql_injection_match_tuples__field_to_match{},
		&Waf_sql_injection_match_set__sql_injection_match_tuples{},
		&Waf_web_acl__default_action{},
		&Waf_web_acl__rules__action{},
		&Waf_web_acl__rules__override_action{},
		&Waf_web_acl__rules{},
		&Waf_xss_match_set__xss_match_tuples__field_to_match{},
		&Waf_xss_match_set__xss_match_tuples{},
		&Wafregional_byte_match_set__byte_match_tuple__field_to_match{},
		&Wafregional_byte_match_set__byte_match_tuple{},
		&Wafregional_byte_match_set__byte_match_tuples__field_to_match{},
		&Wafregional_byte_match_set__byte_match_tuples{},
		&Wafregional_geo_match_set__geo_match_constraint{},
		&Wafregional_ipset__ip_set_descriptor{},
		&Wafregional_rate_based_rule__predicate{},
		&Wafregional_regex_match_set__regex_match_tuple__field_to_match{},
		&Wafregional_regex_match_set__regex_match_tuple{},
		&Wafregional_rule__predicate{},
		&Wafregional_rule_group__activated_rule__action{},
		&Wafregional_rule_group__activated_rule{},
		&Wafregional_size_constraint_set__size_constraints__field_to_match{},
		&Wafregional_size_constraint_set__size_constraints{},
		&Wafregional_sql_injection_match_set__sql_injection_match_tuple__field_to_match{},
		&Wafregional_sql_injection_match_set__sql_injection_match_tuple{},
		&Wafregional_web_acl__default_action{},
		&Wafregional_web_acl__rule__action{},
		&Wafregional_web_acl__rule__override_action{},
		&Wafregional_web_acl__rule{},
		&Wafregional_xss_match_set__xss_match_tuple__field_to_match{},
		&Wafregional_xss_match_set__xss_match_tuple{})
}
