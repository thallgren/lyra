// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-Provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package generated

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/lyraproj/lyra/pkg/bridge"
	"github.com/lyraproj/pcore/px"
	"github.com/lyraproj/servicesdk/service"
)

func Initialize(sb *service.Builder, p *schema.Provider) {
	var evs []px.Type
	sb.RegisterAPI("TerraformGitHub::GenericHandler", bridge.NewTFHandler(nil, "", nil))

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_branch_protection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("enforce_admins", "etag", "required_pull_request_reviews", "required_status_checks", "restrictions")
		b.ImmutableAttributes("branch", "repository")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_branch_protectionHandler", bridge.NewTFHandler(p, "github_branch_protection", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_issue_label{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("description", "etag", "url")
		b.ImmutableAttributes("repository")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_issue_labelHandler", bridge.NewTFHandler(p, "github_issue_label", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_membership{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("etag", "role")
		b.ImmutableAttributes("username")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_membershipHandler", bridge.NewTFHandler(p, "github_membership", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_organization_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("body", "etag", "url")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_organization_projectHandler", bridge.NewTFHandler(p, "github_organization_project", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_organization_webhook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("active", "configuration", "etag", "url")
		b.ImmutableAttributes("name")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_organization_webhookHandler", bridge.NewTFHandler(p, "github_organization_webhook", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_project_column{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("etag")
		b.ImmutableAttributes("project_id")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_project_columnHandler", bridge.NewTFHandler(p, "github_project_column", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_repository{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("allow_merge_commit", "allow_rebase_merge", "allow_squash_merge", "archived", "auto_init", "default_branch", "description", "etag", "full_name", "git_clone_url", "gitignore_template", "has_downloads", "has_issues", "has_projects", "has_wiki", "homepage_url", "html_url", "http_clone_url", "license_template", "private", "ssh_clone_url", "svn_url", "topics")
		b.ImmutableAttributes("auto_init", "gitignore_template", "license_template", "name")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_repositoryHandler", bridge.NewTFHandler(p, "github_repository", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_repository_collaborator{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("permission")
		b.ImmutableAttributes("permission", "repository", "username")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_repository_collaboratorHandler", bridge.NewTFHandler(p, "github_repository_collaborator", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_repository_deploy_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("etag", "read_only")
		b.ImmutableAttributes("key", "read_only", "repository", "title")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_repository_deploy_keyHandler", bridge.NewTFHandler(p, "github_repository_deploy_key", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_repository_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("body", "etag", "url")
		b.ImmutableAttributes("repository")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_repository_projectHandler", bridge.NewTFHandler(p, "github_repository_project", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_repository_webhook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("active", "configuration", "etag", "url")
		b.ImmutableAttributes("name", "repository")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_repository_webhookHandler", bridge.NewTFHandler(p, "github_repository_webhook", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_team{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("description", "etag", "ldap_dn", "parent_team_id", "privacy", "slug")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_teamHandler", bridge.NewTFHandler(p, "github_team", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_team_membership{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("etag", "role")
		b.ImmutableAttributes("team_id", "username")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_team_membershipHandler", bridge.NewTFHandler(p, "github_team_membership", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_team_repository{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("etag", "permission")
		b.ImmutableAttributes("repository", "team_id")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_team_repositoryHandler", bridge.NewTFHandler(p, "github_team_repository", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_user_gpg_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("etag", "key_id")
		b.ImmutableAttributes("armored_public_key")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_user_gpg_keyHandler", bridge.NewTFHandler(p, "github_user_gpg_key", evs[0]), evs[0])

	evs = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Github_user_ssh_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("etag", "url")
		b.ImmutableAttributes("key", "title")
	}))
	sb.RegisterHandler("TerraformGitHub::Github_user_ssh_keyHandler", bridge.NewTFHandler(p, "github_user_ssh_key", evs[0]), evs[0])

}

type Github_branch_protection_required_pull_request_reviews_1 struct {
	Dismiss_stale_reviews *bool

	Dismissal_teams *[]string

	Dismissal_users *[]string

	Include_admins *bool

	Require_code_owner_reviews *bool
}

type Github_branch_protection_required_status_checks_2 struct {
	Contexts *[]string

	Include_admins *bool

	Strict *bool
}

type Github_branch_protection_restrictions_3 struct {
	Teams *[]string

	Users *[]string
}

type Github_branch_protection struct {
	Github_branch_protection_id *string `lyra:"ignore"`

	Branch string

	Enforce_admins *bool

	Etag *string

	Repository string

	Required_pull_request_reviews *[]Github_branch_protection_required_pull_request_reviews_1

	Required_status_checks *[]Github_branch_protection_required_status_checks_2

	Restrictions *[]Github_branch_protection_restrictions_3
}

type Github_issue_label struct {
	Github_issue_label_id *string `lyra:"ignore"`

	Color string

	Description *string

	Etag *string

	Name string

	Repository string

	Url *string
}

type Github_membership struct {
	Github_membership_id *string `lyra:"ignore"`

	Etag *string

	Role *string

	Username string
}

type Github_organization_project struct {
	Github_organization_project_id *string `lyra:"ignore"`

	Body *string

	Etag *string

	Name string

	Url *string
}

type Github_organization_webhook_configuration_4 struct {
	Content_type *string

	Insecure_ssl *string

	Secret *string

	Url string
}

type Github_organization_webhook struct {
	Github_organization_webhook_id *string `lyra:"ignore"`

	Active *bool

	Configuration *[]Github_organization_webhook_configuration_4

	Etag *string

	Events []string

	Name string

	Url *string
}

type Github_project_column struct {
	Github_project_column_id *string `lyra:"ignore"`

	Etag *string

	Name string

	Project_id string
}

type Github_repository struct {
	Github_repository_id *string `lyra:"ignore"`

	Allow_merge_commit *bool

	Allow_rebase_merge *bool

	Allow_squash_merge *bool

	Archived *bool

	Auto_init *bool

	Default_branch *string

	Description *string

	Etag *string

	Full_name *string

	Git_clone_url *string

	Gitignore_template *string

	Has_downloads *bool

	Has_issues *bool

	Has_projects *bool

	Has_wiki *bool

	Homepage_url *string

	Html_url *string

	Http_clone_url *string

	License_template *string

	Name string

	Private *bool

	Ssh_clone_url *string

	Svn_url *string

	Topics *[]string
}

type Github_repository_collaborator struct {
	Github_repository_collaborator_id *string `lyra:"ignore"`

	Permission *string

	Repository string

	Username string
}

type Github_repository_deploy_key struct {
	Github_repository_deploy_key_id *string `lyra:"ignore"`

	Etag *string

	Key string

	Read_only *bool

	Repository string

	Title string
}

type Github_repository_project struct {
	Github_repository_project_id *string `lyra:"ignore"`

	Body *string

	Etag *string

	Name string

	Repository string

	Url *string
}

type Github_repository_webhook_configuration_5 struct {
	Content_type *string

	Insecure_ssl *string

	Secret *string

	Url string
}

type Github_repository_webhook struct {
	Github_repository_webhook_id *string `lyra:"ignore"`

	Active *bool

	Configuration *[]Github_repository_webhook_configuration_5

	Etag *string

	Events []string

	Name string

	Repository string

	Url *string
}

type Github_team struct {
	Github_team_id *string `lyra:"ignore"`

	Description *string

	Etag *string

	Ldap_dn *string

	Name string

	Parent_team_id *int

	Privacy *string

	Slug *string
}

type Github_team_membership struct {
	Github_team_membership_id *string `lyra:"ignore"`

	Etag *string

	Role *string

	Team_id string

	Username string
}

type Github_team_repository struct {
	Github_team_repository_id *string `lyra:"ignore"`

	Etag *string

	Permission *string

	Repository string

	Team_id string
}

type Github_user_gpg_key struct {
	Github_user_gpg_key_id *string `lyra:"ignore"`

	Armored_public_key string

	Etag *string

	Key_id *string
}

type Github_user_ssh_key struct {
	Github_user_ssh_key_id *string `lyra:"ignore"`

	Etag *string

	Key string

	Title string

	Url *string
}
