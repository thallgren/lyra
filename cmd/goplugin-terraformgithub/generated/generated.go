// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-Provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package github

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/lyraproj/lyra/pkg/bridge"
	"github.com/lyraproj/pcore/px"
	"github.com/lyraproj/servicesdk/service"
)

type (
	Branch_protection struct {
		Branch_protectionID           *string `lyra:"ignore"`
		Branch                        string
		Enforce_admins                *bool
		Etag                          *string
		Repository                    string
		Required_pull_request_reviews *[]Branch_protection__required_pull_request_reviews
		Required_status_checks        *[]Branch_protection__required_status_checks
		Restrictions                  *[]Branch_protection__restrictions
	}

	Issue_label struct {
		Issue_labelID *string `lyra:"ignore"`
		Color         string
		Description   *string
		Etag          *string
		Name          string
		Repository    string
		Url           *string
	}

	Membership struct {
		MembershipID *string `lyra:"ignore"`
		Etag         *string
		Role         *string
		Username     string
	}

	Organization_project struct {
		Organization_projectID *string `lyra:"ignore"`
		Body                   *string
		Etag                   *string
		Name                   string
		Url                    *string
	}

	Organization_webhook struct {
		Organization_webhookID *string `lyra:"ignore"`
		Active                 *bool
		Configuration          *[]Organization_webhook__configuration
		Etag                   *string
		Events                 []string
		Name                   string
		Url                    *string
	}

	Project_column struct {
		Project_columnID *string `lyra:"ignore"`
		Etag             *string
		Name             string
		Project_id       string
	}

	Repository struct {
		RepositoryID       *string `lyra:"ignore"`
		Allow_merge_commit *bool
		Allow_rebase_merge *bool
		Allow_squash_merge *bool
		Archived           *bool
		Auto_init          *bool
		Default_branch     *string
		Description        *string
		Etag               *string
		Full_name          *string
		Git_clone_url      *string
		Gitignore_template *string
		Has_downloads      *bool
		Has_issues         *bool
		Has_projects       *bool
		Has_wiki           *bool
		Homepage_url       *string
		Html_url           *string
		Http_clone_url     *string
		License_template   *string
		Name               string
		Private            *bool
		Ssh_clone_url      *string
		Svn_url            *string
		Topics             *[]string
	}

	Repository_collaborator struct {
		Repository_collaboratorID *string `lyra:"ignore"`
		Permission                *string
		Repository                string
		Username                  string
	}

	Repository_deploy_key struct {
		Repository_deploy_keyID *string `lyra:"ignore"`
		Etag                    *string
		Key                     string
		Read_only               *bool
		Repository              string
		Title                   string
	}

	Repository_project struct {
		Repository_projectID *string `lyra:"ignore"`
		Body                 *string
		Etag                 *string
		Name                 string
		Repository           string
		Url                  *string
	}

	Repository_webhook struct {
		Repository_webhookID *string `lyra:"ignore"`
		Active               *bool
		Configuration        *[]Repository_webhook__configuration
		Etag                 *string
		Events               []string
		Name                 string
		Repository           string
		Url                  *string
	}

	Team struct {
		TeamID         *string `lyra:"ignore"`
		Description    *string
		Etag           *string
		Ldap_dn        *string
		Name           string
		Parent_team_id *int64
		Privacy        *string
		Slug           *string
	}

	Team_membership struct {
		Team_membershipID *string `lyra:"ignore"`
		Etag              *string
		Role              *string
		Team_id           string
		Username          string
	}

	Team_repository struct {
		Team_repositoryID *string `lyra:"ignore"`
		Etag              *string
		Permission        *string
		Repository        string
		Team_id           string
	}

	User_gpg_key struct {
		User_gpg_keyID     *string `lyra:"ignore"`
		Armored_public_key string
		Etag               *string
		Key_id             *string
	}

	User_ssh_key struct {
		User_ssh_keyID *string `lyra:"ignore"`
		Etag           *string
		Key            string
		Title          string
		Url            *string
	}

	Branch_protection__required_pull_request_reviews struct {
		Dismiss_stale_reviews      *bool
		Dismissal_teams            *[]string
		Dismissal_users            *[]string
		Include_admins             *bool
		Require_code_owner_reviews *bool
	}

	Branch_protection__required_status_checks struct {
		Contexts       *[]string
		Include_admins *bool
		Strict         *bool
	}

	Branch_protection__restrictions struct {
		Teams *[]string
		Users *[]string
	}

	Organization_webhook__configuration struct {
		Content_type *string
		Insecure_ssl *string
		Secret       *string
		Url          string
	}

	Repository_webhook__configuration struct {
		Content_type *string
		Insecure_ssl *string
		Secret       *string
		Url          string
	}
)

func Initialize(sb *service.Builder, p *schema.Provider) {
	// Generic handler API
	sb.RegisterAPI("TerraformGitHub::GenericHandler", bridge.NewTFHandler(nil, "", nil))

	// Registration of resource types with handler
	var rt px.Type
	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Branch_protection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("branch_protectionID", "etag")
		b.ImmutableAttributes("branch", "repository")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Branch_protectionHandler", bridge.NewTFHandler(p, "github_branch_protection", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Issue_label{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("issue_labelID", "etag", "url")
		b.ImmutableAttributes("repository")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Issue_labelHandler", bridge.NewTFHandler(p, "github_issue_label", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Membership{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("membershipID", "etag")
		b.ImmutableAttributes("username")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::MembershipHandler", bridge.NewTFHandler(p, "github_membership", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Organization_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organization_projectID", "etag", "url")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Organization_projectHandler", bridge.NewTFHandler(p, "github_organization_project", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Organization_webhook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organization_webhookID", "etag", "url")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Organization_webhookHandler", bridge.NewTFHandler(p, "github_organization_webhook", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Project_column{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_columnID", "etag")
		b.ImmutableAttributes("project_id")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Project_columnHandler", bridge.NewTFHandler(p, "github_project_column", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Repository{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("repositoryID", "default_branch", "etag", "full_name", "git_clone_url", "html_url", "http_clone_url", "ssh_clone_url", "svn_url")
		b.ImmutableAttributes("auto_init", "gitignore_template", "license_template", "name")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::RepositoryHandler", bridge.NewTFHandler(p, "github_repository", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Repository_collaborator{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("repository_collaboratorID")
		b.ImmutableAttributes("permission", "repository", "username")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Repository_collaboratorHandler", bridge.NewTFHandler(p, "github_repository_collaborator", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Repository_deploy_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("repository_deploy_keyID", "etag")
		b.ImmutableAttributes("key", "read_only", "repository", "title")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Repository_deploy_keyHandler", bridge.NewTFHandler(p, "github_repository_deploy_key", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Repository_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("repository_projectID", "etag", "url")
		b.ImmutableAttributes("repository")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Repository_projectHandler", bridge.NewTFHandler(p, "github_repository_project", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Repository_webhook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("repository_webhookID", "etag", "url")
		b.ImmutableAttributes("name", "repository")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Repository_webhookHandler", bridge.NewTFHandler(p, "github_repository_webhook", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Team{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("teamID", "etag", "slug")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::TeamHandler", bridge.NewTFHandler(p, "github_team", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Team_membership{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("team_membershipID", "etag")
		b.ImmutableAttributes("team_id", "username")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Team_membershipHandler", bridge.NewTFHandler(p, "github_team_membership", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&Team_repository{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("team_repositoryID", "etag")
		b.ImmutableAttributes("repository", "team_id")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::Team_repositoryHandler", bridge.NewTFHandler(p, "github_team_repository", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&User_gpg_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("user_gpg_keyID", "etag", "key_id")
		b.ImmutableAttributes("armored_public_key")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::User_gpg_keyHandler", bridge.NewTFHandler(p, "github_user_gpg_key", rt), rt)

	rt = sb.RegisterTypes("TerraformGitHub", sb.BuildResource(&User_ssh_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("user_ssh_keyID", "etag", "url")
		b.ImmutableAttributes("key", "title")
	}))[0]
	sb.RegisterHandler("TerraformGitHub::User_ssh_keyHandler", bridge.NewTFHandler(p, "github_user_ssh_key", rt), rt)

	// Registration of non-resource types
	sb.RegisterTypes("TerraformGitHub",
		&Branch_protection__required_pull_request_reviews{},
		&Branch_protection__required_status_checks{},
		&Branch_protection__restrictions{},
		&Organization_webhook__configuration{},
		&Repository_webhook__configuration{})
}
